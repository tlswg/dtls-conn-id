{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-08-29T00:17:23.740890+00:00",
  "repo": "tlswg/dtls-conn-id",
  "labels": [
    {
      "name": "bug",
      "description": null,
      "color": "ee0701"
    },
    {
      "name": "duplicate",
      "description": null,
      "color": "cccccc"
    },
    {
      "name": "enhancement",
      "description": null,
      "color": "84b6eb"
    },
    {
      "name": "help wanted",
      "description": null,
      "color": "33aa3f"
    },
    {
      "name": "good first issue",
      "description": null,
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": null,
      "color": "e6e6e6"
    },
    {
      "name": "question",
      "description": null,
      "color": "cc317c"
    },
    {
      "name": "wontfix",
      "description": null,
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 7,
      "id": "MDU6SXNzdWUzMzk2OTY1OTU=",
      "title": "Define CID",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/7",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is pretty trivial, but the first use of CID in the draft isn't mated to the expanded \"connection ID\".\r\n\r\nProbably more seriously, that first mention is actually to cite a struct:\r\n\r\n> The extension_data field of this extension, when included in the ClientHello, MUST contain the CID structure, which carries the CID [...]\r\n\r\nThe structure is called `ConnectionId`.\r\n\r\n",
      "createdAt": "2018-07-10T05:20:07Z",
      "updatedAt": "2018-10-21T22:07:22Z",
      "closedAt": "2018-10-21T22:07:22Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "MDU6SXNzdWUzMzk2OTY5NDY=",
      "title": "Connection ID appears in the MAC twice",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/8",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```\r\n         MAC(MAC_write_key, DTLSCompressed.epoch +\r\n                               DTLSCompressed.sequence_number +\r\n                               DTLSCompressed.type +\r\n                               DTLSCompressed.version +\r\n                               connection_id + // New field\r\n                               cid_length +        // New input\r\n                               cid +               // New input\r\n                               DTLSCompressed.length +\r\n                               DTLSCompressed.fragment);\r\n```\r\n\r\nI assume that `cid` and `connection_id` are the same thing.",
      "createdAt": "2018-07-10T05:22:22Z",
      "updatedAt": "2018-10-21T22:01:32Z",
      "closedAt": "2018-10-21T22:01:32Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep.  This was fixed in #6, but that PR is still un-merged.",
          "createdAt": "2018-07-16T12:25:28Z",
          "updatedAt": "2018-07-16T12:25:28Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "MDU6SXNzdWUzMzk2OTczMDQ=",
      "title": "Notation in diagram is confusing",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/9",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In Figure 2, parentheses are used to signify both extensions (connection_id=100) and the addition to the record header (cid=100).  I suggest using a different notation here.",
      "createdAt": "2018-07-10T05:24:39Z",
      "updatedAt": "2019-01-29T11:43:55Z",
      "closedAt": "2019-01-29T11:43:31Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@hannestschofenig can you take a crack at fixing this",
          "createdAt": "2018-10-21T22:04:49Z",
          "updatedAt": "2018-10-21T22:04:49Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Here is an update: https://github.com/tlswg/dtls-conn-id/pull/30",
          "createdAt": "2018-12-29T11:17:50Z",
          "updatedAt": "2018-12-29T11:17:50Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated diagram merged into the draft.",
          "createdAt": "2019-01-29T11:43:54Z",
          "updatedAt": "2019-01-29T11:43:54Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWUzMzk2OTc1NzU=",
      "title": "Advice to use a new connection ID doesn't make sense",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/10",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> In order to prevent this, implementations SHOULD\r\n   attempt to use fresh connection IDs whenever they change local\r\n   addresses or ports (though this is not always possible to detect).\r\n\r\nThere is no way in which an endpoint can do this in this version of the specification, absent creating a new connection.",
      "createdAt": "2018-07-10T05:26:19Z",
      "updatedAt": "2018-10-21T22:07:29Z",
      "closedAt": "2018-10-21T22:07:29Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "MDU6SXNzdWUzMzk2OTg4MjE=",
      "title": "This uses a lot of codepoints",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/11",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If you subscribe to the theory that DTLS has to mux with the realtime protocols, this takes a good slice of the remaining codepoints space.  Though TLS has between 20 and 63, DTLS 1.3 takes 32-63 and the registration of 4 more would leave just 3: 29, 30, and 31.\r\n\r\nI submit that we might be better considering the TLS 1.3 record construction with a single codepoint.  That would get us content type encryption and arbitrary padding as a secondary benefit.  All for the modest cost of one octet.",
      "createdAt": "2018-07-10T05:34:18Z",
      "updatedAt": "2018-11-19T17:56:44Z",
      "closedAt": "2018-11-19T17:56:44Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If DTLS 1.3 used a demux prefix scheme like the one proposed [here](https://github.com/tlswg/dtls13-spec/issues/56), this should be no longer an issue.\r\n",
          "createdAt": "2018-08-24T14:27:20Z",
          "updatedAt": "2018-08-24T14:27:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed in #13 ",
          "createdAt": "2018-10-21T22:09:21Z",
          "updatedAt": "2018-10-21T22:09:21Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWUzMzk3MDExMTk=",
      "title": "Restrict title to DTLS 1.2",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/12",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Given that the details of how this works in DTLS 1.3 are now in the DTLS 1.3 spec, it's probably best to have a title of something like \"Connection Identifiers for DTLS 1.2\".",
      "createdAt": "2018-07-10T05:47:43Z",
      "updatedAt": "2018-10-21T22:11:38Z",
      "closedAt": "2018-10-21T22:11:38Z",
      "comments": []
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWUzODIzMTYxNDQ=",
      "title": "Update IANA Consideration according PR #13",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/15",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#iana-considerations\r\n\r\nStill contains the content types removed in PR #13.\r\n- alert_with_cid(25)\r\n- handshake_with_cid(26)\r\n- application_data_with_cid(27)\r\n- heartbeat_with_cid(28)\r\n\r\nI guess, it should be updated towards PR #13?\r\n- tls12_cid(25) ",
      "createdAt": "2018-11-19T17:19:58Z",
      "updatedAt": "2019-01-10T07:08:07Z",
      "closedAt": "2019-01-10T07:08:07Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR can be found here: https://github.com/tlswg/dtls-conn-id/pull/33",
          "createdAt": "2019-01-07T13:55:17Z",
          "updatedAt": "2019-01-07T13:55:17Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PR will fix it.",
          "createdAt": "2019-01-10T07:08:07Z",
          "updatedAt": "2019-01-10T07:08:07Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWUzODIzMTg3Nzk=",
      "title": "How could the inner type byte be found?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/16",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```\r\nstruct {\r\n         opaque compressed[TLSCompressed.length];\r\n         ContentType type;\r\n         uint8 zeros[length_of_padding];\r\n      } DTLSWrappedCompressed;\r\n```\r\n\r\nAs far as I understand to notation above, `opaque compressed[TLSCompressed.length]` means just some bytes without an explicit encoded length (equivalent to `opaque cid[cid_length]`). So I'm not sure, how the `TLSCompressed.length`could be determined. Could your provide me hint?\r\nOr is there a other way, to find the position of the inner type byte?",
      "createdAt": "2018-11-19T17:26:53Z",
      "updatedAt": "2018-11-19T18:23:42Z",
      "closedAt": "2018-11-19T18:23:41Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All of the type bytes are non-zero, so you just work backward until you find one. This is documented in the TLS 1.3 spec, but I guess we could add text here.",
          "createdAt": "2018-11-19T17:56:19Z",
          "updatedAt": "2018-11-19T17:56:19Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! \r\nI was on the wrong path trying to determine the compressed length.",
          "createdAt": "2018-11-19T18:23:41Z",
          "updatedAt": "2018-11-19T18:23:41Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWUzODIzMjA5MjA=",
      "title": "Is CompressionMethod.null supported for DTLSWrappedCompressed?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/17",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "According https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-payload-protection all records seems to use a `compressed : The value of DTLSCompressed.fragment`. Does this include the `CompressionMethod.null`?",
      "createdAt": "2018-11-19T17:32:37Z",
      "updatedAt": "2019-01-10T07:07:36Z",
      "closedAt": "2019-01-10T07:07:36Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Does this PR provide an improvement help? https://github.com/tlswg/dtls-conn-id/pull/34",
          "createdAt": "2019-01-07T14:44:58Z",
          "updatedAt": "2019-01-07T14:44:58Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, it clarifies it for me.",
          "createdAt": "2019-01-07T19:28:56Z",
          "updatedAt": "2019-01-07T19:28:56Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "MDU6SXNzdWUzODIzMjIyODk=",
      "title": "Available implementations?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/18",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Is there a implementation available to test interoperability?\r\n\r\nI currently plan to introduce in a open source project (californium/scandium, https://github.com/eclipse/californium) and it would make it much easier, if such a implementation is available.",
      "createdAt": "2018-11-19T17:36:29Z",
      "updatedAt": "2021-04-14T00:30:24Z",
      "closedAt": "2021-04-14T00:30:24Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Huawei is working an updated implementation and so do I. We can start interop testing in Jan 2019, if you want. ",
          "createdAt": "2018-12-29T11:10:41Z",
          "updatedAt": "2018-12-29T11:10:41Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That would be great.\r\nAt least \"with itself\", californium's scandium works in the meantime :-) ! \r\n\r\nFor interop testing,  the used number for the extension in the test should be clear.\r\nAnd the content and format of the additional data. \r\n\r\nMy current state of work in progress:\r\nhttps://github.com/eclipse/californium/archive/wip_add_dtls_cid.zip\r\nThe demo-apps/cf-secure is prepared to used a CID (client -> server).\r\n",
          "createdAt": "2018-12-31T13:19:25Z",
          "updatedAt": "2018-12-31T13:19:25Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> My current state of work in progress:\r\n> https://github.com/eclipse/californium/archive/wip_add_dtls_cid.zip\r\n> The demo-apps/cf-secure is prepared to used a CID (client -> server).\r\n\r\nI have cloned the californium repo and switched to the `wip_add_dtls_cid` branch.  Unfortunately, I get errors when I try to compile the project using instructions in the README.md file.\r\n",
          "createdAt": "2019-01-10T23:57:33Z",
          "updatedAt": "2019-01-10T23:57:33Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "another WIP implementation is at https://github.com/thomas-fossati/dtls/blob/master/CID.md",
          "createdAt": "2019-01-11T00:00:04Z",
          "updatedAt": "2019-01-11T00:00:04Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Unfortunately, I get errors when I try to compile the project using instructions in the README.md file.\r\n\r\n`mvn clean install`\r\n\r\nreports errors? Could you please provide the log with the errors? Here, or may be as comment in https://github.com/eclipse/californium/issues/824\r\n \r\n\r\n",
          "createdAt": "2019-01-11T07:42:06Z",
          "updatedAt": "2019-01-11T07:42:06Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> another WIP implementation is at https://github.com/thomas-fossati/dtls/blob/master/CID.md\r\n\r\nGreat, I will try that at the weekend.",
          "createdAt": "2019-01-11T07:42:33Z",
          "updatedAt": "2019-01-11T07:42:33Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@thomas-fossati \r\n\r\nI managed to try your dtls-cid implementation.\r\nUnfortunately, the implementation seems not to share a common cipher suite with californium/scandium.\r\n\r\nFrom your CLIENT_HELLO\r\n\r\n```\r\nCipher Suites (4 suites)\r\n    Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)\r\n    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)\r\n    Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)\r\n    Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)\r\n```\r\n\r\nFrom my CLIENT_HELLO using X509\r\n\r\n```\r\nCipher Suites (2 suites)\r\n    Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 (0xc0ae)\r\n    Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (0xc023)\r\n```\r\n",
          "createdAt": "2019-01-11T14:09:55Z",
          "updatedAt": "2019-01-11T14:09:55Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@thomas-fossati \r\n\r\nI add `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)` to my wip and validated its compatibility with openssl (see scripts in californium demo-apps/cf-secure folder).\r\n\r\nBut with the GO implementation I could not establish successfully a connection.\r\nAs far as I could analyze, the master secret is the same, but the hash of the messages differs. Anyway, maybe you can check the compatibility with openssl using that cipher suite `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`?  \r\n\r\n(I would have created an issue in the linked github repo, but I couldn't find the button for new issues there.) ",
          "createdAt": "2019-01-13T14:24:12Z",
          "updatedAt": "2019-01-13T17:43:12Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Though GO uses the currently next \"unassigned number for extensions (52)\", I can switch to that.\r\nDoes mbedTLS uses also this number? \r\n",
          "createdAt": "2019-01-14T16:39:23Z",
          "updatedAt": "2019-01-14T16:39:23Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@thomas-fossati\r\n\r\nI added now also TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b). Same result, works with openssl but GO reports:\r\n\r\n```\r\nexpect:    5f 20 72 4c d2 be 76 c4 e2 20 5b bc\r\nreceived:  9f a0 20 ab 29 e4 f0 6a a3 ac c5 56\r\npanic: dtls: Expected and actual verify data does not match\r\n```\r\n\r\nI pushed the changes to my wip. I tested using GO as server (port 5684) and the cf-secure `SecureClient` with argument `X509_TRUST`.\r\n",
          "createdAt": "2019-01-15T20:46:58Z",
          "updatedAt": "2019-01-15T20:46:58Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The californium wip is online :-).\r\n\r\ncalifornium.eclipse.org:5684   for coap over dtls supporting cid after the handshake\r\ncalifornium.eclipse.org:5784   for coap over dtls supporting cid also during the handshake\r\n\r\nFor no coap clients, just send  four bytes 40 00 12 35 (coap ping with MID 1235). \r\nThe answer should be  70 00 12 35 (RST for MID 1235).\r\n\r\n",
          "createdAt": "2019-01-21T19:44:56Z",
          "updatedAt": "2019-01-21T19:44:56Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The californium wip is online :-).\r\n\r\n@boaks great!\r\n \r\n> californium.eclipse.org:5684 for coap over dtls supporting cid after the handshake\r\n\r\nI've just tried my client against this endpoint.  Client sends the CID extension (I'm using 52) with a 0-length CID and gets back an handshake failure alert after CH.\r\n",
          "createdAt": "2019-01-24T16:20:06Z",
          "updatedAt": "2019-01-24T16:20:06Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @thomas-fossati\r\n> \r\n> I added now also TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b). Same result, works with openssl but GO reports:\r\n> \r\n> ```\r\n> expect:    5f 20 72 4c d2 be 76 c4 e2 20 5b bc\r\n> received:  9f a0 20 ab 29 e4 f0 6a a3 ac c5 56\r\n> panic: dtls: Expected and actual verify data does not match\r\n> ```\r\n> I pushed the changes to my wip. I tested using GO as server (port 5684) and the cf-secure `SecureClient` with argument `X509_TRUST`.\r\n\r\nI have fixed one thing on server side and now I have no problem interop'ing with openssl (both client and server).  Could you please try again?",
          "createdAt": "2019-01-24T16:21:28Z",
          "updatedAt": "2019-01-24T16:21:28Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> (I'm using 52) \r\n\r\nI adapted to that value in the wip.\r\n\r\n> gets back an handshake failure alert after CH.\r\n\r\nAfter CLIENT_HELLO? Could your please provide the wireshark capture of your CH?\r\n\r\nThe cid in the extension is documented as \r\n\r\n```\r\nstruct {\r\n      opaque cid<0..2^8-1>;\r\n  } ConnectionId;\r\n```\r\n\r\nSo I encoded it with \"uint8 cid_length, cid-bytes\". do you use also a length?",
          "createdAt": "2019-01-24T16:27:23Z",
          "updatedAt": "2019-01-24T16:32:22Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I have fixed one thing on server side and now I have no problem interop'ing with openssl (both client and server). Could you please try again?\r\n\r\nThanks for the update! I will check it today a little later.",
          "createdAt": "2019-01-24T16:28:50Z",
          "updatedAt": "2019-01-24T16:28:50Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> After CLIENT_HELLO? Could your please provide the wireshark capture of your CH?\r\n> \r\n> The cid in the extension is documented as\r\n> \r\n> ```\r\n> struct {\r\n>       opaque cid<0..2^8-1>;\r\n>   } ConnectionId;\r\n> ```\r\n> \r\n> So I encoded it with \"uint8 cid_length, cid-bytes\". do you use also a length?\r\n\r\nThis is the 0-length CID extension sent by the client:\r\n```\r\next type (52):\r\n    0x00 0x34\r\next len:\r\n    0x00 0x01\r\nvalue (the ConnectionId VLA itself):\r\n    0x00\r\n```\r\n\r\nIs this not what you'd expect?",
          "createdAt": "2019-01-24T16:45:21Z",
          "updatedAt": "2019-01-24T17:13:31Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > I have fixed one thing on server side and now I have no problem interop'ing with openssl (both client and server). Could you please try again?\r\n> \r\n> Thanks for the update! I will check it today a little later.\r\n\r\nCool; one limitation to be aware of is that my client currently only handles certificate chains of length one :-)",
          "createdAt": "2019-01-24T17:48:23Z",
          "updatedAt": "2019-01-24T17:48:23Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > The californium wip is online :-).\r\n> \r\n> @boaks great!\r\n> \r\n> > californium.eclipse.org:5684 for coap over dtls supporting cid after the handshake\r\n> \r\n> I've just tried my client against this endpoint. Client sends the CID extension (I'm using 52) with a 0-length CID and gets back an handshake failure alert after CH.\r\n\r\nFYI: I'm running `cf-secure` locally and I get the same behaviour as above when I run it without specifying `X509` on the command line:\r\n```\r\n17:57:30.925 INFO [DTLSConnector]: Aborting handshake with peer [/127.0.0.1:51841]: Client proposed unsupported cipher suites only\r\n17:57:30.926 DEBUG [DTLSConnector]: Terminating connection with peer [/127.0.0.1:51841], reason [HANDSHAKE_FAILURE]\r\n```\r\nIs this maybe the case for the public endpoint?\r\n\r\nAnother interesting thing I've noticed while running `cf-secure` locally is that even though my client sends the (0-length) CID extension, server seems to ignore it (it's not mirrored in the SH).",
          "createdAt": "2019-01-24T18:02:43Z",
          "updatedAt": "2019-01-24T18:02:43Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please update my wip (git pull --force).\r\n\r\nYou use cid_length and cid in the aad?\r\n\r\nWith the go server and the cf-secure client using \"X509_TRUST CID:0\"  I get a \"Connected\" and then a \"Disconnected\" (maybe the binary payload is not expected).\r\n\r\nWith cf-secure server \"X509 NO_AUTH CID:4\" and your client I get \"panic: dtls: Expected and actual key signature do not match\".  I will check that more detailed at the weekend. \r\n",
          "createdAt": "2019-01-24T19:53:35Z",
          "updatedAt": "2019-01-24T19:53:35Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Another interesting thing I've noticed while running cf-secure locally is that even though my client sends the (0-length) CID extension, server seems to ignore it (it's not mirrored in the SH).\r\n\r\nyes, please add \"CID:4\" to the argument line. And NO_AUTH to suppress the client certificate request.",
          "createdAt": "2019-01-24T19:55:01Z",
          "updatedAt": "2019-01-24T19:55:01Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "[cid_certificates.zip](https://github.com/tlswg/dtls-conn-id/files/2793389/cid_certificates.zip)\r\n\r\nThe captures with the certificates. Where can I find your certificate? May be using that is more successful :-).",
          "createdAt": "2019-01-24T20:06:20Z",
          "updatedAt": "2019-01-24T20:06:20Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some updates:\r\n\r\nThe go implementation seems to have issues as client, if the group `secp256r1` is used instead of `x25519`. You may check this with openssl using \"-named_curve prime256v1\" to force openssl to use the `secp256r1` instead of `x25519`. (Californium/scandium currently doesn't support `x25519`.) The reported error from go is \"Expected and actual key signature do not match\", with both openssl and californium/scandium as server.\r\n\r\nUsing go as server doesn't show this effect and the handshake can be finished.\r\nUsing the cid_length in aad (PR #29 would removed that) and always add a 0 pad (even if AEAD is used, which doesn't require padding) I can send data successfully to the go server. \r\nGo currently doesn't send the FINISHED with tls_cid and if a FINISHED with tls_cid is received, \" unhandled wrapped content type: 22\" is reported. I prepared a work around commit, but I must clean it up much more before I can PUSH it. I hope I can update the wip during this week (may be today).\r\n\r\n@thomas-fossati \r\nIf possible, can you check the go client forcing to use `secp256r1`?\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2019-01-27T12:09:50Z",
          "updatedAt": "2019-01-27T12:09:50Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I pushed the update and left a comment https://github.com/eclipse/californium/issues/824#issuecomment-458263651 \r\n ",
          "createdAt": "2019-01-28T19:17:07Z",
          "updatedAt": "2019-01-28T19:17:07Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "hi @boaks \r\n\r\n> If possible, can you check the go client forcing to use secp256r1?\r\n\r\nthanks!  this should be fixed [now](https://github.com/thomas-fossati/dtls/commit/dbde4c64ba7e68a12ce5cc7649d8a29a08261f9d)\r\n\r\n",
          "createdAt": "2019-01-28T22:50:44Z",
          "updatedAt": "2019-01-28T22:50:44Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "quick update: Scandium and the go implementation interop OK, both client and server and over volatile 4-tuples.  Cool :-)",
          "createdAt": "2019-01-29T10:44:35Z",
          "updatedAt": "2019-01-29T10:44:35Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Cool :-)\r\n\r\nIndeed! The basic idea of this draft is really straight forward to implement. \r\nSome of the crypto-details, which are discussed (e.g. MAC) must sure be implemented based on the same definition, but that's not too surprising. \r\n\r\nFMPOV, for sustainability, the scope of the draft should be discussed. Otherwise I would be afraid, that assumption for \"special use-cases\" will break too much the interoperability. But lets open a new issue for that.\r\n ",
          "createdAt": "2019-01-29T14:02:33Z",
          "updatedAt": "2019-01-29T14:02:33Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@hannestschofenig \r\n\r\nhttps://github.com/tlswg/dtls-conn-id/issues/28#issuecomment-459279854\r\n\r\n\"I believe we should allow cid usage already in the handshake itself rather than just for application layer payloads.\"\r\n\r\nI will try to polish my approach over the next weekend and push it to the californium sandbox (coaps://californium.eclipse.org:5784) (5684 will be \"cid not used in the handshake\"). \r\n",
          "createdAt": "2019-01-31T10:00:35Z",
          "updatedAt": "2019-01-31T10:00:35Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I tried to compile the Californium code and here are the error messages I get: \r\n\r\n\r\n[ERROR] /home/hannes/californium/californium-core/src/main/java/org/eclipse/californium/core/network/config/NetworkConfig.java:423: Undefined reference: void AutoCloseable.close()\r\n[ERROR] /home/hannes/californium/californium-core/src/main/java/org/eclipse/californium/core/network/config/NetworkConfig.java:423: Undefined reference: void Throwable.addSuppressed(Throwable)\r\n[ERROR] /home/hannes/californium/californium-core/src/main/java/org/eclipse/californium/core/network/config/NetworkConfig.java:423: Undefined reference: void AutoCloseable.close()\r\n\r\n\r\n[ERROR] Failed to execute goal org.codehaus.mojo:animal-sniffer-maven-plugin:1.17:check (default) on project californium-core: Signature errors found. Verify them and ignore them with the proper annotation if needed. -> [Help 1]\r\n[ERROR] \r\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r\n[ERROR] \r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\r\n[ERROR] \r\n[ERROR] After correcting the problems, you can resume the build with the command\r\n[ERROR]   mvn <goals> -rf :californium-core\r\n\r\n",
          "createdAt": "2019-02-28T16:33:29Z",
          "updatedAt": "2019-02-28T16:33:29Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Which java jdk do you use?\r\n \r\n> java -version\r\n> javac -version\r\n\r\nIf I  remember well, I saw a similar error last year, when I used java11 on ubuntu 18.04. \r\nWith the current jave update it seems to be solved.\r\n\r\nI use java8 (build 1.8.0_191-8u191-b12-2ubuntu0.18.04.1-b12) and java11 (build 11.0.1+13-Ubuntu-3ubuntu118.04ppa1).\r\n\r\nIf you use the \"wip_add_dtls_cid\" please note, that the last commit contains fixes for go. \r\nPlease use the commit before that (currently df6464eb9390). \r\nScandium uses currently 52 for the hello extension.\r\n \r\n",
          "createdAt": "2019-02-28T21:45:18Z",
          "updatedAt": "2019-02-28T21:45:18Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The \"tls_cid_record-already-in-handshake\" is removed :-), \r\n\"the commit before the go fixes\" should comply to the current version of this spec.",
          "createdAt": "2019-02-28T21:47:58Z",
          "updatedAt": "2019-02-28T21:47:58Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "> java -version\r\nopenjdk version \"10.0.2\" 2018-07-17\r\nOpenJDK Runtime Environment (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.4)\r\nOpenJDK 64-Bit Server VM (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.4, mixed mode)\r\n\r\n> javac -version\r\njavac 10.0.2\r\n\r\nDo you have a virtual machine somewhere with Californium running properly? \r\n",
          "createdAt": "2019-03-01T16:13:20Z",
          "updatedAt": "2019-03-01T16:13:20Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "coaps://californium.eclipse.org:5684 \r\n\r\nit runs the \"etsi plugtest server\". PSK credentials\r\nidentity \"password\" secret \"sesame\" (or hex 736573616D65)\r\n\r\nSince today, the snapshot of the plugtest server is also available at\r\n\r\nhttps://repo.eclipse.org/content/repositories/californium-snapshots/org/eclipse/californium/cf-plugtest-server/2.0.0-SNAPSHOT/ \r\n\r\nfor download.\r\n\r\nIf you put `@NotForAndroid` also direct before the class definition, \r\n`public final class NetworkConfig {` it may also compile with java 10. \r\nBut it's not that tested with java 10 (closer to not tested :-) ). \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2019-03-01T16:51:57Z",
          "updatedAt": "2019-03-01T16:51:57Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you want to use a coap-request\r\n\r\nGET coaps://californium.eclipse.org/large\r\n\r\n",
          "createdAt": "2019-03-01T17:15:06Z",
          "updatedAt": "2019-03-01T17:15:17Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I re-installed a new version of Ubuntu from scratch and the error is gone. ",
          "createdAt": "2019-03-01T19:07:33Z",
          "updatedAt": "2019-03-01T19:07:33Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": ":-). That sounds good. Remember not to use the HEAD of the wip-branch, it contains the fixes for the \"go\" implementation (finish without cid). Please use the commit before.",
          "createdAt": "2019-03-01T19:33:05Z",
          "updatedAt": "2019-03-01T19:38:36Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@thomas-fossati \r\n\r\nIn the meantime I was able to test your update.\r\nThe FINISH seems to be still a HANDSHAKE record instead of a TLS_CID record.\r\nAll other issues are solved.",
          "createdAt": "2019-03-08T21:26:01Z",
          "updatedAt": "2019-03-08T21:26:01Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just for those, who are interested: \r\nBased on the CID and the californium implementation I prepared a demonstration load-balancer setup. \r\nSee https://github.com/eclipse/californium/wiki/DTLS-1.2-connection-ID-based-load-balancer  ",
          "createdAt": "2019-04-02T20:17:19Z",
          "updatedAt": "2019-04-02T20:17:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm going to close this because we want to get to issues 0.",
          "createdAt": "2021-04-14T00:30:24Z",
          "updatedAt": "2021-04-14T00:30:24Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "MDU6SXNzdWUzODI0Nzg1Mzc=",
      "title": "cid=empty and MAC calculation",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/22",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If this feature is negotiated on, then the MAC calculation changes, even if no connection ID is sent, because of `cid_length`.  This needs to be clearly sign-posted.",
      "createdAt": "2018-11-20T02:56:28Z",
      "updatedAt": "2019-03-11T11:07:11Z",
      "closedAt": "2019-03-11T11:07:11Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My preferred interpretation is:\r\n\r\n`cid=empty` uses the original RFC6347, section 4.1 record format\r\n\r\nhttps://tools.ietf.org/html/rfc6347#section-4.1\r\n\r\nindicated by the already used content type ids. That includes also the unchanged MAC.",
          "createdAt": "2018-11-20T09:50:14Z",
          "updatedAt": "2018-11-20T09:50:48Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Created a pull request to add clarifying text: https://github.com/tlswg/dtls-conn-id/pull/35",
          "createdAt": "2019-01-07T14:53:48Z",
          "updatedAt": "2019-01-07T14:53:48Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson \r\n\r\nit would be great, if you could explain, if you want to use the new record type with an empty CID in order to obfuscate the DTLS payload length. Please note, that currently the specification of this draft turns more into a \"strict\" usage (see issue #28) which will not support the new record type with an empty CID.  ",
          "createdAt": "2019-01-29T14:41:56Z",
          "updatedAt": "2019-01-29T14:41:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Interesting question.  Yes, I would like to be able to use the new record type to pad records, but I don't think that it is an especially important consideration.  If the design is easier without that, and I suspect that it is, then I am OK with not doing that.  A one-octet connection ID is not that much of a burden to pay to get this feature.",
          "createdAt": "2019-01-30T00:08:51Z",
          "updatedAt": "2019-01-30T00:08:51Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A one-octet connection ID is not that much of a burden to pay to get this feature.\r\n\r\nSo you would then got for adding a 1 byte cid, but still use the ip-address:port to map it to the security context (keying stuff)? Or do you consider only a few connections?\r\n\r\nFor me that is just one of the scenario's, I'm really afraid of! \r\nIt makes the usage of cid more indeterministic, if the spec \"ignores\" that kind of usage instead of explicitly considering it!\r\n\r\nFMPOV, it will be easier, to support then a empty CID record indicating, that still the ip-address:port must be used instead of a 1 byte cid, but then being not strict on the mapping.\r\n \r\n",
          "createdAt": "2019-01-30T06:24:10Z",
          "updatedAt": "2019-01-30T06:24:10Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in submitted version -04",
          "createdAt": "2019-03-11T11:07:11Z",
          "updatedAt": "2019-03-11T11:07:11Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWUzODI0Nzg2NjQ=",
      "title": "cid, CID, connection id, and connection ID",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/23",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It probably makes sense to be a little more consistent.",
      "createdAt": "2018-11-20T02:57:03Z",
      "updatedAt": "2019-03-11T11:06:45Z",
      "closedAt": "2019-03-11T11:06:45Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense. I will do this after the current wave of pull requests have been reviewed and accepted/rejected. ",
          "createdAt": "2019-01-07T14:54:41Z",
          "updatedAt": "2019-01-07T14:54:41Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I addressed this issue in PR #42 ",
          "createdAt": "2019-02-01T10:21:43Z",
          "updatedAt": "2019-02-01T10:21:43Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed with submitted draft version -04",
          "createdAt": "2019-03-11T11:06:45Z",
          "updatedAt": "2019-03-11T11:06:45Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "MDU6SXNzdWUzODQwMTI0NzQ=",
      "title": "Record Layer Protection - MAC",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/25",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-payload-protection\r\n\r\nAccording RFC5246, the record layer protection is split into 3 sections\r\n- NULL and stream (stream is not used for DTLS)\r\n- CBC\r\n- AEAD\r\n\r\nin this draft, only the NULL is referenced\r\nhttps://tools.ietf.org/html/rfc5246#section-6.2.3.1\r\n\r\nIf the CID value should be included in that MAC, I would expect, that this draft specifies how to do this for all three variants. By the way, I'm not sure, why the CID should be explicitly included. The CID \"points\" to the \"keys\" used to calculate the MAC, with a wrong CID, the wrong \"key\" will be used and that should cause a MAC violation anyway.",
      "createdAt": "2018-11-24T18:48:15Z",
      "updatedAt": "2019-02-09T17:02:57Z",
      "closedAt": "2019-02-09T17:02:57Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can fix this text, but there are multiple CIDs pointing to the same keys, so we need to have the CID in the MAC\r\n\r\n",
          "createdAt": "2018-12-06T13:41:41Z",
          "updatedAt": "2018-12-06T13:41:41Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I didn't get that. Why are \"multiple CIDs\" pointing to the same keys? \r\nIs \"keys\" referring to https://tools.ietf.org/html/rfc5246#section-6.1 \r\n\r\n```\r\nclient write MAC key\r\nserver write MAC key\r\nclient write encryption key\r\nserver write encryption key\r\nclient write IV\r\nserver write IV\r\n```\r\n\r\nmay be I miss something, if ip-address:port is used to identify the \"keys\", the MAC ensures, that the same keys are used. But the MAC itself is not based on the ip-address:port. or I'm wrong? If, I didn't miss something, then the cid is not required to be directly included in the MAC, as the ip-address:port. Instead is indirect validated with the MAC, as the ip-address:port would also be validated.  ",
          "createdAt": "2018-12-06T13:57:48Z",
          "updatedAt": "2018-12-06T13:57:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can change CIDs during the connection. Thus, if it's not included in the MAC, you can substitute CIDs.\r\n\r\n\r\n",
          "createdAt": "2018-12-06T14:03:11Z",
          "updatedAt": "2018-12-06T14:03:11Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I still can't see the point.\r\nDo you mean, the CID could be exchanged during the transmission?\r\nFMPOV this seems to be no issue, which could be fixed by including it explicit in the MAC.\r\nThe ip-address:port may also be exchanged, but are not included explicit in the MAC (this would fail on every NAT).  \r\n\r\nReceiver side:\r\n```\r\n<CID1> => <mac keys1, enc keys1> \r\n<CID2> => <mac keys2, enc keys2> \r\n<CIDy> => no keys\r\n``` \r\n\r\nRecord `<CID1>` contents get protected by a MAC calculated with `<mac keys1>`.\r\nIf the `<CID1>` is exchanged during transmission with `<CIDy>`, this fails, because, no keys are mapped at the receiver.\r\nIf the `<CID1>` is exchanged during transmission with `<CID2>`, this fails, because, the receiver would try to validate the MAC using  `<mac keys2>`. \r\nFor me, it's pretty the same, if you use the ip-address:port or CID to point to the keys, both are considered indirect and don't need to be included explicit. Or is there still a case, I missed?\r\n \r\n",
          "createdAt": "2018-12-06T14:21:55Z",
          "updatedAt": "2018-12-06T14:23:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can have multiple valid CIDs for the same connection (and hence the same keys) at once. In this case, the attacker can swap them. Including the CID in the MAC protects against that.\r\n\r\nI understand your analogy with IP address, but this is internal to TLS and might be used by the implementation, and therefore the safest practice is to protect it, like everything else in the header.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2018-12-06T14:24:44Z",
          "updatedAt": "2018-12-06T14:24:44Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> You can have multiple valid CIDs\r\n\r\nI can't see, that this is valid for this version of the draft!\r\n\r\n> In DTLS, connection ids are exchanged at the beginning of the DTLS session only. There is no dedicated \"connection id update\" message that allows new connection ids to be established mid-session\r\n\r\nIf that is true, and the keys are generated in a way, which ensures that they are very likely to be unique for each session, how can I establish connections using different connections id but resulting in the same keys?\r\n\r\n\r\n \r\n",
          "createdAt": "2018-12-06T14:31:53Z",
          "updatedAt": "2018-12-06T14:31:53Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> You can have multiple valid CIDs for the same connection (and hence the same keys) at once.\r\n\r\nMay be an handshakes example, which results in that, will clarify it.  ",
          "createdAt": "2018-12-06T14:33:40Z",
          "updatedAt": "2018-12-06T14:33:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thu, Dec 6, 2018 at 6:31 AM Achim Kraus <notifications@github.com> wrote:\n\n> You can have multiple valid CIDs\n>\n> I can't see, that this is valid for this version of the draft!\n>\nYes, but it might be true with some extension in the future. Moreover,\nauthenticating the whole header is just good practice.\n\nIn DTLS, connection ids are exchanged at the beginning of the DTLS session\n> only. There is no dedicated \"connection id update\" message that allows new\n> connection ids to be established mid-session\n>\n> If that is true, and the keys are generated in a way, which ensures that\n> they are very likely to be unique for each session, how can I establish\n> connections using different connections id but resulting in the same keys?\n>\nAh.\n",
          "createdAt": "2018-12-06T14:34:24Z",
          "updatedAt": "2018-12-06T14:34:24Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Yes, but it might be true with some extension in the future. \r\n\r\nBut isn't the future DTLS 1.3?\r\n\r\n> Moreover, authenticating the whole header is just good practice.\r\n\r\nBut the CID is authenticated! Indirect! And, if it's not included in the MAC, then the changes in the implementations should be much smaller. Unfortunately, I had some other reported issues in californium, so I was just able to start to implement CID, but I couldn't finish it right now. I would really prefer, if this draft focus on fixing the NAT pain in DTLS 1.2 and leave the future to DTLS 1.3. But that's just my preference, and not really an argument.",
          "createdAt": "2018-12-06T14:45:26Z",
          "updatedAt": "2018-12-06T14:45:26Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Ah.\r\n\r\nIs for? \r\n1. my argument is that wrong, that no more comment is required\r\n2. takes some time to think on it",
          "createdAt": "2018-12-06T14:47:19Z",
          "updatedAt": "2018-12-06T14:47:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thu, Dec 6, 2018 at 6:47 AM Achim Kraus <notifications@github.com> wrote:\n\n> Ah.\n>\n> Is for?\n>\n\ntypo.\n\n>\n>    1. my argument is that wrong, that no more comment is required\n>    2. takes some time to think on it\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/issues/25#issuecomment-444895140>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oS85S7TvDUvdj1t_WvH70CQH4nNpks5u2S4FgaJpZM4YxiuJ>\n> .\n>\n",
          "createdAt": "2018-12-06T15:38:44Z",
          "updatedAt": "2018-12-06T15:38:44Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "Given that the CID replaces the IP:PORT tuple for TCP, not including in the MAC doesn't make the connection vulnerable to any attack that was not possible before. Indeed leaving it outside the calculations would make the DTLS1.2 implementation simpler and that's a plus.",
          "createdAt": "2018-12-07T09:31:26Z",
          "updatedAt": "2018-12-30T18:39:46Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding the earlier point of not using the correct MAC definition I agree. Here is a proposed change: \r\nhttps://github.com/tlswg/dtls-conn-id/pull/29\r\n\r\nMy suggestion is to only focus on AEAD ciphers. \r\n\r\nRegarding the question whether the inclusion of the cid, cid_length, etc. is necessary or not I am not entirely sure myself either since I cannot see the attack. I do, however, understand that it is good practice to include more information in the MAC.",
          "createdAt": "2018-12-29T11:29:36Z",
          "updatedAt": "2018-12-29T11:29:36Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I still feel, that this extended/changed MAC will introduce some misunderstandings.\r\n",
          "createdAt": "2019-01-07T19:55:08Z",
          "updatedAt": "2019-01-07T19:55:08Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I tried to improve clarity in the description. If there is a way to improve the text please let me know. I fear that not making any changes to the additional data computation will require a formal analysis to ensure that it is safe to use.",
          "createdAt": "2019-01-11T09:03:02Z",
          "updatedAt": "2019-01-11T09:03:02Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I tried to improve clarity in the description.\r\n\r\nYes, and I welcome  that very much.\r\n\r\nFMPOV, it's open, what the \"good practice\" really includes. In TLS 1.2 it's the header and the \"internal\" seq_num to prevent repeats. With DTLS 1.2 it's parts of the header in order of the header, and, with the seq_num now also in the header, parts of the header **not** in order of that header. \r\nWith this draft, not only the additional header field cid is added, it also adds the \"internal\" cid_length, and I'm wondering, why.\r\n\r\nWith https://github.com/tlswg/dtls-conn-id/pull/29#discussion_r246402825 I'm not sure, what the order of  the \"good practice\" should be.  \r\n\r\nAnd agreeing with https://github.com/tlswg/dtls-conn-id/pull/29#discussion_r246403914 the other modes need to be defined also. \r\n\r\n\r\n",
          "createdAt": "2019-01-11T09:15:15Z",
          "updatedAt": "2019-01-11T09:15:15Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will be fixed with #44",
          "createdAt": "2019-02-09T17:02:57Z",
          "updatedAt": "2019-02-09T17:02:57Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWUzODQwMTI3Nzc=",
      "title": "CID usage during handshake",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/26",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#examples\r\n\r\nThe example shows in flight 5\r\n\r\nCertificate                 -------->\r\nClientKeyExchange\r\nCertificateVerify\r\n[ChangeCipherSpec]\r\nFinished\r\n(cid=100)\r\n\r\nDoes this imply that the flight 5 is send with cid = 100 or only the Finished?\r\n\r\nI would prefer to be able to send also the other handshake messages of the flight with a cid, that would make it harder to disturb handshakes by spoofed handshake messages.",
      "createdAt": "2018-11-24T18:53:02Z",
      "updatedAt": "2019-02-04T15:28:24Z",
      "closedAt": "2019-02-01T11:29:27Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "In DTLS 1.2 only the Finished message is encrypted. In the current design we make use of the CIDs only once encryption is enabled. I should explain that only the Finished message contains a CID here. ",
          "createdAt": "2018-12-29T11:19:32Z",
          "updatedAt": "2018-12-29T11:19:32Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "See additional explanation in PR #30: https://github.com/tlswg/dtls-conn-id/pull/30",
          "createdAt": "2018-12-29T11:25:42Z",
          "updatedAt": "2018-12-29T11:25:42Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would enjoy it, if the cid could be extended into the not encrypted handshake messages also. Is there any reason, not to do so?\r\n\r\nMy consideration is to make the handshake \"slightly more\" protected against spoofing.\r\nThe current protection in RFC6347 is limited to https://tools.ietf.org/html/rfc6347#section-4.2.1 and https://tools.ietf.org/html/rfc6347#section-4.1.2 .\r\nThe first applies only to the CLIENT_HELLO (\"cookie\" protection again spoofed CLIENT_HELLOs). The second (MAC and Anti-Replay) is only usable after a successful handshake.  If an attacker spoofs other handshake messages, the attacker may block a handshake from being successful (even if the time window for that is very small and so it would be a rather expensive attack). Using a CID would enable a implementation either to handshake even when addresses are changing during the handshake or to protect the handshake slightly more (not supporting address changes but) use the CID to validate the handshake message belonging to this handshake. I would leave the chosen strategy to the implementation, enabling implementations to flexible chose the strategy depending on the current handshake load (means: supporting address changes in handshakes as normal operation, but switch dynamically to the more protective one, if a certain relative number of handshake fails.)  \r\n\r\nMy current work in progress:\r\nhttps://github.com/eclipse/californium/archive/wip_add_dtls_cid.zip\r\n  \r\ncontains already this feature as experimental extension. It's easy to be added to a cid implementation.",
          "createdAt": "2018-12-31T14:07:35Z",
          "updatedAt": "2018-12-31T14:15:41Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Section 4.1.2 describes an attack where an attacker injects traffic that cannot be correctly processed due to a MAC failure. The reason why MAC failures in DTLS do not lead to a connection termination (unlike in TLS) is that they are much easier to mount: an attacker only needs to know the source and destination IP and port.\r\n\r\nSection 4.2.1 talks about the cookie exchange, which has been added to prevent amplification attacks against third parties. \r\n\r\nI would argue that these two attacks are very different from what you are trying to tackle. You would like to add resiliency against on-path (?) attacks sending spoofed handshake messages. I cannot see how the CID provides that extra protection. \r\n\r\nI understand the use case of address changes during the handshake. The question is whether this is actually something real. If the IP address & port changes during the handshake then this is indeed annoying but how often does this happen? \r\n",
          "createdAt": "2019-01-07T15:05:59Z",
          "updatedAt": "2019-01-07T15:05:59Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I mentioned 4.1.2 and 4.2.1 just to sum up the current protection mechanisms.\r\n\r\nThe attack, I consider, is a off-path.\r\ne.g. using PSK, someone spoofs a CLIENT_KEY_EXCHANGE with the identity \"ghost\". Now it's hard for the server to differentiate the wrong from the right CLIENT_KEY_EXCHANGE with identity \"me\". With the CID in the handshake, spoofing into the handshake will be much harder. I don't assume, that such attacks will be easy or happen frequently. But assuming something as a \"theft detection\" for something valuable, it may be used to block the reporting message.",
          "createdAt": "2019-01-07T19:41:43Z",
          "updatedAt": "2019-01-07T19:41:43Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't understand why we'd need to enable CID during handshake, and in particular on Finished?\r\n\r\nAny sane handshake will complete well before any NAT rebinding has a chance to mess with the path (note that in-flight handshake messages refresh the port bindings...).\r\n\r\nWhat kind of use case would that address?  Is it connection migrations while handshaking?\r\n\r\nI'm not sure the \"increased robustness against spoofing\" argument is a very strong one: the handshake is either robust as-is or we are in trouble :-)\r\n\r\nAlso, would that imply reconsidering the security analysis of the handshake?\r\n\r\nMy preference instead would be to send tls12cid records only after the handshake has completed successfully, i.e. on the first application_data.",
          "createdAt": "2019-01-10T15:56:43Z",
          "updatedAt": "2019-01-10T15:56:43Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FMPOV:\r\n\r\n4.2.1 protects in the **long period before** the handshake. With the cookie you could not only spoof CLIENT_HELLOs an trigger heavy functions.  \r\n\r\n4.1.2 protects in the **long period after** the handshake. With the MAC filter it's also not possible to spoof messages at that period (or even repeat them).\r\n\r\nBut in the **short period** (few seconds) of the handshake itself, I couldn't find a straight forward method, to distinguish between the right inner handshake messages and spoofed ones. Using the CID would offer a similar protection for those inner handshake messages as the cookie for the CLIENT_HELLO. I don't assume, that such attack will happen too frequently. But I could assume, if someone has a high interest, such an attack may be used to \"deny\" a handshake of a certain peer for a certain time period, e.g. \"theft detection\" for one device may be blocked for a couple of minutes. \r\nOnly because the CID would offer protection against this \"for free\", if used during the handshake, I started to try to introduce that.",
          "createdAt": "2019-01-10T16:28:01Z",
          "updatedAt": "2019-01-10T16:29:01Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Also, would that imply reconsidering the security analysis of the handshake?\r\n\r\nLet me admit, that the attack in the inner handshake is not likely. Some implementations seems to use the 4.1.2 mechanism even in epoch 0, that may help, but introduces other risks (attack possibilities for the inner handshake). FMPOV, currently you would need too much implementation knowledge to execute such an attack.\r\n\r\nBut, though in my opinion, using the CID within the handshake, offers a protection \"for free\", I think it's worth to be considered.\r\n  ",
          "createdAt": "2019-01-10T16:35:35Z",
          "updatedAt": "2019-01-10T16:35:35Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I'm not sure I understand which kind of extra protection we'd get: when handshaking the CID is spoofable as much as the source address in the UDP packet.",
          "createdAt": "2019-01-10T16:53:41Z",
          "updatedAt": "2019-01-10T16:53:41Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another argument for not changing the wire image of the record layer during the handshake phase is possible middleboxes interference.",
          "createdAt": "2019-01-10T16:54:58Z",
          "updatedAt": "2019-01-10T16:54:58Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Sorry, I'm not sure I understand which kind of extra protection we'd get: when handshaking the CID is spoofable as much as the source address in the UDP packet.\r\n\r\nThe cookie of 4.2.1 is also spoofable, but for successful spoofing it must be the right cookie for that time period and address. The same applies for the CID. If combined with the address, then it protects, because a spoofer must know the CID. (And sure, it's visible and .. but the cookie is also visible. The point is also the time period, when this CID could be used for spoofing. And that's very short, comparable with the short valid time-period of the cookie.)  \r\n \r\n\r\n",
          "createdAt": "2019-01-10T17:02:57Z",
          "updatedAt": "2019-01-10T17:02:57Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm still confused, could you characterise precisely your attacker in terms of its goal and position in the network? Thanks!",
          "createdAt": "2019-01-10T17:09:57Z",
          "updatedAt": "2019-01-10T17:09:57Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Another argument for not changing the wire image of the record layer during the handshake phase is possible middleboxes interference.\r\n\r\nI don't want to change the wire image more, than this draft already does!\r\nWith outer type `tls12_cid(25)` and inner types `change_cipher_spec(20), alert(21), handshake(22)` nothing additional to the already defined additions is introduces, except that it is used already within the handshake.\r\n\r\nIf you want, I update my wip https://github.com/eclipse/californium/archive/wip_add_dtls_cid.zip and document, how to use a CID in the handshake. \r\nThen you see in wireshark, how it works.",
          "createdAt": "2019-01-10T17:10:17Z",
          "updatedAt": "2019-01-10T17:10:17Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I don't want to change the wire image more than this draft already does!\r\nWith outer type tls12_cid(25) and inner types change_cipher_spec(20), alert(21), handshake(22) nothing additional to the already defined additions is introduced\r\n\r\nYep\r\n\r\n> except that it is used already within the handshake.\r\n\r\nThat's the trouble.  Most \"enterprise security\" middleboxes want to be able to look into the handshake to determine whether a connection is ok according to their policies.\r\n\r\nAfter the handshake completes and the connection is considered alright, they just act as blind packet forwarders.\r\n\r\nTo do the handshake inspection they depend on the established wire image of the TLS/DTLS protocol.\r\n\r\nIf we introduce the ability to change the wire format during handshake (as opposed to the post-handshake phase only) we might end up impairing clients that sit behind those boxes.\r\n\r\n",
          "createdAt": "2019-01-10T17:24:28Z",
          "updatedAt": "2019-01-10T17:24:28Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm still confused, could you characterise precisely your attacker in terms of its goal and position in the network? Thanks!\r\n\r\nGoal:\r\nDeny successful handshake of a selected peer.\r\nPosition:\r\noff-path, but know the peer's address and the interesting time period.\r\n\r\nSomething missing?\r\n",
          "createdAt": "2019-01-10T17:29:13Z",
          "updatedAt": "2019-01-10T17:29:13Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If we introduce the ability to change the wire format during handshake (as opposed to the post-handshake phase only) we might end up impairing clients that sit behind those boxes.\r\n\r\nSmells for me, that a \"list of typed cid\" (see #36) may be used, to enable a peer behind such a box to inform the other, not to use the CID during the handshake.\r\n\r\ntypes: \r\n\"plain\" - cid only after handshake\r\n\"plain+\" - cid also during handshake  ",
          "createdAt": "2019-01-10T17:35:33Z",
          "updatedAt": "2019-01-10T17:36:49Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Most \"enterprise security\" middleboxes\r\n\r\nJust for my personal interest: can you name a middlebox, which supports DTLS? ",
          "createdAt": "2019-01-10T17:39:23Z",
          "updatedAt": "2019-01-10T17:39:23Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, now you triggered me:\r\n\r\n> That's the trouble. Most \"enterprise security\" middleboxes want to be able to look into the handshake to determine whether a connection is ok according to their policies.\r\n> \r\n> After the handshake completes and the connection is considered alright, they just act as blind packet forwarders.\r\n\r\nWhy should those middleboxes forward my tls_cid record, when my address has changed, but block my tls_cid record, when it contains a handshake?\r\n\r\nIf the middleboxes are unaware of this draft, but forward my tls_cid record even with changed address, I would assume, they forward my tls_cid record also with a inner handshake message.\r\n\r\n",
          "createdAt": "2019-01-10T17:57:24Z",
          "updatedAt": "2019-01-10T17:57:24Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Goal:\r\nDeny successful handshake of a selected peer.\r\nPosition:\r\noff-path, but know the peer's address and the interesting time period.\r\n\r\nOK, thanks very much.\r\n\r\nFrankly, the combination of perfect timing as well as the randomization provided by the source port makes the attack window pretty narrow.\r\n\r\nOn the other hand, allocating state too early (i.e., allocating CIDs without strong commitment from client side) opens up an interesting amount of attack surface on server side.",
          "createdAt": "2019-01-10T19:36:45Z",
          "updatedAt": "2019-01-10T19:36:45Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Just for my personal interest: can you name a middlebox, which supports DTLS?\r\n\r\nThis is a tricky question.  Boxes like [this one](https://www.symantec.com/products/ssl-visibility-appliance) typically have scripting capabilities which give their admins lots of leeway.  I do not build nor operate any of these so my direct experience is ~0, but speaking with the Symantec guys exactly about how to modify the DTLS wire image to signal the presence of CID in a middlebox-tolerant way, their feedback was \"to be sure, just leave the handshake alone as much as possible\"...  I have no reason to doubt their assessment, also given the ways TLS 1.3 was hit in this same space.",
          "createdAt": "2019-01-10T19:46:32Z",
          "updatedAt": "2019-01-10T19:46:32Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Frankly, the combination of perfect timing as well as the randomization provided by the source port makes the attack window pretty narrow.\r\n\r\nAbove I wrote nothing else.\r\n\r\n> On the other hand, allocating state too early (i.e., allocating CIDs without strong commitment from client side) opens up an interesting amount of attack surface on server side.\r\n\r\n??? what's that ???\r\nWhy should the use of cid in the inner handshake messages **as well** allocate anything additionally? The cid is provided in the CLIENT_HELLO and/or SERVER_HELLO, it's currently just not send in the inner handshake messages. But there is not more or less to allocate, if they are used with other handshake message or not.\r\n  \r\n",
          "createdAt": "2019-01-10T20:11:21Z",
          "updatedAt": "2019-01-10T20:11:21Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> but speaking with the Symantec guys exactly about how to modify the DTLS wire image to signal the presence of CID in a middlebox-tolerant way, their feedback was \"to be sure, just leave the handshake alone as much as possible\"... I have no reason to doubt their assessment, also given the ways TLS 1.3 was hit in this same space.\r\n\r\nI have also no reason to doubt them, but I'm very unsure, if an address change will then work at **all** with such boxes. I would really prefer to test such an address change.\r\n\r\n> Boxes like this one \r\n\r\nI couldn't find any hint, that that box supports DTLS at all.",
          "createdAt": "2019-01-10T20:23:32Z",
          "updatedAt": "2019-01-10T20:23:32Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So the critical issue seems:\r\n- with TLS there are bad experience changing the records\r\n- with DTLS this experience seems to be missing. Some expect them to be similar bad. I unfortunately suspect them to be either a real disaster (address change not working at all), or not that hard.\r\n\r\nWithout boxes to test and/or people with DTLS-boxes experience, it will be hard to find a solution. So, try to use the mailing list to get more feedback?   ",
          "createdAt": "2019-01-10T20:31:05Z",
          "updatedAt": "2019-01-10T20:31:05Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Sorry, now you triggered me:\r\n> \r\n> > That's the trouble. Most \"enterprise security\" middleboxes want to be able to look into the handshake to determine whether a connection is ok according to their policies.\r\n> > After the handshake completes and the connection is considered alright, they just act as blind packet forwarders.\r\n> \r\n> Why should those middleboxes forward my tls_cid record, when my address has changed, but block my tls_cid record, when it contains a handshake?\r\n> \r\n> If the middleboxes are unaware of this draft, but forward my tls_cid record even with changed address, I would assume, they forward my tls_cid record also with a inner handshake message.\r\n\r\nSorry, I fail to understand your argument.  What to do with an unknown 5-tuple vs what to do with an unknown C-T in a context where you expect to understand the semantics of the flow seem orthogonal to me.",
          "createdAt": "2019-01-10T20:49:18Z",
          "updatedAt": "2019-01-10T20:49:18Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > On the other hand, allocating state too early (i.e., allocating CIDs without strong commitment from client side) opens up an interesting amount of attack surface on server side.\r\n> \r\n> ??? what's that ???\r\n> Why should the use of cid in the inner handshake messages **as well** allocate anything additionally? The cid is provided in the CLIENT_HELLO and/or SERVER_HELLO, it's currently just not send in the inner handshake messages. But there is not more or less to allocate, if they are used with other handshake message or not.\r\n\r\nI don't really understand the above sentence so I know a reply is quite risky :-) Anyway, what I wanted to say is that if you want to use CID during handshake in any meaningful way, it means the party requiring it (e.g., server) needs to allocate state internally to be able to check it on receive.  If this allocation is triggered only by one (or two) CH(s), it's pretty easy to mount a \"CID exhaustion\" attack against the server.  Requiring the client to complete the handshake before promoting a \"2-tuple\" connection into a \"CID\" connection makes the attack much more demanding and therefore a lot less likely.",
          "createdAt": "2019-01-10T20:59:52Z",
          "updatedAt": "2019-01-10T20:59:52Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Sorry, I fail to understand your argument. What to do with an unknown 5-tuple vs what to do with an unknown C-T in a context where you expect to understand the semantics of the flow seem orthogonal to me.\r\n\r\n(some overlap in the discussion :-) so a updated my comment with the question above.)\r\n\r\nTry to explain it:\r\n\r\nWhich rules should a box apply to a tls_cid record?\r\nIt's only valid after a successful handshake?\r\nBut, how should such a record then be assigned to that successful handshake?\r\nEither by knowing the CID (which requires to be aware of this draft), \r\nor much weaker by the address, but then it will not work with address changes.\r\n",
          "createdAt": "2019-01-10T21:04:33Z",
          "updatedAt": "2019-01-10T21:22:21Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If this allocation is triggered only by one (or two) CH(s), it's pretty easy to mount a \"CID exhaustion\" attack against the server. Requiring the client to complete the handshake before promoting a \"2-tuple\" connection into a \"CID\" connection makes the attack much more demanding and therefore a lot less likely.\r\n\r\nOK, so you don't allocate something on the server side for the CID in the CLIENT_HELLO until the handshake is finished? Or you send a CID in the SERVER_HELLO without allocating it before the handshake is finished? May be I'm too focused on my implementation, but without an other implementation, which shows what you wrote, it's also hard for me to understand your comments.   \r\n ",
          "createdAt": "2019-01-10T21:13:04Z",
          "updatedAt": "2019-01-10T21:17:35Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If this allocation is triggered only by one (or two) CH(s), it's pretty easy to mount a \"CID exhaustion\" attack against the server. Requiring the client to complete the handshake before promoting a \"2-tuple\" connection into a \"CID\" connection makes the attack much more demanding and therefore a lot less likely.\r\n\r\nAt least, I think you target the CID the server side is using.\r\nHow is it ensured, that the CID in the SERVER_HELLO is unique at least for all established connections and all ongoing handshakes, which are not terminated at that time point?\r\n\r\n ",
          "createdAt": "2019-01-10T21:25:55Z",
          "updatedAt": "2019-01-10T21:25:55Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> OK, so you don't allocate something on the server side for the CID in the CLIENT_HELLO until the handshake is finished? Or you send a CID in the SERVER_HELLO without allocating it before the handshake is finished? May be I'm too focused on my implementation, but without an other implementation, which shows what you wrote, it's also hard for me to understand your comments.\r\n\r\nIn my message above s/CID exhaustion/resource exhaustion/ sorry...\r\n\r\nAnd yes, you can certainly separate the act of reserving the CID when you decide to send it in the CH from creating state associated with the CID-based session lookup paraphernalia.  For example you could use a big enough CID space (say 8 bytes) and reserve your CIDs by means of a monotonically increasing function.  And at a later time (my proposal is after the handshake is completed successfully) you grab the memory needed for the CID based session lookup stuff...\r\n",
          "createdAt": "2019-01-10T22:36:47Z",
          "updatedAt": "2019-01-10T22:36:47Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another point is that we'd put more bytes on the wire, increasing the risk of message fragmentation with small MTUs in a situation, the handshake, where the timing of the messaging is such that NAT timeouts are very unlikely and therefore the 5-tuple based demuxing more than adequate.",
          "createdAt": "2019-01-10T22:49:17Z",
          "updatedAt": "2019-01-10T22:49:17Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In my message above s/CID exhaustion/resource exhaustion/ sorry...\r\n\r\nI can't see a relation of \"resource exhaustion\" with the usage of the CID in the handshake.\r\n",
          "createdAt": "2019-01-11T07:44:15Z",
          "updatedAt": "2019-01-11T07:44:15Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Another point is that we'd put more bytes on the wire, increasing the risk of message fragmentation with small MTUs in a situation, the handshake, \r\n\r\nThat's right. In my experience, \"small MTUs\" are rarely used. The highest risk is caused by a larger CLIENT_HELLO, which then gets fragmented (see \"resource exhaustion\"). Though CID makes the CLIENT_HELLO larger, it's more an argument, that CID may not be support on such path. FMPOV, a \"optimal support\" for peers with a very narrow link, should be moved into a other discussion.   \r\n",
          "createdAt": "2019-01-11T07:57:22Z",
          "updatedAt": "2019-01-11T07:57:22Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> where the timing of the messaging is such that NAT timeouts are very unlikely and therefore the 5-tuple based demuxing more than adequate.\r\n\r\nThe part with having the choice to either \"protect the handshake\" or \"support address changes\" should just leave it to the implementation, which strategy is chosen. I would go for a configurable solution, which enables a \"dynamic protection\", if too many handshakes are ongoing.",
          "createdAt": "2019-01-11T07:57:27Z",
          "updatedAt": "2019-01-11T07:57:27Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I had a chat with Achim and he agreed that we can leave the feature of using CIDs for handshake messages for DTLS 1.3. This will allow us to get this work done faster. DTLS 1.3 encrypts handshake messages earlier and hence already the handshake itself utilize CIDs. ",
          "createdAt": "2019-02-01T10:24:15Z",
          "updatedAt": "2019-02-01T10:24:15Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@hannestschofenig \r\n\r\nThanks for your time! ",
          "createdAt": "2019-02-01T11:29:27Z",
          "updatedAt": "2019-02-01T11:29:27Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Hannes, Achim,\r\n\r\n> I had a chat with Achim and he agreed that we can leave the feature of using CIDs for handshake messages for DTLS 1.3.\r\n\r\nGood, thanks both for taking the time to sort this out.  I think it's a very reasonable choice to not introduce scope inflation at this (late) stage.\r\n\r\nOne thing we still need to do though is tighten up a bit the language around when exactly the CID is put on the wire.\r\n\r\nSomething like: \"Once a non-empty CID is successfully negotiated, it MUST be sent on the XYZ message and on all subsequent records of the connection\" would remove all the uncertainty I guess.\r\n\r\nI personally have an inclination for XYZ to be the first application data, mainly because I'd like to commit any resources only after I have full confirmation that the client is a good one.  However, I don't care whatever choice we end up with, as long as it's written down precisely in 2119 language.",
          "createdAt": "2019-02-01T12:24:46Z",
          "updatedAt": "2019-02-01T12:24:46Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I personally have an inclination for XYZ to be the first application data, mainly because I'd like to commit any resources only after I have full confirmation that the client is a good one. \r\n\r\nI'm not sure, what \"commit\" includes or means exactly.\r\n\r\nTo verify the FINISH you will need the \"keying material from the crypto context (derived from the specific mastersecret)\". According https://tools.ietf.org/html/rfc5246#section-6.3 a good estimation will be about 128 bytes. \r\nIn your wording, you use them before you \"commit\" them? \r\nSo adding a couple of bytes for CID to that storage, should not make a difference, or?\r\n",
          "createdAt": "2019-02-01T12:41:39Z",
          "updatedAt": "2019-02-01T12:41:39Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not sure, what \"commit\" includes or means exactly.\r\n\r\nI mean making a certain CID \"used\" (not just reserved) and making room for the CID in a lookup table. But, as I said, I won't be unhappy if the \"first CID record\" happens to be something different than the application data.",
          "createdAt": "2019-02-01T12:50:21Z",
          "updatedAt": "2019-02-01T12:50:21Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": " From my side the specification is also free to chose, when the peer should start to use the tls_cid records.",
          "createdAt": "2019-02-01T13:36:48Z",
          "updatedAt": "2019-02-01T13:36:48Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@thomas-fossati \r\n\r\nI'm still not sure, if I really understand the requirements of your approach. My current feeling is, that you store all the keying and cid stuff in a \"context\" and provide a address:port-lookup-table for that stored context. One finish, you then want to store this context into a cid-lookup-table. If that's the plan, a cid usage even in the handshake doesn't matter. For epoch 0 records, just still use the address:port lookup and verify the record cid with the stored one.\r\nI personally prefer a \"relaxed definition\", but your case will not be wrong. It just doesn't support address changes during handshake. I guess, after a period of experience, the most user will select that option and use it to secure the handshake without supporting an address change. But that would be left to future experience.\r\nAfter the call with @hannestschofenig I think it's better not to extend this draft with that idea and instead focus on DTLS 1.3.  Therefore I removed the code for this extended usage from my wip and closed this issue. \r\n\r\nIn the meantime, it's really hard to collect all statements over several issues. So, if you still interested in using the RFC6347 record for the finish and start with the tls12_cid records after that, I think, open a new issues (or PR) would make it easier to fetch up this idea.  ",
          "createdAt": "2019-02-04T15:28:24Z",
          "updatedAt": "2019-02-04T15:28:24Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWUzODk0ODE3NTQ=",
      "title": "Parse the records without knowing how long the Connection ID is",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/27",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-layer-extensions\r\n\r\n> Note that for both record formats, it is not possible to parse the records without knowing how long the Connection ID is.\r\n\r\nFMPOV,  searching for the \"length field\" assuming that it's that uint16 pointing to the end of the UDP datagram, should result in many cases in the right length for the connection id. Moving the connection id after the \"length field\", will hide it from that search, but with the AEAD explicit nonce copied from the header, it will also be easy to find there.\r\nTherefore, if it's intended to hide the connection id length in tls12_cid records, it must be after the \"length field\", and the explicit nonce could not longer be copied from the header to the fragment (saving 8 bytes).\r\nIt's no issue, if there is no intention to hide the connection id length. But then the misguided note above should be removed.",
      "createdAt": "2018-12-10T20:53:03Z",
      "updatedAt": "2018-12-11T06:48:49Z",
      "closedAt": "2018-12-10T21:07:39Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We're not hiding the CID length. It's transmitted in the clear in the handshake. ",
          "createdAt": "2018-12-10T21:07:39Z",
          "updatedAt": "2018-12-10T21:07:39Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So what's the message of  \r\n\r\n> Note that for both record formats, it is not possible to parse the records without knowing how long the Connection ID is.\r\n\r\nit is in many cases possible.\r\n",
          "createdAt": "2018-12-11T06:48:49Z",
          "updatedAt": "2018-12-11T06:48:49Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWUzODk5NTYzNTc=",
      "title": "Should mixed usage of cid and no-cid for one connection-endpoint be supported? ",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/28",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If a cid is negotiated for a connection-endpoint, is it then intended to use that in all records for that connection-endpoint (at least all first records of a datagram)?\r\n \r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2018-12-11T21:14:18Z",
      "updatedAt": "2019-02-01T11:34:35Z",
      "closedAt": "2019-02-01T11:34:35Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, if you negotiate it with the other peer then you use it. Note, however, that there is still the option that the client uses a CID in the records sent to the server while the server doesn't include a CID in the records sent to the client. This is what is shown in the example. IMHO is a very common case.",
          "createdAt": "2018-12-29T11:31:36Z",
          "updatedAt": "2018-12-29T11:31:36Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My intention was, that, even if y cid is negotiated, and a \"starting record\" contains such a cid, following records may use the old record layer to save some bytes. Especially, if the cid could be extended into the not encrypted handshake messages, I would prefer to just use the cid for the first record in the datagram and save the bytes by not using the cid in the other handshake messages of the same datagram.\r\n ",
          "createdAt": "2018-12-31T14:11:13Z",
          "updatedAt": "2018-12-31T14:11:13Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "The mix of CID and non-CID payloads should be supported by the current draft since (I believe) we don't force the client or the server to always attach the CID. I double-checked the text and I didn't see anything that would prohibit you doing so. Of course, we should be explicit about features we offer. \r\n\r\nFWIW we allow this behavior (and more record format changes) in DTLS 1.3 thanks to the bitmask in the record header and the variable length encoding. ",
          "createdAt": "2019-01-07T15:13:24Z",
          "updatedAt": "2019-01-07T15:13:24Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, that clarification will help to implement it proper.\r\nJust one hint for the spec:\r\nUsing CID and non-CID, it must be clear, that potentially messages are reordered and so non-CID messages may be silently ignored. Therefore, mixing CID and non-CID is possible, but must be used with special care.",
          "createdAt": "2019-01-07T19:47:04Z",
          "updatedAt": "2019-01-07T19:47:04Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure why this matters here since messages may in general get re-ordered with a UDP-based transport",
          "createdAt": "2019-01-11T08:16:52Z",
          "updatedAt": "2019-01-11T08:16:52Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, and one consequence of this reorder would be, that a message without CID send after a message with CID, are received potentially in the reverse order, what then cause **additionally** a drop. It's also true, the messages may always get dropped. I just want to make it clear by the hint, that such mix must be used with special care.",
          "createdAt": "2019-01-11T08:48:30Z",
          "updatedAt": "2019-01-11T08:49:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe you should be required to send CID always. That's the implied semantics of the extension and there's no basis for knowing that the receiver would like something different.",
          "createdAt": "2019-01-27T21:26:41Z",
          "updatedAt": "2019-01-27T21:26:41Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> there's no basis for knowing that the receiver would like something different\r\n\r\nThis draft would be the basis, because it would define, what the receiver should know :-). \r\n\r\nOne reason would be \"saving traffic\". Assuming a communication pattern, that after a period of \"silence\", the peers will exchange a couple of messages with a frequency of some seconds. Or even many messages, if something as a \"coap-blockwise-download\" is considered. Such a mixed usage would enable implementations to save traffic. The first message after the silence will use the cid, but on success, the peers may switch to the old record-layer.\r\n\r\nA second reason would be to use the cid in the handshake for the handshake messages themselves (see issue #26). It would make sense to add the cid only to the first record of a UDP message to save the traffic for the other records of the flight in the same UDP message.\r\n\r\nGenerally, if a implementation doesn't use the mix active when sending messages, the support of receiving such mixed messages is not that complex. It requires to update the ip-address, when a cid record is processed successful. Though this is anyway a \"extension\", the other functionality using the ip-address:port will work as usual.\r\n",
          "createdAt": "2019-01-28T06:51:11Z",
          "updatedAt": "2019-01-28T06:51:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sun, Jan 27, 2019 at 10:51 PM Achim Kraus <notifications@github.com>\nwrote:\n\n> there's no basis for knowing that the receiver would like something\n> different\n>\n> This draft would be the basis, because it would define, what the receiver\n> should know :-).\n>\n\nThe draft has no mechanism for saying \"I only want the CID some of the time\"\n\nOne reason would be \"saving traffic\". Assuming a communication pattern,\n> that after a period of \"silence\", the peers will exchange a couple of\n> messages with a frequency of some seconds. Or even many messages, if\n> something as a \"coap-blockwise-download\" is considered. Such a mixed usage\n> would enable implementations to save traffic. The first message after the\n> silence will use the cid, but on success, the peers may switch to the old\n> record-layer.\n>\n> A second reason would be to use the cid in the handshake for the handshake\n> messages themselves (see issue #26\n> <https://github.com/tlswg/dtls-conn-id/issues/26>). It would make sense\n> to add the cid only to the first record of a UDP message to save the\n> traffic for the other records of the flight in the same UDP message.\n>\n> Generally, if a implementation doesn't use the mix active when sending\n> messages, the support of receiving such mixed messages is not that complex.\n> It requires to update the ip-address, when a cid record is processed\n> successful. Though this is anyway a \"extension\", the other functionality\n> using the ip-address:port will work as usual.\n>\nI'm not denying that there are potential reasons why one might want to use\na CID some of the time; I'm saying that the draft doesn't define a way to\nindicate that the receiver can handle it, and given that the purpose of\nthis draft is to be the very minimal CID implementation, I don't think we\nshould add one.\n",
          "createdAt": "2019-01-28T06:55:09Z",
          "updatedAt": "2019-01-28T06:55:09Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm saying that the draft doesn't define a way to indicate that the receiver can handle it\r\n\r\nI don't get this. In my understanding, a server must support at least, that some clients are using the cid and some are not. With that, why should a peer deny to process a record without cid, that would match the connection based on the previous mechanism using address:port? \r\n \r\nIf this draft has the purpose as described in introduction (\"NAT rebinding\"), I don't see, the \"benefit\" to force a peer to drop a message (without cid), which could be processed (based on the address:port).\r\n",
          "createdAt": "2019-01-28T07:19:16Z",
          "updatedAt": "2019-01-28T07:19:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sun, Jan 27, 2019 at 11:19 PM Achim Kraus <notifications@github.com>\nwrote:\n\n> I'm saying that the draft doesn't define a way to indicate that the\n> receiver can handle it\n>\n> I don't get this. In my understanding, a server must support at least,\n> that some clients are using the cid and some are not.\n>\nNo. It  can simply refuse to negotiate TLS with a client which doesn't\noffer the extension, for instance.\n\n\n\n> If this draft has the purpose as described in introduction (\"NAT\n> rebinding\"), I don't see, the \"benefit\" to force a peer to drop a message\n> (without cid), which could be processed (based on the address:port).\n>\nIt avoids indeterminate behavior with a given client.\n",
          "createdAt": "2019-01-28T07:23:40Z",
          "updatedAt": "2019-01-28T07:23:40Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> It avoids indeterminate behavior with a given client.\r\n\r\nIf you provide an example for that, I may have a chance to understand, why a peer, using this extension, should drop a message, which would be processed without this extension.\r\n\r\nSure, a specification could specify whatever.\r\n\r\nVery general, I thought, the intention of this draft was to improve the loss caused by message dropping. But I get more and more the feeling, it is intended to provide \"more\", even if not mentioned explicit.\r\n  \r\n  ",
          "createdAt": "2019-01-28T07:34:35Z",
          "updatedAt": "2019-01-28T07:34:35Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sun, Jan 27, 2019 at 11:34 PM Achim Kraus <notifications@github.com>\nwrote:\n\n> It avoids indeterminate behavior with a given client.\n>\n> If you provide an example for that, I may have a chance to understand, why\n> a peer, using this extension, should drop a message, which would be\n> processed without this extension.\n>\nRequiring the CID always provides deterministic behavior. Dropping the\npacket when the CID is omitted enforces correct behavior.\n",
          "createdAt": "2019-01-28T07:40:32Z",
          "updatedAt": "2019-01-28T07:40:32Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Requiring the CID always provides deterministic behavior.\r\n\r\nSure, therefore I wrote above https://github.com/tlswg/dtls-conn-id/issues/28#issuecomment-452058388\r\n\r\n\"Therefore, mixing CID and non-CID is possible, but must be used with special care.\"\r\n\r\nIn my opinion, the trade of between \"works deterministic\" and \"uses less traffic\" should be left to the implementation.  \r\n\r\n> Dropping the packet when the CID is omitted enforces correct behavior.\r\n\r\nThere is still no reason to drop the packet, except forcing someone to \"use more traffic\".\r\n\r\nSo the focus here will be:\r\n- MUST a peer drop a non-CID record, if CID is negotiated\r\n- MUST a peer process a non-CID record, even if CID is negotiated\r\n\r\nWith the \"drop\", please clarify the usage of empty CID! \r\n \r\n\r\n(I edited my comment, the SHALL was wrong)\r\n",
          "createdAt": "2019-01-28T08:03:02Z",
          "updatedAt": "2019-01-28T08:05:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Mon, Jan 28, 2019 at 12:03 AM Achim Kraus <notifications@github.com>\nwrote:\n\n> Requiring the CID always provides deterministic behavior.\n>\n> Sure, therefore I wrote above #28 (comment)\n> <https://github.com/tlswg/dtls-conn-id/issues/28#issuecomment-452058388>\n>\n> \"Therefore, mixing CID and non-CID is possible, but must be used with\n> special care.\"\n>\n> In my opinion, the trade of between \"works deterministic\" and \"uses less\n> traffic\" should be left to the implementation.\n>\nWell, this is something we disagree on. The next thing to do is take it to\nthe list.\n\nDropping the packet when the CID is omitted enforces correct behavior.\n>\n> There is still no reason to drop the packet, except forcing someone to\n> \"use more traffic\".\n>\nI've already explained the reason. It enforces the correct behavior. See:\nhttps://datatracker.ietf.org/doc/html/draft-iab-protocol-maintenance\n\n\n> So the focus here will be:\n>\n>    - MUST a peer drop a non-CID record, if CID is negotiated\n>    - SHALL a peer process a non-CID record, even if CID is negotiated\n>\n> With the MUST, please clarify the usage of empty CID!\n>\nAs I said, empty CID should mean \"use the 6347 framing\"\n",
          "createdAt": "2019-01-28T08:08:01Z",
          "updatedAt": "2019-01-28T08:08:01Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The next thing to do is take it to the list.\r\n\r\nThat would be great. \r\nSure, if the majority votes for \"force CID\" (MUST drop), then the risk of \"uncontrolled optimizers\" will be much smaller. \r\n  ",
          "createdAt": "2019-01-28T08:49:29Z",
          "updatedAt": "2019-01-28T08:49:29Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I will create a PR to note that the padding added by this draft adds a privacy feature that wasn't there in DTLS 1.2. \r\n\r\nI think I clarified the use of the MAC calculation but will double-check whether I have correctly captured everything. Given the discussions we had on that issue I am sure there is more room for explanatory text. \r\n\r\nI believe we should allow cid usage already in the handshake itself rather than just for application layer payloads. I can see how this will become useful when DTLS is carried over non-IP-based protocols. Code-wise this does not cost much either, at least as far as I can tell. Will have to integrate it into my code to see whether that's indeed correct. ",
          "createdAt": "2019-01-31T09:41:18Z",
          "updatedAt": "2019-01-31T09:41:18Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!\r\n\r\nConsidering https://datatracker.ietf.org/doc/html/draft-iab-protocol-maintenance I start to think about the right way for such extensions. Also in order to finish this draft. \r\nMay be the right way to do this is:\r\n- being \"strict\" with this draft \r\n- add the new use-case in a later draft.\r\n-- for the extensibility either \r\n--- add flags to the Hello Extensions\r\n--- or use additionally new the Hello Extensions\r\n\r\ne.g. the \"payload length obfuscation only\" may be indicated by just a new additional Hello Extension. It may reuse the new record type definition of this draft and add the use of empty cids with the new record type.\r\n    \r\n \r\n",
          "createdAt": "2019-01-31T09:50:47Z",
          "updatedAt": "2019-01-31T09:50:47Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I prefer not to have a separate extension for the payload obfuscation. If someone wants to use the cid extension then they could also use the obfuscation but I wouldn't want to introduce it as a standalone feature. DTLS 1.3 provides much better privacy features and implementations will switch to 1.3 sooner or later anyway. I see the DTLS 1.2 CID work as an intermediate solution for those deployments where DTLS 1.2 is in use and a fix is urgently needed. ",
          "createdAt": "2019-01-31T12:52:32Z",
          "updatedAt": "2019-01-31T12:52:32Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See https://github.com/tlswg/dtls-conn-id/issues/26#issuecomment-459676265",
          "createdAt": "2019-02-01T11:34:35Z",
          "updatedAt": "2019-02-01T11:34:35Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "MDU6SXNzdWUzOTc3MDYxOTk=",
      "title": "future extensions of cid / position of the cid",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/36",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "According the comment https://github.com/tlswg/dtls-conn-id/issues/25#issuecomment-444890710 I would assume, that this draft will be involved in future extensions.\r\n\r\nIf that assumption \"future extensions\" is true, the definition of `ExtensionType` should be extended from a \"simple plain cid\" to a \"list of typed cids\", where currently only the \"plain\" type is defined and used. That would allow future extensions for other cid types (e.g. types, which are less traceable).\r\n\r\nIf such future extensions should be supported, I have doubts about the current position of the cid, see my issue #27 . I would prefer to move the cid behind the length to protect it from being \"discovered\" too easy.\r\n\r\n(I'm also OK, if this draft should be \"finalized\" and future extensions are not long considered for DTLS 1.2 . )",
      "createdAt": "2019-01-10T07:37:22Z",
      "updatedAt": "2019-01-11T10:05:34Z",
      "closedAt": "2019-01-11T09:19:11Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I doubt that the DTLS 1.2 CID will be enhanced in future extensions since we already have DTLS 1.3, which provides better performance, security and privacy properties.\r\n\r\nIf the CID is in the header than an eavesdropper will see it. The only mitigation appears to be to change the CID on specific events, which DTLS 1.3 supports.",
          "createdAt": "2019-01-11T09:06:37Z",
          "updatedAt": "2019-01-11T09:06:37Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If the CID is in the header than an eavesdropper will see it.\r\n\r\nYes, and I don't plan to extend this. But from the past there have been discussion about that. And a \"list of types\" would make it possible for others to extend this in the future.\r\nBut, as I already wrote, I'm OK with not planning too much future extensions for DTLS 1.2 CID.\r\n",
          "createdAt": "2019-01-11T09:19:05Z",
          "updatedAt": "2019-01-11T10:05:34Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWU0MDQzMjA4Mjk=",
      "title": "Scope of this draft - only NAT traversing or \"more\"?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/40",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "During the discussion of the last weeks, my impression of the scope of this draft has changed.\r\n\r\nAt the begin it was clearly the solution for issues caused by a NAT.\r\n\r\nWith the questions from others about the usage of a empty CID in the MAC, I started to wonder, why this should be used. In the meantime in think, using the new record type (even with an empty CID) would enable peers to obfuscate the DTLS payload length. That feature may be even used without a real CID (therefore using a empty CID). I'm not sure, if this is really planned. I asked for it, but unfortunately, didn't receive an answer. If that usage is planned, I think it should be addressed explicitly.  \r\nSee:\r\nIssue #22\r\nhttps://github.com/tlswg/dtls-conn-id/pull/35#discussion_r245795214\r\n\r\nAnd working on the implementation, I got also the idea, to use this extension to improve the protection of the handshake itself (see #26). Currently the protection seems to be mainly the \"randomness of the ip-address:port\". But this randomness is not really defined and so using a random CID to lock the handshake may help. The interesting point of this usage would be, that it get's more important, when the address doesn't change (less randomness), so it targets the opposite environment as the original idea (frequently changing (by NAT) to static reachable). In the end this may end up in a \"large CID used in the handshake\" and no need to use the CID after the handshake. \r\n\r\nWith these other \"use-cases\", I'm not sure, if the \"strict\" definitions in #28 should be implemented or if the definitions should be \"relaxed\".\r\nThe worst case would be, that the \"strict\" is mostly implemented, but the users also want the other scenarios independent for the \"original idea\".\r\n",
      "createdAt": "2019-01-29T14:36:13Z",
      "updatedAt": "2019-02-01T11:33:51Z",
      "closedAt": "2019-02-01T11:33:50Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See https://github.com/tlswg/dtls-conn-id/issues/26#issuecomment-459676265",
          "createdAt": "2019-02-01T11:33:50Z",
          "updatedAt": "2019-02-01T11:33:50Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWU0MDU5NTA5NDQ=",
      "title": "cid=empty=?padding?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/43",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": ">A zero-length value indicates that the client is prepared to send with a connection ID but does not wish the server to use one when sending (alternately, this can be interpreted as the client wishes the server to use a zero-length CID; the result is the same).\r\n\r\nThis implies that an empty CID and an absent CID are identical.  But they don't have to be. If both endpoints negotiate a zero- length CID, then this extension could be used to enable record padding.\r\n\r\nThe doc is not clear on this point. If a peer sends an empty connection_id extension, what are you supposed to do:\r\n\r\n1. MUST send records in the old format.\r\n2. MUST send tls12_cid records (which could be padded).\r\n3. MAY send either.\r\n\r\nIt seems like option 2 or 3 give us a nice new feature - the ability to pad records - though 2 forces an additional overhead of 1 byte. Option 3 is somewhat less deterministic though (it doesn't seem like it would be harder to implement though).",
      "createdAt": "2019-02-02T05:38:18Z",
      "updatedAt": "2019-03-11T11:07:29Z",
      "closedAt": "2019-03-11T11:07:29Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Fri, Feb 1, 2019 at 9:38 PM Martin Thomson <notifications@github.com>\nwrote:\n\n> A zero-length value indicates that the client is prepared to send with a\n> connection ID but does not wish the server to use one when sending\n> (alternately, this can be interpreted as the client wishes the server to\n> use a zero-length CID; the result is the same).\n>\n> This implies that an empty CID and an absent CID are identical. But they\n> don't have to be. If both endpoints negotiate a zero- length CID, then this\n> extension could be used to enable record padding.\n>\n> The doc is not clear on this point. If a peer sends an empty connection_id\n> extension, what are you supposed to do:\n>\n>    1. MUST send records in the old format.\n>    2. MUST send tls12_cid records (which could be padded).\n>    3. MAY send either.\n>\n> It seems like option 2 or 3 give us a nice new feature - the ability to\n> pad records - though 2 forces an additional overhead of 1 byte. Option 3 is\n> somewhat less deterministic though (it doesn't seem like it would be harder\n> to implement though).\n>\nI agree that the old text is wrong. It comes from a previous encoding and\nMAC structure. I don't care about the padding feature for (2) or (3), as\nthis is a point fix for DTLS 1.2. I could live with (2) but the\nnondeterminism in (3) seems bad.\n",
          "createdAt": "2019-02-02T13:44:44Z",
          "updatedAt": "2019-02-02T13:44:44Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in submitted version -04",
          "createdAt": "2019-03-11T11:07:29Z",
          "updatedAt": "2019-03-11T11:07:29Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWU0MTYwNjE0OTE=",
      "title": "CID and non-AEAD ciphersuites",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/46",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We currently only describe CID processing with AEAD ciphersuites, which seems to imply that the CID extension effectively influences ciphersuite negotiation.\r\n\r\nThe draft should explain how the two - ciphersuite negotiation and CID ext - interact.",
      "createdAt": "2019-03-01T11:30:15Z",
      "updatedAt": "2019-03-11T10:57:17Z",
      "closedAt": "2019-03-11T10:57:17Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure, what the scope of this explanation should be?\r\nFor the MAC, it seems to be obvious, that the block cipher (https://tools.ietf.org/html/rfc5246#section-6.2.3.2 ) extend the data for the MAC accordingly.\r\n\r\nhttps://tools.ietf.org/html/rfc5246#section-6.2.3.1\r\n\r\n```\r\nMAC(MAC_write_key, seq_num +\r\nTLSCompressed.type +\r\nTLSCompressed.version +\r\nTLSCompressed.length +\r\nTLSCompressed.fragment);\r\n```\r\n\r\nwill get \r\n\r\n```\r\nMAC(MAC_write_key, seq_num +\r\nTLSCompressed.type +\r\nTLSCompressed.version +\r\nTLSCompressed.cid + \r\ncid_length +\r\nTLSCompressed.length +\r\nTLSCompressed.fragment);\r\n```\r\n\r\nThat was already discussed in https://github.com/tlswg/dtls-conn-id/pull/29#issuecomment-459277192\r\n\r\n> Then, Thomas can make a contribution for the MAC calculation for non-AEAD ciphers.\r\n\r\nSo, I'm not sure, if you are the intended \"Thomas\", which may write that :-)\r\n",
          "createdAt": "2019-03-01T17:46:58Z",
          "updatedAt": "2019-03-01T17:46:58Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "The question is whether we should define the CID-enhanced MAC calculation for non-AEAD ciphers. The current draft only supports AEAD ciphers. If that's OK then we could just tell implementers that the ciphersuite selection should be influenced by this. Alternatively, we could define the MAC calculation also for non-AEAD ciphers. \r\n\r\nWhat would you prefer, Achim?\r\n",
          "createdAt": "2019-03-06T16:26:28Z",
          "updatedAt": "2019-03-06T16:26:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wed, Mar 6, 2019 at 8:26 AM Hannes Tschofenig <notifications@github.com>\nwrote:\n\n> The question is whether we should define the CID-enhanced MAC calculation\n> for non-AEAD ciphers. The current draft only supports AEAD ciphers. If\n> that's OK then we could just tell implementers that the ciphersuite\n> selection should be influenced by this. Alternatively, we could define the\n> MAC calculation also for non-AEAD ciphers.\n>\n\nThe latter, I think...\n\n-Ekr\n\nWhat would you prefer, Achim?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/issues/46#issuecomment-470175075>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oTgH2R19h-R5Pri7oF-6RxjtfQEMks5vT-w1gaJpZM4bY0ng>\n> .\n>\n",
          "createdAt": "2019-03-06T16:33:43Z",
          "updatedAt": "2019-03-06T16:33:43Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Though Leshan (LWM2M, also supporting CBC) is one of the major using and contributing projects, I would also prefer to have the MAC defined for the none-AEAD.  \r\n\r\n",
          "createdAt": "2019-03-06T21:09:58Z",
          "updatedAt": "2019-03-06T21:09:58Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Here is the PR: https://github.com/tlswg/dtls-conn-id/pull/47\r\n",
          "createdAt": "2019-03-07T08:15:52Z",
          "updatedAt": "2019-03-07T08:15:52Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWU0MTk0OTY4MzY=",
      "title": "In DTLSPlaintext.version inclusion in MAC intended?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/50",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-payload-protection-mac\r\n\r\n```\r\n    Block Ciphers with Encrypt-then-MAC processing:\r\n\r\n    MAC(MAC_write_key, seq_num +\r\n        DTLSCipherText.type +\r\n        DTLSCipherText.version +\r\n        DTLSPlaintext.version +\r\n        cid +                   // New input\r\n        cid_length +            // New input\r\n        length of (IV + DTLSCiphertext.enc_content) +\r\n        IV +\r\n        DTLSCiphertext.enc_content);\r\n```\r\n\r\ncontains two versions, `DTLSCipherText.version` and `DTLSPlaintext.version`.\r\n\r\nIs this intended?\r\n",
      "createdAt": "2019-03-11T14:23:59Z",
      "updatedAt": "2019-04-11T15:00:36Z",
      "closedAt": "2019-04-11T15:00:36Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed with #57",
          "createdAt": "2019-04-11T15:00:36Z",
          "updatedAt": "2019-04-11T15:00:36Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU0MTk1MDE3MzY=",
      "title": "Size of length_of_DTLSInnerPlaintext, unique way to specify new lengths",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/51",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I miss the hint for the size of `length_of_DTLSInnerPlaintext`. I would assume it's a 2 bytes value. Is that right? Is this information already in the document and have overseen it? \r\n\r\n`length_of_DTLSInnerPlaintext`\r\n\r\n`length of (IV + DTLSCiphertext.enc_content)` \r\n\r\nBoth introduce a special \"length\" and use different approaches to do so. One with extra definition, one with a included definition. Is this intended?\r\n",
      "createdAt": "2019-03-11T14:33:21Z",
      "updatedAt": "2019-04-11T15:00:52Z",
      "closedAt": "2019-04-11T15:00:52Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed with #58",
          "createdAt": "2019-04-11T15:00:52Z",
          "updatedAt": "2019-04-11T15:00:52Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "MDU6SXNzdWU0MTk1MDkzMTE=",
      "title": "Where: cid : Value of the negotiated CID.",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/52",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In my opinion, it's the actual cid on the record header, not the negotiated cid, even if both are intended to be the same. Therefore it is `DTLSCiphertext.cid`.\r\n\r\nOr has this changed? Is the MAC now extended by the negotiated CID? \r\n",
      "createdAt": "2019-03-11T14:47:11Z",
      "updatedAt": "2019-04-11T15:01:11Z",
      "closedAt": "2019-04-11T15:01:11Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed with #59",
          "createdAt": "2019-04-11T15:01:11Z",
          "updatedAt": "2019-04-11T15:01:11Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU0MTk1MTYxOTI=",
      "title": "Harmonize terms for record_types in MAC",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/53",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Block Ciphers:  `tls12_cid`\r\nBlock Ciphers with Encrypt-then-MAC: `DTLSCipherText.type` \r\nAEAD Ciphers: `DTLSPlaintext.type`\r\n\r\nMay be the terms could be harmonized?",
      "createdAt": "2019-03-11T14:59:35Z",
      "updatedAt": "2019-04-11T19:23:44Z",
      "closedAt": "2019-04-11T19:23:44Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "fixed with #60",
          "createdAt": "2019-04-11T15:01:27Z",
          "updatedAt": "2019-04-11T15:01:27Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWU0MTk4NzYwOTU=",
      "title": "Privacy",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/54",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Martin wrote: \r\nhttps://mailarchive.ietf.org/arch/msg/tls/yG4msH0W6dlR-92FjwaACyvkT6Y\r\n\r\n> I would strike \", if these privacy properties are important in a given deployment\" from the acknowledgments section (which is an odd place for the accompanying statement. \r\n\r\n> I would add an explicit note about the lack of CID update making this unsuitable for mobility scenarios.  That's a common use case for this sort of mechanism, but this design lacks any defense against linkability.\r\n",
      "createdAt": "2019-03-12T09:15:40Z",
      "updatedAt": "2019-04-16T08:09:20Z",
      "closedAt": "2019-04-16T08:09:20Z",
      "comments": []
    },
    {
      "number": 64,
      "id": "MDU6SXNzdWU0NDgzMDc4MTA=",
      "title": "Peer address validation",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/64",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Alice has an active DTLS session + CID with Bob.\r\n  - Eve (man-on-the-side) sends junk packet with the CID currently in use between Alice and Bob and a spoofed source address of Victor\r\n      - If Bob updates the peer address before the record is validated, he creates DoS/DDoS surface.\r\n  - Eve (man-on-the-side) replays previous packet from Alice and changes source address to that of Victor\r\n      - If Bob has anti-replay disabled \u2014 even if he validates the records in the packet \u2014 he creates DoS/DDoS surface.\r\n  - Eve (man-in-the-middle) modifies packet from Alice to have the source address of Victor\r\n    - Expanded DoS/DDoS surface is unavoidable.\r\n\r\nWhile the first two can be addressed, I don't know how to stop (or even mitigate the third).\r\n\r\nWe should add text to the SecCons along the following lines:\r\n```\r\n[...]\r\nWhen using CID, anti-replay MUST be enabled.\r\nWhen a record with CID is received, the receiver MUST NOT update\r\nits view of the peer address with the source specified in the UDP packet\r\nbefore cryptographically validating the enclosed record(s).  Failing to do\r\nso, creates a (D)DoS opportunity for a man-on-the-side attacker.\r\nUse of CID creates the opportunity for an active man-in-the-middle to\r\ntrigger backscatter traffic for each CID-bearing packet it can modify.\r\n[hic sunt leones]\r\n```",
      "createdAt": "2019-05-24T18:46:26Z",
      "updatedAt": "2019-10-21T07:34:13Z",
      "closedAt": "2019-10-21T07:34:13Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We have the same problem in 1.3, but there the active man-in-the-middle attack described above could be mitigated by triggering an \"address validation\" sub protocol (via post-handshake) either on each and every peer address change or when the rate of peer address changes is above a certain threshold.",
          "createdAt": "2019-05-25T07:40:53Z",
          "updatedAt": "2019-05-25T11:03:12Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would assume, that such an attack makes only sense, if an \"amplified response\" is expected. Is that the right assumption?\r\nThat seems to be out of the scope of DTLS (means DTLS doesn't define such a response).\r\nTherefore I think, it could only be recommended, that a DTLS CID implementation tracks, if the associated ip-address should be considered as \"verified\". Each address change would reset that, and only a [\"Heartbeat\"](https://tools.ietf.org/html/rfc6520) (if supported), or the next layer could set it as \"verified\" again. The DTLS CID implementation then limits the maximum application message size for unverified destinations and reports a violation as error. It depends on the \"next layers\", if and how such a verification will be done (may be by explicit trigger a \"heartbeat\", if supported).\r\nUsing CoAP, I would assume, that a lot of outgoing traffic is just a ACK/SUCCESS, which is pretty small and so requires no special behaviour. For larger outgoing messages [echo-request-tag](\r\nhttps://tools.ietf.org/html/draft-ietf-core-echo-request-tag-05) could be considered, as this was already recommended as protection mechanisms for such cases, see [Carstens answer to \"The CoAP protocol is the next big thing for DDoS attacks\"](https://mailarchive.ietf.org/arch/browse/core/#05823)\r\n\r\n",
          "createdAt": "2019-05-31T07:57:54Z",
          "updatedAt": "2019-05-31T07:58:53Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have some reservations wrt the use of Heartbeat as an address validation tool:\r\n- it works outside the established crypto context (therefore HeartbeatResponse messages can be forged);\r\n- support has become really patchy (examples: mbedtls, wolfssl don't have it, Openssl has removed it)\r\n\r\nIIUC, your suggestion is for the DTLS stack to expose an address validation callback that must be supplied by the application? Not sure it'll fly -- the protocol should really clean up after itself if it creates attack surface, rather than relying on higher layers to do the mending -- but we can try if this is the only option.\r\n",
          "createdAt": "2019-05-31T10:13:21Z",
          "updatedAt": "2019-05-31T10:13:21Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> IIUC, your suggestion is for the DTLS stack to expose an address validation callback that must be supplied by the application? Not sure it'll fly -- the protocol should really clean up after itself if it creates attack surface, rather than relying on higher layers to do the mending -- but we can try if this is the only option.\r\n\r\nIf the validation should be done in DTLS, it may cause more traffic. By the way, I don't thought on a \"callback\". It may be more a isVerified(address), setVerified(address), and a new error code when sending too large messages. But the implementation is out of the cope of the spec. Therefore I would only recommend something as that.",
          "createdAt": "2019-05-31T11:19:19Z",
          "updatedAt": "2019-05-31T11:19:19Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I have some reservations wrt the use of Heartbeat as an address validation tool:\r\n> \r\n>     it works outside the established crypto context (therefore HeartbeatResponse messages can be forged);\r\n>     support has become really patchy (examples: mbedtls, wolfssl don't have it, Openssl has removed it)\r\n> \r\n\r\n\"outside the established crypto context\":\r\nI don't get that. Why is this \"outside the established crypto context\"? The peer send either a tls_cid with inner heartbeat or a heartbeat to the address to verify (and not to amplify, it should be a small one). That destination peer either has the crypto context, then the peer could response proper (using tls_cid with inner heartbeat), or the peer will drop the record with MAC violation.\r\n\r\nBut may be, you can provide some more details about that.     \r\n\r\n\"patchy\":\r\nThough the implementations must be updated for CID anyway, the could also cleanup the heartbeat.\r\n\r\n",
          "createdAt": "2019-05-31T11:24:10Z",
          "updatedAt": "2019-05-31T11:31:23Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Heartbeat\":\r\nOK, it seems to be \"usually\" something different. I assumed, that, if cid is negotiated, any record will be a tls_cid, so even a heartbeat will be sent as inner type. But that may be just my interpretation.",
          "createdAt": "2019-05-31T11:43:45Z",
          "updatedAt": "2019-05-31T11:43:45Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If the validation should be done in DTLS, it may cause more traffic.\r\n\r\nWhy?\r\n\r\n> By the way, I don't thought on a \"callback\". It may be more a isVerified(address), setVerified(address), and a new error code when sending too large messages. But the implementation is out of the cope of the spec. Therefore I would only recommend something as that.\r\n\r\nPeer address change is asynchronous from the PoV of the application.  Your proposal above seems to imply the application does regular checks?   But, yeah, the API details don't really matter (it's just an \"implementation quality\" consideration), as long as there's a usable API.  I'm still very unsure this would be an acceptable way forward though.\r\n\r\n> \"Heartbeat\":\r\n> OK, it seems to be \"usually\" something different. I assumed, that, if cid is negotiated, any record will be a tls_cid, so even a heartbeat will be sent as inner type. But that may be just my interpretation.\r\n\r\nInterestingly we don't say anything explicitly in this respect, so one can rightfully interpret it that way.  This (i.e., requiring address validation via the heartbeat ping while limiting outgoing traffic to a minimum until the heartbeat pong is received) seems like a good way forward to me.  (Certainly preferable to leaving the onus on the application.)\r\n\r\n",
          "createdAt": "2019-05-31T13:11:02Z",
          "updatedAt": "2019-05-31T13:11:02Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Why?\r\n\r\nBecause I assume, that at least for CoAP, an ACK/SUCCESS doesn't require something additional and would cover a large part of \"my traffic\". And the left over traffic is something for \"echo tag\". But that just assumes CoAP.\r\n\r\n",
          "createdAt": "2019-05-31T13:15:49Z",
          "updatedAt": "2019-05-31T13:15:49Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm still very unsure this would be an acceptable way forward though.\r\n\r\nI simply prefer, that this \"forwarding to upper layer\" is not excluded from the valid solutions.\r\n",
          "createdAt": "2019-05-31T13:26:06Z",
          "updatedAt": "2019-05-31T13:26:06Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > I'm still very unsure this would be an acceptable way forward though.\r\n> \r\n> I simply prefer, that this \"forwarding to upper layer\" is not excluded from the valid solutions.\r\n\r\nIt's not a question of excluding options: an implementation does exactly what it wants to.\r\n\r\nThe point is that it's not possible to inflict requirements on all L7 specs from a spec at L4.5 :)",
          "createdAt": "2019-05-31T13:32:10Z",
          "updatedAt": "2019-05-31T13:37:02Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The point is that it's not possible to inflict requirements on all L7 specs from a spec at L4.5 :)\r\n \r\nSure, **all** is not possible. But for those L7, which have defined means, it should be possible to apply them in order to optimize their way of using it.\r\n",
          "createdAt": "2019-05-31T13:53:02Z",
          "updatedAt": "2019-05-31T13:53:02Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > The point is that it's not possible to inflict requirements on all L7 specs from a spec at L4.5 :)\r\n> \r\n> Sure, **all** is not possible. But for those L7, which have defined means, it should be possible to apply them in order to optimize their way of using it.\r\n\r\nYeah, if an implementation (especially an embedded one) wants to provide cross protocol optimisations, I don't see how we can outlaw it.  What we need to describe here though is how to achieve internal coherency at the DTLS layer, without *requiring* external dependencies.",
          "createdAt": "2019-05-31T14:00:30Z",
          "updatedAt": "2019-05-31T14:00:30Z"
        },
        {
          "author": "Philago",
          "authorAssociation": "NONE",
          "body": "Hello @thomas-fossati ,\r\n\r\nI have questions on the attacks you described\r\n\r\nEve (man-on-the-side) sends junk packet with the CID currently in use between Alice and Bob and a spoofed source address of Victor\r\nIf Bob updates the peer address before the record is validated, he creates DoS/DDoS surface.\r\n=> I do not see where the attack is, if the packet is junk, even with a correct CID, the rercord will be rejected by dtls, \r\n\r\nEve (man-on-the-side) replays previous packet from Alice and changes source address to that of Victor\r\nIf Bob has anti-replay disabled \u2014 even if he validates the records in the packet \u2014 he creates DoS/DDoS surface.\r\n=> If the receiver updates the IP address only on new records received, the issue disapears right ? Even with anti-replay disabled. The records sent over and over again by the attacker will not create DoS/DDoS surface.\r\n\r\nEve (man-in-the-middle) modifies packet from Alice to have the source address of Victor\r\nExpanded DoS/DDoS surface is unavoidable.\r\n=> The draft you initiated with @hannestschofenig  should fix the issue right ? https://tools.ietf.org/html/draft-tschofenig-tls-dtls-rrc-00\r\n\r\nThanks\r\n\r\nPhilippe",
          "createdAt": "2019-07-17T19:16:47Z",
          "updatedAt": "2019-07-17T19:16:47Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hey @Philago ,\r\n\r\n> > *  Eve (man-on-the-side) sends junk packet with the CID currently in use between Alice and Bob and a spoofed source address of Victor\r\n> >     * If Bob updates the peer address before the record is validated, he creates DoS/DDoS surface.\r\n\r\n> I do not see where the attack is, if the packet is junk, even with a correct CID, the rercord will be rejected by dtls,\r\n\r\nEven assuming that the record is rejected by the crypto layer, if the peer's address is successfully subverted in the connection context of the receiver (i.e. before any crypto processing is done), then any \"return\" traffic will be routed to that spoofed address -- either an existing one, i.e. the victim of a DDoS, or a blackhole to just deny service to the real peer).\r\n\r\n> > *  Eve (man-on-the-side) replays previous packet from Alice and changes source address to that of Victor\r\n> >     * If Bob has anti-replay disabled \u2014 even if he validates the records in the packet \u2014 he creates DoS/DDoS surface.\r\n\r\n> If the receiver updates the IP address only on new records received, the issue disapears right ? Even with anti-replay disabled. The records sent over and over again by the attacker will not create DoS/DDoS surface.\r\n\r\nI'm not sure I understand your remark.  The spoofed peer will be \"active\" in the connection context of the subverted endpoint until a new record comes in from the legitimate peer.  During that time window, any return traffic from the subverted endpoint is both a real DoS on the legitimate peer and a potential DDoS on a victim chosen by the attacker.\r\n\r\n> > * Eve (man-in-the-middle) modifies packet from Alice to have the source address of Victor\r\n> >     * Expanded DoS/DDoS surface is unavoidable.\r\n\r\n> The draft you initiated with @hannestschofenig should fix the issue right?  https://tools.ietf.org/html/draft-tschofenig-tls-dtls-rrc-00\r\n\r\nThat's the intention.",
          "createdAt": "2019-07-18T11:22:55Z",
          "updatedAt": "2019-07-18T11:22:55Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not sure I understand your remark. \r\n\r\nTry to read issue #69 .\r\n\r\nUpdating the address is not only an issue under attack, it's also an issue assuming message reordering.\r\nWith assumed reordering, there are no strong arguments for \"window filter\" or \"newer epoch/sequence_number filter\". But the second one will work, even when a \"window filter\" would otherwise drop \"very slow messages\".  ",
          "createdAt": "2019-07-18T11:33:41Z",
          "updatedAt": "2019-07-18T11:33:41Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > I'm not sure I understand your remark.\r\n> Try to read issue #69 .\r\n> \r\n> Updating the address is not only an issue under attack, it's also an issue assuming message reordering.\r\n> With assumed reordering, there are no strong arguments for \"window filter\" or \"newer epoch/sequence_number filter\". But the second one will work, even when a \"window filter\" would otherwise drop \"very slow messages\".\r\n\r\nI've read #69, and I agree with it (i.e., the receiver must not take into account old reordered records as far as peer address update is concerned). Yet I don't understand how does that relate to @Philago's comment?",
          "createdAt": "2019-07-18T11:45:06Z",
          "updatedAt": "2019-07-18T11:45:06Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If the receiver updates the IP address only on new records received, the issue disapears right ? Even with anti-replay disabled. \r\n\r\n\"newer record\" based on the epoch/sequence_number. \r\nThat results in: if the address is only updated for \"newer records, based on the epoch/sequence_number\", then the RFC6347 \"anti-replay window\" may be disabled. That results in processing potential duplicate records (and you may be faced a \"timeshift attack\", but this is not introduced by CID), \r\nbut not in a attack surface introduced by CID.\r\n\r\nMy current main concern about this is:\r\nThere may be many, many risks. \r\nBut from my view point, the \"DTLS 1.2 Connection ID\" should focus on the risks, introduced or boosted by that. And not mention general ones without explain them as such general ones.\r\n",
          "createdAt": "2019-07-18T11:55:21Z",
          "updatedAt": "2019-07-18T11:55:21Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah gotcha.  Yes, I agree that to counter attack 2 above all is needed is #69, which also is necessary for general correctness of the protocol in presence of reordering at the network layer.",
          "createdAt": "2019-07-18T14:12:34Z",
          "updatedAt": "2019-07-18T14:12:34Z"
        },
        {
          "author": "Philago",
          "authorAssociation": "NONE",
          "body": "Hello @thomas-fossati,\r\n\r\nthank you for your answers and thank you @boaks to have clarified my position.\r\n\r\nSo to sum up we can tackle 1 and 2 with the address only being updated for \"newer records, based on the epoch/sequence_number\". 3 will be addressed with draft-tschofenig-tls-dtls-rrc-00\r\n\r\nCorrect ?",
          "createdAt": "2019-07-18T16:19:12Z",
          "updatedAt": "2019-07-18T16:19:12Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So to sum up we can tackle 1 and 2 with the address only being updated for \"newer records, based on the epoch/sequence_number\". 3 will be addressed with draft-tschofenig-tls-dtls-rrc-00\r\n> \r\n> Correct ?\r\n\r\nLooks likely.  I have tried to capture the discussion [on my fork](https://github.com/thomas-fossati/dtls-conn-id/commit/bcd267bcd55cec3fefd643b5758f71b837a65f96)\r\n\r\n@boaks @Philago could you please check if this matches your thinking?",
          "createdAt": "2019-07-18T17:12:06Z",
          "updatedAt": "2019-07-18T17:12:06Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by #70",
          "createdAt": "2019-10-21T07:34:12Z",
          "updatedAt": "2019-10-21T07:34:12Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU0NTY2NjUwODQ=",
      "title": "IANA Considerations Update",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/66",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A couple of tweaks are needed for the IANA Considerations Section:\r\n\r\n- Based on input from the IANA TLS DEs, it seems like we need a column added to the TLS ExtensionType Values registry to indicate that an extension is DTLS-only.\r\n- The column values for TLS 1.3 and Recommended are missing.  Suggest blank for TLS 1.3 and N for Recommended.\r\n- Add a note to say that connection_id is DTLS1.2 only.\r\n- Add instructions for IANA to assign \"Y\" to DTLS-okay column for tls12_cid content type.",
      "createdAt": "2019-06-16T17:47:00Z",
      "updatedAt": "2019-07-18T17:24:39Z",
      "closedAt": "2019-07-18T17:24:39Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That results in\r\n\r\n\"DTLS only\" for TLS extensions and\r\n\"DTLS-OK\" for TLS parameters.\r\n\r\nI'm not sure, if that just represents more the \"current\" usage than the \"logic\" behind it.\r\nI would be afraid, that this will hold up other ideas, which doesn't match that \"only for extensions / ok for parameters\" pattern.",
          "createdAt": "2019-06-21T06:31:53Z",
          "updatedAt": "2019-06-21T06:31:53Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure what \"DTLS-OK\" for TLS parameters means",
          "createdAt": "2019-07-07T08:26:03Z",
          "updatedAt": "2019-07-07T08:26:03Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "[\"DTLS-OK\" for TLS parameters](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-5)  \r\n\r\nFor TLS parameters there's a column \"DTLS-OK\", \r\nAnd for TLS extensions a column \"DTLS only\".\r\n\r\nDoes this explain my comment?  \r\n",
          "createdAt": "2019-07-08T18:23:53Z",
          "updatedAt": "2019-07-08T18:23:53Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "We added text to the draft-ietf-tls-dtls-connection-id-06 about the IANA consideration section. I believe this issue is closed. ",
          "createdAt": "2019-07-18T17:24:39Z",
          "updatedAt": "2019-07-18T17:24:39Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "MDU6SXNzdWU0NjYyODY0MTg=",
      "title": "Preconditions for accepting address update events",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/69",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[Security and Privacy Considerations](https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#security-and-privacy-considerations-sec-cons)\r\n\r\nThe part \r\n\r\n> When a record with CID is received that has the source address of the enclosing\r\n> UDP datagram different from the one previously associated with that CID, the\r\n> receiver MUST NOT update its view of the peer\u2019s address with the source\r\n> specified in the UDP packet before cryptographically validating the enclosed\r\n> record(s).  This is to ensure that a man-on-the-side attacker that sends a\r\n> packet with a different source address on an existing CID session does not\r\n> successfully manage to reroute any return traffic.\r\n\r\nof PR #65 didn't made to the draft, or did I miss it?\r\n\r\nIn the meantime, I would even go further:\r\nApplying [MAC](https://tools.ietf.org/html/rfc6347#section-4.1.2.1) and [Anti-Replay](https://tools.ietf.org/html/rfc6347#section-4.1.2.6) may validates the record cryptographically, and so the receive windows may be updated and the application data may be forwarded. But, if the epoch/sequence_number is not  newer than the newest successfully validate epoch/sequence_number before, the address update event itself may be wrong! Assuming, that a address-change is located somewhere on the message's route, it seems to be not possible to distinguish, if the message was delayed after the \"address change\" (and so that address is deprecated) or before that (and so the address would be the new one). If that could not be decided, I would go for updating the address only for newer records.\r\nUsing that approach, updating the address only for newer records (based on epoch/sequence_number) with validated [MAC](https://tools.ietf.org/html/rfc6347#section-4.1.2.1), would also mitigate the first two attacks of issue #64, though retransmitting an record with changed address will not update the address, because these records are **NOT** newer. \r\n",
      "createdAt": "2019-07-10T12:41:24Z",
      "updatedAt": "2019-10-21T12:18:56Z",
      "closedAt": "2019-10-21T12:18:56Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I have updated the text of https://github.com/tlswg/dtls-conn-id/pull/70 and was wondering whether it captures your issue. I am not sure what steps I have to take to meet your requirements. ",
          "createdAt": "2019-08-12T09:06:38Z",
          "updatedAt": "2019-08-12T09:06:38Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As long as [RFC6347, 4.1.2.6 - anti replay](https://tools.ietf.org/html/rfc6347#section-4.1.2.6) doesn't get mandatory (MUST), everything for me will be OK.\r\n\r\nSo, yes, PR #70 addresses it in the right way.",
          "createdAt": "2019-08-13T08:13:43Z",
          "updatedAt": "2019-08-13T08:35:02Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It looks like #70 closes this issue?",
          "createdAt": "2019-10-21T07:33:35Z",
          "updatedAt": "2019-10-21T07:33:35Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!",
          "createdAt": "2019-10-21T12:18:56Z",
          "updatedAt": "2019-10-21T12:18:56Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "MDU6SXNzdWU2MTc0NDM2MTU=",
      "title": "Disallow sending MAC failure fatal alerts to non-validated peers",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/72",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Imagine the following:\r\n* server S has an active session with client A using CID=1\r\n* S crashes and restarts\r\n* a new session using CID=1 is successfully established between S and client B\r\n* A sends a record with CID=1\r\n* MAC verification fails for the record\r\n\r\nIf at this point S decides *not* to follow the `SHOULD silently discard` recommendation in [RFC 6347](https://tools.ietf.org/html/rfc6347#section-4.1.2.1) and instead replIes to B (since A's address has not been validated) with a fatal MAC failure alert, a perfectly valid session would be killed.",
      "createdAt": "2020-05-13T13:21:00Z",
      "updatedAt": "2020-11-02T19:56:04Z",
      "closedAt": "2020-11-02T19:56:04Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why should Server S send any record to B, when receiving and record from A with a different address?",
          "createdAt": "2020-05-13T14:13:29Z",
          "updatedAt": "2020-05-13T14:13:29Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It can't send it to A because per [peer update rules](https://tools.ietf.org/html/draft-ietf-tls-dtls-connection-id-07#section-6) A is not a validated peer (crypto fails on the received record).  If S decided to send anything back, it could only send to B, which is the validated peer for CID=1.",
          "createdAt": "2020-05-13T14:27:28Z",
          "updatedAt": "2020-05-13T16:21:19Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Wouldn't it be a general rule, not to sent any response to different addresses?\r\n",
          "createdAt": "2020-05-13T14:47:26Z",
          "updatedAt": "2020-05-13T14:47:26Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please see [Section 4.1.2.1 of RFC6347](https://tools.ietf.org/html/rfc6347#section-4.1.2.1), last paragraph. PR #73  strengthens the SHOULD to a MUST.",
          "createdAt": "2020-05-13T14:52:31Z",
          "updatedAt": "2020-05-13T16:20:01Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I still think, that generally no answer should be send to a different address.\r\nThat will no be only true for alerts, it is generally true.\r\n\r\nReading [RFC6347 4.1.2.1](https://tools.ietf.org/html/rfc6347#section-4.1.2.1)\r\n\r\n> If a DTLS implementation chooses to generate an alert when it receives a\r\n> message with an invalid MAC, it MUST generate a bad_record_mac alert\r\n> with level fatal and terminate its connection state.\r\n\r\nThe termination of the connection state is independent from introducing CID.\r\n(Therefore \"a perfectly valid session would be killed.\" is the specified consequence of sending alert rather than something new and unknown introduced by CID.)\r\n\r\nIf a specification got somehow more complex, and so introduce misunderstandings, I would prefer to have general rules instead of introducing context sensitive rules. \r\n",
          "createdAt": "2020-05-19T07:21:40Z",
          "updatedAt": "2020-05-19T07:21:40Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What are you suggesting exactly?",
          "createdAt": "2020-05-19T08:05:18Z",
          "updatedAt": "2020-05-19T08:05:18Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For me this look like, there is no additional risk.\r\nUsing the option to choose to generate an alert is specified including the consequences. Assuming spoofing for \"None-CID\" traffic, introducing CID doesn't add new risks.\r\nSo, nothing need to be added.\r\n\r\nMaybe, if wanted, an additional hint, that with CID it may be easier to sent records with invalid MAC and so choosing to generate an alert should be well reconsidered though it would be mostly the wrong approach. \r\n  ",
          "createdAt": "2020-05-19T08:16:35Z",
          "updatedAt": "2020-05-19T08:20:45Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> For me this look like, there is no additional risk.\r\n\r\nBut there is *a* risk that is worth pointing out and fixing.  Even if it's only incremental value.",
          "createdAt": "2020-05-19T08:26:37Z",
          "updatedAt": "2020-05-19T08:26:37Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> But there is a risk that is worth pointing out and fixing. Even if it's only incremental value.\r\n\r\nAs long as it is clear, that the general risk was always there and CID makes it more probable to terminate the connection state accidentally.",
          "createdAt": "2020-05-19T08:47:14Z",
          "updatedAt": "2020-05-19T08:47:14Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added a [Proposal](https://github.com/tlswg/dtls-conn-id/pull/73#issuecomment-630678676).\r\n\r\nIn my opinion, this describes the higher risk and the resulting MUST NOT for alerts at the right place without limiting the processing in other scopes.",
          "createdAt": "2020-05-19T10:28:19Z",
          "updatedAt": "2020-05-19T10:28:19Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "MDU6SXNzdWU2ODkzMzQ0NzM=",
      "title": "Add CIDAC (Connection ID Authentication Code) ",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/74",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Considering, that sending records with \"spoofed, valid CIDs\" (e.g. read by some component on the path), will be not too hard, that may cause some smaller DoS scenarios. Though the record's MAC needs to be calculated to sort such records out, exactly that calculation may already consume more CPU resources, than expected. That doesn't really introduce a new thread, though ip-address spoofing was considered for DTLS before, but in difference to that ip-address spoofing, it maybe considered to be easier to spoof such valid CIDs.\r\n\r\nTo mitigate such DoS scenario, a CIDAC could be useful, if it could be calculated essentially faster than the record's MAC. To only prevent from DoS, the focus is more on efficiency than security (that will still be provided by the record's MAC). So my idea would be to add e.g. a 3 bytes CIDAC to the end of the CID in the TLS_CID record. Even with a weak CIDAC function may provide a 1/1000 ratio against \"CID spoofing\" (means: only 1 of 1000 spoofed CID records may pass that filter, but will then be blocked by the record's MAC). One idea for calculating such CIDAC would be to use SHA-256, feed in the [MAC keys](https://tools.ietf.org/html/rfc5246#section-6.3) and then add the first bytes up to and including the record length, but excluding the 3 bytes CIDAC. Using the MAC keys may also enable implementations to apply that filter even earlier in the processing, e.g. firewalls or load-balancers (sometime in the future :-) ).\r\n\r\nThough I'm still not common to DTLS 1.3, this idea may be not new. Even then, I would appreciate feedback.\r\n ",
      "createdAt": "2020-08-31T16:29:16Z",
      "updatedAt": "2020-11-02T20:12:35Z",
      "closedAt": "2020-11-02T20:12:35Z",
      "comments": []
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWU3MTg4OTU3Njk=",
      "title": "Clarification - variable length CID encoding MUST be deterministic",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/76",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The discussion in the [IETF TLS mailing list](https://mailarchive.ietf.org/arch/browse/tls/?q=AD%20review%20of%20draft-ietf-tls-dtls-connection-id-07) contains many examples with variable length CIDs, where the encoding is assumed to be ambiguous.\r\n\r\nIn my opinion, the encoding MUST be deterministic/unique.\r\n\r\nAny different opinions?     ",
      "createdAt": "2020-10-11T18:20:58Z",
      "updatedAt": "2020-12-03T08:21:22Z",
      "closedAt": "2020-12-03T08:21:22Z",
      "comments": [
        {
          "author": "ad-l",
          "authorAssociation": "NONE",
          "body": "See section III.D of https://eprint.iacr.org/2020/114.pdf for an illustration on QUIC. This can matter if there is any parsing or partial processing between the network representation and the cryptographic representation (what is hashed, signed, MACed, or used as AAD), such as QUIC header protection or cTLS compressed encoding. If any such re-encoding is done, it must be non-malleable and have strong prefix property (see definitions 1 and 2 in https://antoine.delignat-lavaud.fr/doc/usenix19.pdf).\r\n\r\nNote that we prove in the Usenix paper than any syntax written the TLS message presentation syntax has these properties assuming you don't write untagged unions. https://github.com/project-everest/everparse is a tool that can check if the message format grammar has this property automatically. For QUIC this is only the case if the canonical (minimal) representation is used; there is a formal proof of the fact here https://github.com/project-everest/everquic-crypto/blob/master/src/QUIC.Spec.VarInt.fsti\r\n\r\n",
          "createdAt": "2020-10-11T20:31:28Z",
          "updatedAt": "2020-10-11T20:31:28Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This can matter if there is any parsing or partial processing between the network representation and the cryptographic representation\r\n\r\nIsn't the only item, which may be the result of a decoding, that cid-length?\r\n\r\nThe current idea is to assume generally, that the CID is opaque, in order to have very simple implementation on the other's peer side. That other peer only takes the CID received in the hello_extension and applies that to the dtls-cid-records (and use the adapted MAC).\r\n\r\nWith that only the emitting peer, knows about the details of encoding the CID. That includes, if, at all, a variable length is chosen. Therefore, only that emitting peer may be faced of such issues. For me, that `strong prefix property` must be a property of the CID encoding, not the MAC.\r\n\r\n ",
          "createdAt": "2020-10-12T06:54:26Z",
          "updatedAt": "2020-10-12T06:54:26Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "I think the basic problem would be resolved by switching the order of the cid_length and the cid in the MAC.  However, I agree it would be better to make the length part of the encoding.  There is a mix between implicit and explicit handling for the CID,  this makes it hard to reason about and there may be other problems lurking about.  ",
          "createdAt": "2020-10-12T16:22:43Z",
          "updatedAt": "2020-10-12T16:22:43Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think the basic problem would be resolved by switching the order of the cid_length and the cid in the MAC. \r\n\r\nIn my opinion, it doesn't. \r\nAll the sayings so far about the cid-length are more analogies from cases, where that cid-length is on the wire (e.g. QUIC). And then, it's about the position also on the wire, and with that, the position in the MAC.\r\nSo far, I haven't read something about the special way of this draft. \r\nThat special way may be broken, but also that isn't something, someone has written so far. \r\n\r\n> However, I agree it would be better to make the length part of the encoding.\r\n\r\nCurrently it's optional to use a variable length CID. \r\nAnd only the emitting peer is affected. The current definition enables a kind of \"asymmetric implementations\", a simple/slim for constraint peers and a flexible/fat for powerful peers. That reflects in my opinion the most common current requirement:\r\n\r\n- small devices with \"dynamic/temporary\" 5-tuples (maybe caused by NATs)\r\n- server with static/fix 5-tuple\r\n\r\nFor the constrained peers it's simply copies the received cid and apply the new MAC. No details about the cid nor the optional variable length encoding is required on that peer. \r\n\r\nFor the powerful peer, it's a implementation decision (e.g. Californium defines a java interface to handle with custom cid encodings, currently mainly used for the cid-cluster-support. see [ConnectionIdGenerator](https://github.com/eclipse/californium/blob/master/scandium-core/src/main/java/org/eclipse/californium/scandium/dtls/ConnectionIdGenerator.java) ).\r\nIf the implementation wants to use a variable length CID, it's the responsibility of that implementation, to encode the CID with variable length in a \"injective\" way. But to define that encoding within this RFC, may be the wrong approach. It's more to require that it's \"injective\" (hope, I use the right term), then to specify the details. One may use a preceding byte, other just some bits, because the implementation may be limited to use only up to 16 bytes. \r\n\r\n> There is a mix between implicit and explicit handling for the CID, this makes it hard to reason about\r\n      \r\nIn my opinion, It's not the CID itself, the handling of that is defined pretty well.\r\nIt may be the handling of the cid-length, assuming \"variable length CIDs\". And here, my feeling is more and more, that analogies are considered to fast to apply here as well.\r\n  \r\n>  and there may be other problems lurking about.\r\n\r\nYes, that's my biggest fear. \r\nTherefore I would very welcome a short statement from @ekr about his opinion on that topic.\r\n",
          "createdAt": "2020-10-12T17:02:16Z",
          "updatedAt": "2020-10-12T18:27:30Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From [my e-mail](https://mailarchive.ietf.org/arch/msg/tls/WV1_qyZ4ZqqmgpZEBp_dmSLAbvM/) with some corrections:\r\n\r\n- a peer chose to emit only CIDs with the same static length. In that case, the cid-length will always be the same (cid-length is not on the wire). It can't be injected, except someone injects the executed program code itself. For that case, the cid-length seems to be obsolete in the MAC (but doesn't hurt). \r\n\r\n- a peer chose to emit CIDs with variable length. The emitting peer has to chose a encoding for such CID with variable length, that the peer itself is able to decode it. In this case the cid-length is on the wire. In my opinion it's extremely important, to chose a encoding, which could not be interpreted in different ways. But, if the encoding is \"injective\", then the \"logical duplicated\" cid-length is also obsolete in the MAC (but doesn't hurt, because it can't be injected, if the encoding is injective). \r\n\r\nIn both cases the other peer is intended just to add that received cid in the hello extension to the dtls-records and apply the MAC.",
          "createdAt": "2020-10-12T17:19:33Z",
          "updatedAt": "2020-10-12T17:19:33Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just to mention:\r\n\r\nIn my opinion, not recommending \"variable length CIDs\" would be also a way to go.",
          "createdAt": "2020-10-12T17:29:30Z",
          "updatedAt": "2020-10-12T17:29:30Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The emitting peer has to chose a encoding for such CID with variable length, that the peer itself is able to decode it. [...]\r\n\r\nYes, exactly (and I agree with you on the \"extremely important\" part).\r\n\r\nSome of the previous discussion here does make me want to think a bit harder, though, about the role of the two peers and where the injectivity of mapping is needed. Right now, the (MAC) verifier is the CID issuer, so it knows the internal structure to any variable-length CID and can trivially invert the mapping from protocol fields to MAC input, so that seems okay with or without an explicit CID length in the MAC input.  However, the party that is generating the MAC is not expected to know any internal structure to the CID, and has to blindly trust the CID value (and length) provided by the peer during the handshake.  The tls12_cid-type DTLSCiphertext is used starting with the client Finished (recalling that this is TLS 1.2, which is ... less nice than TLS 1.3), which is before the server Finished or any other key confirmation from the server.  This seems to imply a potential attack where the ServerHello is tampered with and the client produces a Finished using the \"wrong\" (tampered) CID.  With the information available to the client it cannot invert the mapping from protocol fields to MAC input and it seems possible that it can be convinced to generate a MAC using a CID that has been tampered to make use of this malleability (and the attacker might then devise a way to use the computed MAC with a different plaintext, without knowing the MAC key.  This makes me uncomfortable with omitting the CID length entirely, even though the specific example of malleability that we know about would involve a Finished body that is not the expected length and thus ought to be detected/prevented by one or both legitimate endpoints.",
          "createdAt": "2020-10-13T03:16:43Z",
          "updatedAt": "2020-10-13T03:17:07Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This seems to imply a potential attack where the ServerHello is tampered with and the client produces a Finished using the \"wrong\" (tampered) CID.\r\n\r\nIf the cid in the hello extension is considered to be tampered, I can't see, that including the cid-length in the MAC will be of any help, that cid-length may be tampered as well, or?. In my opinion, [RFC 5246 - FINISH](https://tools.ietf.org/html/rfc5246#section-7.4.9) includes a hash over all messages, intended to protect from such modifications. If that client FINISH fails, the generated keys used for this handshake are also devaluated. The next handshake will result in new keys.\r\n\r\nIn my opinion, assuming that handshake messages are tampered, seems to be a general topic, not really related to include the cid-length into the MAC.   ",
          "createdAt": "2020-10-13T05:03:54Z",
          "updatedAt": "2020-10-13T05:04:29Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry in advance for being pithy -- I should really be asleep already.\r\nAnyway, if a Dolev-Yao attacker can induce the DTLS client to produce a MAC value that is seen by the server as valid for a message different than the message the client intended to produce a MAC for, this MAC construction is flawed and needs to be replaced.  Whether or not we think that other parts of the handshake would detect the usage of such a modified message is not relevant.",
          "createdAt": "2020-10-13T05:55:26Z",
          "updatedAt": "2020-10-13T05:55:26Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my opinion, you relate an idea of an attack with the assumption, using the cid-length in the right position in the MAC will solve it.  So far, you didn't show, how such a cid-length would help to overcome that attack. \r\nI'm not sure, if constructing cases, and applying not related partial solutions will help.\r\n\r\n\r\n ",
          "createdAt": "2020-10-13T08:29:55Z",
          "updatedAt": "2020-10-13T08:29:55Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "It would be OK to fix both the MAC and the message/CID encoding.   I think that could be the path forward to resolving this issue.  \r\n",
          "createdAt": "2020-10-13T15:22:42Z",
          "updatedAt": "2020-10-13T15:22:42Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed.\r\n(I would prefer, to remove the `cid-length` from the MAC to fix it.)\r\n",
          "createdAt": "2020-10-13T16:18:24Z",
          "updatedAt": "2020-10-13T16:18:24Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "Would you also change the CID format to include length of the CID? ",
          "createdAt": "2020-10-13T17:06:24Z",
          "updatedAt": "2020-10-13T17:06:24Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Currently the draft has no CID format, its opaque.\r\nI would not add a format, which makes an encoded length mandatory. But I would add the constraint, that, if such a \"variable length CID\" is to be used, it MUST use a injective encoding and add an example, for such a encoding, with the first byte a length.",
          "createdAt": "2020-10-13T20:58:17Z",
          "updatedAt": "2020-10-13T20:58:17Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am worried that \"just\" requiring the CID format to be self-framing (i.e., have an internal length) does not provide all the properties that we need.  It ensures that the MAC verifier knows unambiguously what it is being requested to verify, yes, but the party generating the MAC does not have the ability (based solely on this MAC construction) to ensure that the MAC it is producing is for the plaintext+metadata that the verifier will be asked to verify.  If the party generating the MAC had an authenticated assurance that this CID (including its length) is the one that it is supposed to be using, this would be okay (because that is the extra information needed to know that the MAC being produced is over the message that the verifier will be asked to verify), but I have demonstrated a situation where the client does not have such an authenticated assurance.\r\n\r\nIn short, you asked me to show how having a cid-length (in a different position than currently) will prevent an attack: the attack in question occurs when the client is generating a (its first) MAC, not at the time when the MAC is validated.",
          "createdAt": "2020-10-14T21:15:10Z",
          "updatedAt": "2020-10-14T21:15:10Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> the attack in question occurs when the client is generating a (its first) MAC, not at the time when the MAC is validated.\r\n\r\nI still fail to follow your description, I can't see the attack.\r\n",
          "createdAt": "2020-10-15T05:13:56Z",
          "updatedAt": "2020-10-15T05:13:56Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The original topic to clarify the considerations for \"variable cid length\" is specified in the links below  \r\n\r\n[variable length cid - responsible for constructing](https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#L137)\r\n\r\n[variable length cid - self-delineating](https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#L264)\r\n\r\n(Sorry, the `#Lnnn` is not wokring for .md)\r\n\r\nIf attacks on the MAC validation with CIDs using ambiguous length ares still possible, seem to be left to everyone's own consideration. Without examples it's hardly to follow nor to estimate the effect of such an attack. I personally consider AEAD, AES-CBC MtE not to be effected by such a \"modified SERVER_HELLO\" attack. AES-CBC EtM the validation of the clients  FINISHs MAC would fail to detect the modification (as some other modifications of dtls 1.2 handshake messages would also not be detected). But it's hard to see how that should break more, because the next steps will hardly be passed (decrypt => result != FINISH, verify_data would hardly match).\r\n \r\nMaybe recommending to use [RFC7627 -  Extended Master Secret Extension](https://tools.ietf.org/html/rfc7627) would also mitigate that without adapting the MAC. \r\n\r\n\r\n \r\n",
          "createdAt": "2020-11-04T08:40:24Z",
          "updatedAt": "2020-11-04T08:42:40Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "I don't think we have closed on the issue yet.   The fact that there is ambiguity in the MAC calculation is enough to cause concern.    We don't want to wait for a full break to be found, we should fix this now before publication.  ",
          "createdAt": "2020-11-10T04:04:33Z",
          "updatedAt": "2020-11-10T04:04:33Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that we have not closed on the MAC/AAD construction yet.\r\nThat said, I think we have used this github issue for discussion of multiple topics over its lifetime (probably my fault as I tried to keep up with the move from email to github -- sorry about that!).  The stated topic of the issue as to variable-length CID encoding being deterministic is resolved, in that the party that will receive packets using that CID has to use a deterministic/self-delineating encoding.  The party that will send packets does not need to know what that encoding is, though, and that is where the other issues we're talking about come into play.",
          "createdAt": "2020-11-10T04:42:59Z",
          "updatedAt": "2020-11-10T04:42:59Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, if I closed this to early.\r\n\r\nFor me:\r\n\r\n> If, however, an implementation chooses to receive different lengths of CID, the assigned CID values must be self-delineating since there is no other mechanism available to determine what connection (and thus, what CID length) is in use. \r\n\r\nseems to be clear enough.\r\n\r\nThough @kaduk denied, that this issue would also mitigate the MAC change, I assumed the MAC is decoupled for this and so I closed it. As I read @kaduk comment, we agree on closing this issue.\r\n\r\n@jsalowey \r\n\r\nDo you think, it's worth to keep it open?\r\n\r\nOr should we create a new topic and add all the MAC discussion e-mail to that?\r\n\r\n\r\n\r\n",
          "createdAt": "2020-11-10T08:09:26Z",
          "updatedAt": "2020-11-10T08:09:57Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The discussion about a new MAC is in PR #77 .\r\n\r\nTherefore I close this again.",
          "createdAt": "2020-12-03T08:21:22Z",
          "updatedAt": "2020-12-03T08:21:22Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU3OTg5MDY2MjE=",
      "title": "Section 8 comment from Ben's review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/79",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": " Section 8\r\n \r\n> With multi-homing, a passive attacker is able to correlate the\r\n>  communication interaction over the two paths and the sequence number\r\n> makes it possible to correlate packets across CID changes.  The lack\r\n\r\n DTLS 1.2 CIDs don't have CID changes (other than by rehandshaking, which\r\nresets the sequence number space); the last clause seems stale from DTLS\r\n1.3?",
      "createdAt": "2021-02-02T04:04:26Z",
      "updatedAt": "2021-04-14T00:49:34Z",
      "closedAt": "2021-04-14T00:49:34Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You're right, if the CID changes, the sequence numbers are reset. So it doesn't make sense.\r\nMaybe, \"across address changes\", was meant. ",
          "createdAt": "2021-02-02T08:19:51Z",
          "updatedAt": "2021-02-02T08:19:51Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If \"across address changes\" was meant then it seems like the CID itself would be an even better way to correlate packets across address changes.  It looks like this was fixed in the meantime by 094584b0d1882e4f8e570627f0aff5a9507f85e9 so we should close the issue.",
          "createdAt": "2021-04-13T22:45:19Z",
          "updatedAt": "2021-04-13T22:45:19Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWU3OTg5MDg2MDE=",
      "title": "Section 9 comment from Ben",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/80",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": ">     An on-path adversary can create reflection attacks against third\r\n>     parties because a DTLS peer has no means to distinguish a genuine\r\n>     address update event (for example, due to a NAT rebinding) from one\r\n>     that is malicious.  This attack is of concern when there is a large\r\n\r\nThis is why we have the \"[t]here is a strategy for ensuring that the new\r\npeer address is able to receive and process DTLS records\" requirement,\r\nright?  We should probably mention that (and that it's not perfect,\r\nsince you have to send some records to the not-yet-verified peer address\r\nas part of the verification process).",
      "createdAt": "2021-02-02T04:09:41Z",
      "updatedAt": "2021-04-14T03:41:20Z",
      "closedAt": "2021-04-14T03:41:20Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> (and that it's not perfect, since you have to send some records to the not-yet-verified peer address\r\nas part of the verification process)\r\n\r\nTo label it \"perfect\" or not, requires a discussion about the threats before. There are some comments/contributions, but for me this discussion seems to be still pending. \r\n\r\nLet me try to list them up:\r\n- Thomas started the topic with issue #64\r\n- Hannes proposed [draft-tschofenig-tls-dtls-rrc-00 - DTLS Return Routability Check (RRC)](https://mailarchive.ietf.org/arch/msg/tls/oTZ_t_PJ4uJ1U5cmV5oUabYvL-8/), Martin start to point to the work in QUIC.\r\n- you started a discussion asking the mail list [WGLC for draft-ietf-tls-dtls-connection-id-06](https://mailarchive.ietf.org/arch/msg/tls/3W4t4Vs0gA-I2O_b8uBXmkjcQMc/)\r\n- Sean started a discussion asking the mail list [WG adoption call for draft-tschofenig-tls-dtls-rrc](https://mailarchive.ietf.org/arch/msg/tls/IJYqpTmSHsCkiMaUPt_AltvKbe8/).\r\n    - Martin requested in that discussion \"To give an idea, address validation in QUIC is much more complex than is proposed here, for reasons I believe to be good.  If this document does less than QUIC, it needs to justify that.\"\r\n   - and I tried to answered that. (Though QUIC \"give me a word, and I download you the WEB\", is something totally different to CoAP/DTLS \"occasionally send a couple of bytes and get even less bytes with the processing state back .\" it doesn't require the same means to defend.)\r\n\r\nMy conclusion is therefore still:\r\nUntil now, I see only an amplification attack.\r\nTo mitigate that, it's \"perfect\", if you send just less bytes back.\r\n\r\nFor the most other \"advanced scenarios\", you may use RRC, or use an mechanism on the next layers of the stack (e.g. [draft-ietf-core-echo-request-tag](https://datatracker.ietf.org/doc/draft-ietf-core-echo-request-tag/ for CoAP.)\r\n",
          "createdAt": "2021-02-02T08:15:16Z",
          "updatedAt": "2021-02-02T13:26:12Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@thomas-fossati \r\n\r\nIn the [discussion Sean started](https://mailarchive.ietf.org/arch/msg/tls/IJYqpTmSHsCkiMaUPt_AltvKbe8/) you replied \"I'm also happy to invest cycles to bring it to fruition.\"\r\n\r\nAny further results/details?\r\n",
          "createdAt": "2021-02-02T13:30:19Z",
          "updatedAt": "2021-02-02T13:30:19Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @thomas-fossati\r\n> \r\n> In the [discussion Sean started](https://mailarchive.ietf.org/arch/msg/tls/IJYqpTmSHsCkiMaUPt_AltvKbe8/) you replied \"I'm also happy to invest cycles to bring it to fruition.\"\r\n> \r\n> Any further results/details?\r\n\r\nIt looks like the CfA has not concluded yet.  We should ask the chairs.\r\n",
          "createdAt": "2021-02-02T14:43:06Z",
          "updatedAt": "2021-02-02T14:43:06Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "I think we need to redo the call as it was not clear if we had consensus to adopt.  ",
          "createdAt": "2021-02-15T20:33:34Z",
          "updatedAt": "2021-02-15T20:33:34Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One idea of that discussion was, to move that \"open questions\" to an other RFC (therefore RRC), in order to finalize this CID RFC for the use-cases, which don't require such a RRC.\r\n\r\nThe point from Martin \r\n\r\n> I'm really concerned about shipping a protocol that enables the sorts of attacks that connection IDs enable.  \r\n\r\nis sure valid, but it will take a large amount of time, to verify, if QUIC does something, which is also required here. Though Tomas wait's for the \"CfA\" to conclude, I guess, it's still takes more time.\r\n\r\nSo for me the main question seems to be, if Martin's statement, blocks this RFC, or, not.\r\n",
          "createdAt": "2021-02-16T09:06:26Z",
          "updatedAt": "2021-02-16T09:06:26Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Achim,\r\n\r\n> The point from Martin\r\n> \r\n> > I'm really concerned about shipping a protocol that enables the sorts of attacks that connection IDs enable.\r\n>\r\n> is sure valid, but it will take a large amount of time, to verify, if QUIC does something, which is also required here. Though Tomas wait's for the \"CfA\" to conclude, I guess, it's still takes more time.\r\n> \r\n> So for me the main question seems to be, if Martin's statement, blocks this RFC, or, not.\r\n\r\nMartin's comment ([ptr](https://mailarchive.ietf.org/arch/msg/tls/489dqAquQdQrw8cbLBIxoc8Y03Y/)) was about -06, whereas -latest has added [Section 6](https://tools.ietf.org/rfcdiff?url2=draft-ietf-tls-dtls-connection-id-09.txt&url1=draft-ietf-tls-dtls-connection-id-06.txt) to address that.\r\n\r\nFrom that point of view the document should be OK in its current shape.\r\n",
          "createdAt": "2021-02-16T10:15:14Z",
          "updatedAt": "2021-02-16T10:15:14Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Thomas,\r\n\r\nThanks for your clarification!\r\n",
          "createdAt": "2021-02-16T10:18:57Z",
          "updatedAt": "2021-02-16T10:18:57Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So is the conclusion that Section 6 addresses this issue, and we should mark the issue as resolved?",
          "createdAt": "2021-04-13T22:42:54Z",
          "updatedAt": "2021-04-13T22:42:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe so, yes.",
          "createdAt": "2021-04-14T00:54:14Z",
          "updatedAt": "2021-04-14T00:54:14Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Based on my review of the issue history, and looking back at my original comment (which was just \"we should probably mention this [and maybe some caveats]\"), I agree.  We clearly link to the entire Section 6 that goes into some not insignificant detail on the caveats, so it looks like we did what I was asking for.",
          "createdAt": "2021-04-14T03:22:29Z",
          "updatedAt": "2021-04-14T03:22:29Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "MDU6SXNzdWU4Mjk5OTU1NDQ=",
      "title": "Missing RFC 8174 boilerplate",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/88",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Tom Petch's review: https://mailarchive.ietf.org/arch/msg/tls/Opmv1JCmY10uBKP1SrzfUpxhzCY/\r\n\r\n```\r\ns.2 lacks the boiler plate of RFC8174\r\n```",
      "createdAt": "2021-03-12T10:50:38Z",
      "updatedAt": "2021-04-14T00:30:46Z",
      "closedAt": "2021-04-14T00:30:46Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/tlswg/dtls-conn-id/pull/92",
          "createdAt": "2021-03-12T11:47:27Z",
          "updatedAt": "2021-03-12T11:47:27Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "MDU6SXNzdWU4Mjk5OTYwMDI=",
      "title": "Zero-length CID clarifications",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/89",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Tom Petch's review: https://mailarchive.ietf.org/arch/msg/tls/Opmv1JCmY10uBKP1SrzfUpxhzCY/\r\n\r\n```\r\ns.3\r\nI found this unclear until I had understood it all (or perhaps I do not\r\nunderstand it)\r\n\r\n\"...or again, alternately, to use a zero-length CID).\"\r\nThis suggests that a zero length CID is valid in Application Data which\r\nlater text seems to contradict; otherwise I cannot see what this is saying.\r\n\r\n\"\u00a0\u00a0If DTLS peers have negotiated the use of a CIDs using the ClientHello\r\nand the ServerHello messages \"\r\narguably sending a zero CID and receiving a zero CID is a successful\r\nHello negotiation perhaps\r\n\" If DTLS peers have negotiated the use of a non-zero CID in at least\r\none direction, using the ClientHello and the ServerHello messages\"\r\n\r\n\"The DTLS peers determine whether incoming and outgoing messages need..\"\r\nseems not to cater for unidirectional CIDs; perhaps\r\n\"The DTLS peers determine whether incoming or outgoing, or both,\r\nmessages need.. \"\r\n```\r\n",
      "createdAt": "2021-03-12T10:51:15Z",
      "updatedAt": "2021-04-14T00:18:16Z",
      "closedAt": "2021-04-14T00:18:16Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A zero-length value indicates that the server will send with the client's CID but does not wish the client to include a CID (or again, alternately, to use a zero-length CID).\r\n\r\nMy feeling: remove \"(or again, alternately, to use a zero-length CID)\" and add:\r\n\r\nThe text following that seems to introduce first the idea of a \"zero-length CID\", and later use that to negate the use of tls_cid record. It may be more straight forward, if the \"zero-length CID\" is scoped to the  ClientHello and the ServerHello extensions, and later the use of a tls_cid record is then only caused for a non-empty CID.\r\n \r\n",
          "createdAt": "2021-03-12T16:13:30Z",
          "updatedAt": "2021-03-12T16:13:30Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "MDU6SXNzdWU4Mjk5OTY3MDU=",
      "title": "Assorted typos",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/90",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Tom Petch's review: https://mailarchive.ietf.org/arch/msg/tls/Opmv1JCmY10uBKP1SrzfUpxhzCY/\r\n\r\n```\r\ns.4\r\n/always recieve CIDs/always receive CIDs/\r\n\r\n\r\ns.5.1\r\n\"the with Encrypt-then-MAC processing described in [RFC7366].\"\r\nI do not understand why 'with' is needed\r\n\r\ns.5.2\r\nditto\r\n\r\ns.8\r\n/this aspects SHOULD refuse/these aspects SHOULD refuse/\r\n```",
      "createdAt": "2021-03-12T10:52:07Z",
      "updatedAt": "2021-04-14T00:30:37Z",
      "closedAt": "2021-04-14T00:30:37Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/tlswg/dtls-conn-id/pull/93",
          "createdAt": "2021-03-12T11:47:09Z",
          "updatedAt": "2021-03-12T11:47:09Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "MDU6SXNzdWU4Mjk5OTg2NDQ=",
      "title": "IANA section slight reorg",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/91",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Tom Petch's review: https://mailarchive.ietf.org/arch/msg/tls/Opmv1JCmY10uBKP1SrzfUpxhzCY/\r\n\r\n```\r\ns.10\r\nI would find this clearer as three sections for the three IANA actions\r\n10.1 new column for ExtensionType\r\n10.2 new value for ExtensionType\r\n10.3 new value for ContentType\r\n\r\n\"\u00a0\u00a0 IANA is requested to allocate an entry to the existing TLS\r\n\u00a0\u00a0\u00a0\u00a0\"ExtensionType Values\" registry, defined in [RFC5246],..\"\r\nwell no; whatever you think of RFC8447 the name has changed\r\n\"\u00a0\u00a0 IANA is requested to allocate an entry to the existing \"TLS\r\n\u00a0\u00a0\u00a0\u00a0ExtensionType Values\" registry, defined in [RFC5246],..\"\r\nor, if you are picky (which I am not),\r\n\u00a0\u00a0\u00a0\u00a0IANA is requested to allocate an entry to the existing \"TLS\r\n\u00a0\u00a0\u00a0\u00a0\"ExtensionType Values\" registry, defined in [RFC5246], and\r\n\u00a0\u00a0\u00a0\u00a0renamed by RFC8447\r\n\r\nAn extra column is added but I cannot see what value should be placed in\r\nthat column for existing entries.\r\n\r\n\"The tls12_cid ContentType is only applicable to DTLS 1.2.\"\r\nGood information but I struggle to see what IANA will do with it; I see\r\nnowhere for it to go.\r\n```",
      "createdAt": "2021-03-12T10:53:51Z",
      "updatedAt": "2021-04-14T00:53:20Z",
      "closedAt": "2021-04-14T00:53:20Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/tlswg/dtls-conn-id/pull/94",
          "createdAt": "2021-03-12T11:46:54Z",
          "updatedAt": "2021-03-12T11:46:54Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "MDU6SXNzdWU4MzE5Mzk2Mzc=",
      "title": "more clarity about \"real_type\"",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/97",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Russ Housley's secdir review: https://mailarchive.ietf.org/arch/msg/tls/dI-hAovkWRPNUg8JRrBS4de1uUw/\r\n\r\n```\r\nSection 4: For increased clarity, I suggest:\r\nOLD:\r\n   real_type  The content type describing the payload.\r\nNEW:\r\n   real_type  The content type describing the cleartext payload.\r\n```",
      "createdAt": "2021-03-15T15:42:24Z",
      "updatedAt": "2021-04-14T00:00:45Z",
      "closedAt": "2021-04-14T00:00:45Z",
      "comments": []
    },
    {
      "number": 99,
      "id": "MDU6SXNzdWU4NTczNzY5Mjg=",
      "title": "new \"connection_id\" extension codepoint after MAC semantics change?",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/99",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We currently have an early allocation of the TLS extensiontype codepoint 53 that was allocated on 2019-07-02.\r\nAn implementation of the draft at that time will no longer interoperate with the current specification due to changes in how the MAC inputs and AAD are laid out.\r\n\r\nIf we want to allocate a new extensiontype value for the new semantics, we should tell IANA that there is an existing early allocation and, e.g., that it should be left to expire (and what version of the draft to use as a reference until it does), with a new codepoint to be allocated in its stead.\r\n\r\nWe also have the option to direct IANA that \"once this document is approved for publication, the early allocation will be deprecated and the following assignment will be made\".",
      "createdAt": "2021-04-13T22:50:13Z",
      "updatedAt": "2021-04-14T03:38:39Z",
      "closedAt": "2021-04-14T03:38:39Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we should take your last option.",
          "createdAt": "2021-04-14T00:01:31Z",
          "updatedAt": "2021-04-14T00:01:31Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWU4NjEwMzM3MjM=",
      "title": "\u00c9ric Vyncke's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/103",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/R4Sh7CkbadK9bLCHzmfyGHKthqg/\r\n\r\n```\r\n-- Abstract --\r\nAs an important part of this document is the padding, should it be mentioned\r\nalso in the abstract ?\r\n\r\n-- Section 3 --\r\nWhile I am not a DTLS expert, I find this section quite difficult to understand\r\nthe reasoning behind the specification as little explanations are given about,\r\ne.g, what is the motivation of \"A zero-length value indicates that the server\r\nwill send with the client's CID but does not wish the client to include a CID.\"\r\n\r\n-- Section 6 --\r\nI am puzzled by the text:\r\n     \"There is a strategy for ensuring that the new peer address is able\r\n      to receive and process DTLS records.  No such strategy is defined\r\n      in this specification.\"\r\nDoes this mean that there is no way to update the peer IP address ?\r\n\r\n== NITS ==\r\n\r\n-- Section 1 --\r\nPlease expand CID on first use outside of the abstract.\r\n\r\n-- Section 4 --\r\nSuggest to add a short paragraph as a preamble to figure 3. Currently, it looks\r\nlike figure 3 belongs to the 'zeros' field description.\r\n```\r\n\r\n**Update from \u00c9ric re: Section 6**\r\n```\r\nRe-reading the end of the section 6 gives indeed some insights on the\r\noverall process, which I failed to understand at first reading. May I\r\nsuggest to complement the last bullet as \"defined in this specification\r\nbut relies on the application using DTLS\" ?\r\n```\r\n\r\n",
      "createdAt": "2021-04-19T08:13:02Z",
      "updatedAt": "2021-06-22T21:10:40Z",
      "closedAt": "2021-06-22T21:10:40Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "body": "About \"-- Section 3 --, DTLS / zero-length CID\"\r\n\r\n[RFC5246 - 7.4.1.4.  Hello Extensions](https://tools.ietf.org/html/rfc5246#section-7.4.1.4)\r\n\r\n\"An extension type MUST NOT appear in the ServerHello unless the same\r\n extension type appeared in the corresponding ClientHello.\"\r\n\r\nThe \"zero-length CID\" therefore is mainly used for the very common cases, where only the clients are required to send such a CID, but not the server. \r\n\r\nMaybe adding a hint to RFC5246 7.4.1.4 will help?\r\n",
          "createdAt": "2021-04-19T08:56:48Z",
          "updatedAt": "2021-04-19T08:56:48Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "body": "About \"-- Section 6 --\"\r\n\r\nYes, that's still very complex:\r\n\r\nFirst, processing the record seems to be easier (less restricted), than use a changed source address for sending data back.\r\n\r\nUsing a changed source address for sending data back to, is not generally solved. \r\n\r\nThere are some special case, e.g., if the data sent back is very small, there is no risk (at least, none has explained one). There may also be some upper-layer mechanisms, which helps out (e.g. [draft-ietf-core-echo-request-tag](https://tools.ietf.org/wg/core/draft-ietf-core-echo-request-tag) for coap).\r\n \r\nAnd there is a idea of a general solution [dtls-rrc](https://datatracker.ietf.org/doc/draft-tschofenig-tls-dtls-rrc), but that will require more time. Because of the required time, the idea was to release this spec without RRC and postpone that general work (see also issue #80).",
          "createdAt": "2021-04-19T09:08:10Z",
          "updatedAt": "2021-04-19T09:08:10Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> As an important part of this document is the padding, should it be mentioned\r\nalso in the abstract ?\r\n\r\nSome initial attempt at this in #120 ",
          "createdAt": "2021-06-08T18:36:39Z",
          "updatedAt": "2021-06-08T18:36:39Z"
        }
      ]
    },
    {
      "number": 104,
      "id": "MDU6SXNzdWU4NjExNjczNTY=",
      "title": "Rob Wilton's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/104",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/ssfL3x2jgoHWOx2RtK0033_V4K4/\r\n\r\n```\r\nHi,\r\n\r\nI'm no DTLS expert, but I found the concepts/explanation in this document easy\r\nto follow.\r\n\r\nI was slightly confused by the requirement to encode the length in variable\r\nlength CIDs, and had to read the relevant text a second time.   As a\r\nsuggestion, it might help if these two sentences were reworded the other way\r\nround:\r\n\r\nOLD:\r\nImplementations that want to use\r\n   variable-length CIDs are responsible for constructing the CID in such\r\n   a way that its length can be determined on reception.  Note that\r\n   there is no CID length information included in the record itself.\r\n\r\nNEW:\r\nSince the CID length information is not included in the record itself,\r\nimplementations that want to use ... <as before>.\r\n\r\nOne minor question.  In the contributors, I noted that Jana is listed as being\r\nassociated with Google, but it might be worth checking if that is still\r\naccurate.\r\n\r\nRegards.\r\nRob\r\n```",
      "createdAt": "2021-04-19T10:37:45Z",
      "updatedAt": "2021-04-19T15:55:48Z",
      "closedAt": "2021-04-19T15:55:48Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Regarding:\r\n\r\n> One minor question.  In the contributors, I noted that Jana is listed as being associated with Google, but it might be worth checking if that is still accurate.\r\n\r\nWe could streamline that a bit:\r\n1. removing the affiliations (who knows which have become stale in the meantime?), and also\r\n2. `strings.Join(cid_task_force_members, \",\")`\r\n\r\nBesides, is \"task force\" the right term?  Would \"QUIC CID design team\" be a better designation?",
          "createdAt": "2021-04-19T11:34:03Z",
          "updatedAt": "2021-04-19T11:34:03Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "MDU6SXNzdWU4NjMwMTIwMzA=",
      "title": "Francesca Palombini's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/106",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/x-UCKxKC0Wk9HfZJh1-6Sud5oT0/\r\n\r\n```\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\nThank you for the work on this document. I only have minor comments and nits\r\nbelow.\r\n\r\nFrancesca\r\n\r\n1. -----\r\n\r\n   sending messages to the client.  A zero-length CID value indicates\r\n   that the client is prepared to send with a CID but does not wish the\r\n   server to use one when sending.\r\n\r\n...\r\n\r\n   to use when sending messages towards it.  A zero-length value\r\n   indicates that the server will send with the client's CID but does\r\n   not wish the client to include a CID.\r\n\r\nFP: clarification question: I am not sure the following formulation is very\r\nclear to me: \"to send with a(/the client's) CID\". Could \"send with\" be\r\nrephrased to clarify? The previous paragraph uses \"using a CID value\", that\r\nwould be better IMO.\r\n\r\n2. -----\r\n\r\n   the record format defined in {{dtls-ciphertext} with the new MAC\r\n\r\nFP: nit - missing \"}\" in markdown.\r\n\r\n3. -----\r\n\r\n   The following MAC algorithm applies to block ciphers that use the\r\n   with Encrypt-then-MAC processing described in [RFC7366].\r\n\r\nFP: remove \"with\"\r\n\r\n4. -----\r\n\r\nSection 10.1\r\n\r\nFP: I believe you should specify 1. what allowed values are for this column\r\n(i.e. Y or N, and what they mean) and 2. what happens to the existing entries -\r\nnamely that they all get \"N\" value.\r\n\r\n5. -----\r\n\r\nSection 10.2\r\n\r\nFP: Just checking - why is 53 \"incompatible with this document\"?\r\n\r\n6. -----\r\n\r\n   Value   Extension Name  TLS 1.3  DTLS Only  Recommended  Reference\r\n\r\nFP: nit- s/DTLS Only/DTLS-Only to be consistent with 10.1\r\n```",
      "createdAt": "2021-04-20T16:45:00Z",
      "updatedAt": "2021-04-23T19:48:33Z",
      "closedAt": "2021-04-23T19:48:33Z",
      "comments": []
    },
    {
      "number": 107,
      "id": "MDU6SXNzdWU4NjMyMzExNTE=",
      "title": "Martin Duke's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/107",
      "state": "OPEN",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/0hyoFBsJ_21mv2hUEPPQhmGOMes/\r\n\r\n```\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\nThanks for this document.\r\n\r\nSection 9.3.3 of quic-transport, which deals with basically the same security\r\nmodel, also requires the receiving endpoint to probe the original address, not\r\njust the new one, to address a somewhat more difficult attack. It would be good\r\nto at least RECOMMEND this behavior for DTLS applications, and/or\r\n(repeat/informatively reference) the logic there.\r\n````",
      "createdAt": "2021-04-20T20:51:25Z",
      "updatedAt": "2021-06-08T18:43:55Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I opened https://github.com/tlswg/dtls-rrc/issues/3 to (also?) track this.\r\nI'm mostly okay with dtls-connection-id listing a necessary-but-not-necessarily-sufficient list of requirements for migration, and leaving the discussion of both how and what to probe to dtls-rrc.",
          "createdAt": "2021-06-08T18:43:55Z",
          "updatedAt": "2021-06-08T18:43:55Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "MDU6SXNzdWU4NjMyNTU0NzI=",
      "title": "John Scudder's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/109",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/urqyTwgp7sP7w40bFUhpCVPma-Y/\r\n\r\n```\r\n----------------------------------------------------------------------\r\nCOMMENT:\r\n----------------------------------------------------------------------\r\n\r\nI found this document heavy sledding but once I was through it, it all came\r\ntogether, with the exception of my #3, below. The \u201cheavy sledding\u201d part I think\r\nwould be largely fixed by addressing my #1, below.\r\n\r\n1. Section 3:\r\n\r\nThis pseudocode is a little too pseudo for me:\r\n\r\n     struct {\r\n         opaque cid<0..2^8-1>;\r\n     } ConnectionId;\r\n\r\nWhat does the content of the angle brackets mean? At first I took it to mean\r\n\u201cthis can take on a value from 0 to 255\u201d [*] but parts of the spec that go on\r\nabout variable lengths made me think that couldn\u2019t be right. Eventually, by\r\npaging through RFC 5246, I found some explanations of what this stuff is\r\nsupposed to mean; in \u00a74.3 of that RFC I found out that\r\n\r\n   Variable-length vectors are defined by specifying a subrange of legal\r\n   lengths, inclusively, using the notation <floor..ceiling>.  When\r\n   these are encoded, the actual length precedes the vector's contents\r\n   in the byte stream.  The length will be in the form of a number\r\n   consuming as many bytes as required to hold the vector's specified\r\n   maximum (ceiling) length.\r\n\r\nI assume this is what\u2019s going on in DTLS as well. This cleared up my main\r\nsource of confusion, which was regarding just how you were encoding these\r\nvariable-length CIDs anyway. (And oh by the way, that definition doesn\u2019t say\r\nwhat the units of length are. Bytes seems implied but isn\u2019t explicit.)\r\n\r\nWhile I don\u2019t expect you to supply these definitions again, it would be\r\ncourteous to your readers to have a sentence or two explaining that pseudo-code\r\nconventions are found in RFC 5246, special extra credit for section references\r\nas well. And yes, I did notice \"This document assumes familiarity with DTLS 1.2\r\n[RFC6347].\u201d That\u2019s well and good, but I don\u2019t think \u201cfamiliarity\u201d is the same\r\nas \u201cwe have adopted the same notational conventions\u201d.\r\n\r\n[*] By the way, why not just use \u201c255\u201d in the text instead of \u201c2^8-1\u201d? Eschew\r\nobfuscation!\r\n\r\n2. Section 3:\r\n\r\n   If DTLS peers have negotiated the use of a non-zero-length CID for a\r\n   given direction, then once encryption is enabled they MUST send with\r\n   the record format defined in {{dtls-ciphertext} with the new MAC\r\n   computation defined in Section 5 and the content type tls12_cid.\r\n   Plaintext payloads never use the new record type and the CID content\r\n   type.\r\n\r\nWhat\u2019s \u201c{{dtls-ciphertext}\u201d? I\u2019m guessing just a botched xref?\r\n\r\nAlso, the first sentence seems to have no object. (What MUST they send?)\r\n\r\n3. Section 6:\r\n\r\n   *  There is a strategy for ensuring that the new peer address is able\r\n      to receive and process DTLS records.  No such strategy is defined\r\n      in this specification.\r\n\r\nThis is a little mind-boggling to me. I understand this to mean I can\u2019t send\r\nthe new address a DTLS record unless I\u2019ve already ensured it can receive and\r\nprocess that record, right? This seems almost like a classic Catch-22. I feel\r\nlike I must be missing something.\r\n```",
      "createdAt": "2021-04-20T21:25:47Z",
      "updatedAt": "2021-06-22T21:15:20Z",
      "closedAt": "2021-06-22T21:15:20Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this can be closed now -- we addressed (1) by mentioning that the presentation language is per RFC 8446, fixed the markdown for (2), and applied some clarifications (mostly by pointing to the existing note) regarding (3).",
          "createdAt": "2021-06-08T18:37:47Z",
          "updatedAt": "2021-06-08T18:37:47Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "MDU6SXNzdWU4NjQwNjY2NzQ=",
      "title": "Warren Kumari's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/112",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> I did find \"Because each party sends the value in the \"connection_id\" extension it wants to receive as a CID in encrypted records, it is possible for an endpoint to use a globally constant length for such connection  identifiers. \" to be confusing. I was trying to figure out what *the* globally constant length is; global implied to me that everyone would use it. Could this be reworded to something like \"for an endpoint to use a constant length for all such connection identifiers.\" or similar?\r\n",
      "createdAt": "2021-04-21T16:29:33Z",
      "updatedAt": "2021-04-23T19:50:01Z",
      "closedAt": "2021-04-23T19:50:01Z",
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Could this be reworded to something like \"for an endpoint to use a constant length for all such connection identifiers.\" or similar?\r\n\r\nYou're right, the \"globally\" seems to be used in the sense of a \"programming language\", so the scope is a peer and the CID emitted by this peer for other peers to be used, when the other peers sends records to the emitting peer.\r\n\r\nMaybe we find a better term than \"globally\" to describe that.",
          "createdAt": "2021-04-22T07:35:09Z",
          "updatedAt": "2021-04-22T07:36:37Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "maybe \"sitewide\"?",
          "createdAt": "2021-04-22T08:09:28Z",
          "updatedAt": "2021-04-22T08:09:28Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU4NjUwMTMwNzU=",
      "title": "Lars Eggert's IESG review",
      "url": "https://github.com/tlswg/dtls-conn-id/issues/115",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/tls/Vg7QymL8fu-pAHw9Bs4CD46KC_U/\r\n\r\n```\r\nAll comments below are about potential very minor issues that you may choose to\r\naddress in some way - or ignore - as you see fit. Some were flagged by\r\nautomated tools, so there will likely be some false positives. There is no need\r\nto let me know what you did with these suggestions. \r\n\r\nSection 3, paragraph 10, nit:\r\n>    the record format defined in {{dtls-ciphertext} with the new MAC\r\n\r\nBroken kramdown reference?\r\n\r\nSection 1, paragraph 4, nit:\r\n-    This document defines an extension to DTLS 1.2 to add a CID to the\r\n+    This document defines an extension to DTLS 1.2 to add a Connection ID (CID) to the\r\n+                                                             ++++++++++  ++++++\r\n\r\nSection 3, paragraph 7, nit:\r\n-    for example by having the length in question be a compile-time\r\n+    for example, by having the length in question be a compile-time\r\n+               +\r\n\r\nSection 3, paragraph 7, nit:\r\n-    different length to other parties.  Implementations that want to use\r\n-    variable-length CIDs are responsible for constructing the CID in such\r\n+    different lengths to other parties.  Implementations that want to use\r\n+                    +\r\n+    variable-length CIDs are responsible for constructing the CIDs in such\r\n+                                                                 +\r\n\r\nSection 3, paragraph 12, nit:\r\n-    datagram with the RFC 6347-defined record format the MAC calculation\r\n+    datagram with the RFC 6347-defined record format, the MAC calculation\r\n+                                                    +\r\n\r\nSection 4, paragraph 6, nit:\r\n-    *  The true content type is inside the encryption envelope, as\r\n-           - -\r\n+    *  The real content type is inside the encryption envelope, as\r\n+             ++\r\n\r\nSection 6, paragraph 2, nit:\r\n-    datagram unless the following three conditions are met:\r\n+    datagram, unless all of the following three conditions are met:\r\n+            +       +++++++\r\n\r\nSection 10, paragraph 2, nit:\r\n-    This document requests three actions by IANA.\r\n-                                         ^^\r\n+    This document requests three actions from IANA.\r\n+                                         ^^^^\r\n\r\nSection 4, paragraph 17, nit:\r\n> cord. outer_type The outer content type of a DTLSCiphertext record carrying a \r\n>                                    ^^^^^^^^^\r\nIf 'type' is a classification term, 'a' is not necessary. Use \"type of\". (The\r\nphrases 'kind of' and 'sort of' are informal if they mean 'to some extent'.)\r\n\r\nSection 4, paragraph 19, nit:\r\n> the CID value it will receive and use to identify the connection, so an implemen\r\n>                                   ^^^^^^\r\nMake sure that 'use to' is correct. For habitual actions in the past or to mean\r\n'accustomed to', use \"used to\".\r\n\r\nSection 5, paragraph 6, nit:\r\n> Plaintext The length (in bytes) of the serialised DTLSInnerPlaintext (two-byte inte\r\n>                                        ^^^^^^^^^^\r\nDo not mix variants of the same word ('serialise' and 'serialize') within a\r\nsingle text.\r\n\r\nSection 6, paragraph 2, nit:\r\n>  that has a source address different than the one currently associated with the D\r\n>                                      ^^^^\r\nDid you mean 'different \"from\"? 'Different than' is often considered colloquial\r\nstyle.\r\n\r\nSection 6, paragraph 2, nit:\r\n> ied in the received datagram, unless all of the following three conditions are met: \r\n>                                      ^^^^^^^^^^\r\nConsider using \"all the\".\r\n\r\n\"Appendix A.\", paragraph 1, nit:\r\n>  History RFC EDITOR: PLEASE REMOVE THE THIS SECTION draft-ietf-tls-dtls-connect\r\n>                                    ^^^^^^^^\r\nMaybe you need to remove the second determiner so that only \"THE\" or \"THIS\" is\r\nleft.\r\n\r\n\"Appendix A.\", paragraph 29, nit:\r\n> 2 * Move to internal content types a la DTLS 1.3. draft-ietf-tls-dtls-conne\r\n>                                    ^^^^\r\n'a la' is an imported foreign expression, which originally has a diacritic.\r\nConsider using \"\u00e0 la\"\r\n\r\n\"Appendix B.\", paragraph 1, nit:\r\n> formation RFC EDITOR: PLEASE REMOVE THE THIS SECTION The discussion list for the\r\n>                                     ^^^^^^^^\r\nMaybe you need to remove the second determiner so that only \"THE\" or \"THIS\" is\r\nleft.\r\n\r\n\"Appendix C.\", paragraph 1, nit:\r\n>  Many people have contributed to this specification and we would like to thank the following\r\n>                                       ^^^^^^^^^^^^^^^^^\r\nUse a comma before 'and' if it connects two independent clauses (unless they\r\nare closely connected and short).\r\n\r\nThese reference issues exist in the document:\r\n * No reference entries found for: \r\n     [ChangeCipherSpec], [length], [length_of_padding],\r\n     [DTLSCiphertext.length],\r\n     [draft-rescorla-tls-dtls-connection-id-00],\r\n     [cid_length], [DTLSPlaintext.length]\r\n * Uncited references: [RFC5246]\r\n * Obsolete reference to RFC5246, obsoleted by RFC8446\r\n\r\nThese URLs in the document did not return content:\r\n * https://www1.ietf.org/mailman/listinfo/tls\r\n * http://www.ietf.org/internet-drafts/draft-tschofenig-tls-dtls-rrc-01.txt\r\n * http://www.ietf.org/internet-drafts/draft-ietf-tls-dtls13-40.txt\r\n```",
      "createdAt": "2021-04-22T14:23:15Z",
      "updatedAt": "2021-04-23T23:04:25Z",
      "closedAt": "2021-04-23T23:04:25Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc2MjUxNTI1",
      "title": "obsoletes -> updates",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/1",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-20T16:38:18Z",
      "updatedAt": "2018-06-27T14:48:31Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "7465544d011f735a3fc4416ea062eb63c0f45914",
      "headRepository": "emanjon/dtls-conn-id",
      "headRefName": "patch-1",
      "headRefOid": "ffbe7819393d779db4fa79cc959e9b1d8b240aeb",
      "closedAt": "2018-06-27T14:48:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1NjcyMjU4",
      "title": "Draft update based on London IETF discussions",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/2",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-18T23:06:28Z",
      "updatedAt": "2018-06-27T14:48:31Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "7465544d011f735a3fc4416ea062eb63c0f45914",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "patch-1",
      "headRefOid": "7c89b0c51f57b1dd61da8e99751e40c53497d952",
      "closedAt": "2018-06-27T14:48:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk2NzIxMTUx",
      "title": "Post-London updates",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/3",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove 1.3 references (based on Hannes's PR #2);\r\n- Protect CID;\r\n- Initial sketch for explicit marking of CID records using ad hoc CTs.",
      "createdAt": "2018-06-22T12:12:05Z",
      "updatedAt": "2018-06-27T12:36:34Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "7465544d011f735a3fc4416ea062eb63c0f45914",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "c84711296f274a6ebf2b0ff27fa263e0fca056d7",
      "closedAt": "2018-06-27T12:36:34Z",
      "mergedAt": "2018-06-27T12:36:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "37f3a632aa6d90b8badcc02e02ab762e3100f532"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also do not understand that\n\nOn Mon, Jun 25, 2018 at 8:01 AM, Hannes Tschofenig <notifications@github.com\n> wrote:\n\n> *@hannestschofenig* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-dtls-connection-id.md\n> <https://github.com/tlswg/dtls-conn-id/pull/3#discussion_r197829965>:\n>\n> > -                                          (connection_id=100)\n> -                                          EncryptedExtensions\n> -                                                      (cid=5)\n> -                                                  Certificate\n> -                                                      (cid=5)\n> -                                            CertificateVerify\n> -                                                      (cid=5)\n> -                                                     Finished\n> -                                                      (cid=5)\n> +~~~~\n> +      MAC(MAC_write_key, DTLSCompressed.epoch +\n> +                            DTLSCompressed.sequence_number +\n> +                            DTLSCompressed.type +\n> +                            DTLSCompressed.version +\n> +                            DTLSCompressed.cid +      // New input\n> +                            DTLSCompressed.length +\n>\n> Do we need to modify the key derivation function to include the CID? Why\n> do you think we need it?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/pull/3#pullrequestreview-131649051>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oThmysVqiSCJh0gYCBt_E1nqxirNks5uAPtJgaJpZM4UztEU>\n> .\n>\n",
          "createdAt": "2018-06-25T15:05:36Z",
          "updatedAt": "2018-06-25T15:05:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, you're right. It needs to be in the MAC, but not the key derivation\n\n-Ekr\n\n\nOn Mon, Jun 25, 2018 at 8:46 AM, Thomas Fossati <notifications@github.com>\nwrote:\n\n> *@thomas-fossati* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-dtls-connection-id.md\n> <https://github.com/tlswg/dtls-conn-id/pull/3#discussion_r197845868>:\n>\n> > -                                          (connection_id=100)\n> -                                          EncryptedExtensions\n> -                                                      (cid=5)\n> -                                                  Certificate\n> -                                                      (cid=5)\n> -                                            CertificateVerify\n> -                                                      (cid=5)\n> -                                                     Finished\n> -                                                      (cid=5)\n> +~~~~\n> +      MAC(MAC_write_key, DTLSCompressed.epoch +\n> +                            DTLSCompressed.sequence_number +\n> +                            DTLSCompressed.type +\n> +                            DTLSCompressed.version +\n> +                            DTLSCompressed.cid +      // New input\n> +                            DTLSCompressed.length +\n>\n> (This the MAC computation, not the key derivation. Though, this is\n> probably not needed -- see my reply above.)\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/pull/3#discussion_r197845868>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oVdQV1TsZil3Q97Bc2xieNyGMKevks5uAQW9gaJpZM4UztEU>\n> .\n>\n",
          "createdAt": "2018-06-25T15:49:01Z",
          "updatedAt": "2018-06-25T15:49:01Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we need to include the CID in the MAC since the CID is just the key name. In regular DTLS the 5 tuple is the key name and we don't include it in the MAC calculation either. \r\n\r\nIf someone fakes a packet and places a wrong CID in there then they MAC will just fail since either (a) the wrong key will be looked up or (b) no key is found at all. In either case there is no issue. ",
          "createdAt": "2018-06-25T16:03:10Z",
          "updatedAt": "2018-06-25T16:03:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMjczNjg3",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2018-06-22T17:07:30Z",
          "updatedAt": "2018-06-22T17:15:27Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why 1.2? Can't this be for < 1.3?",
              "createdAt": "2018-06-22T17:07:30Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 39,
              "body": "Same comment about 1.2 and below. I tend to think we should just say DTLS before 1.3.",
              "createdAt": "2018-06-22T17:08:52Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 54,
              "body": "Is this jsut reflow?",
              "createdAt": "2018-06-22T17:09:06Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 70,
              "body": "In future it would be good to have different PRs for off-topic changes.",
              "createdAt": "2018-06-22T17:09:50Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 107,
              "body": "Please don't do this. http://itre.cis.upenn.edu/~myl/languagelog/archives/001464.html",
              "createdAt": "2018-06-22T17:10:36Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 177,
              "body": "I don't think we want to change DTLSPlaintext. This should only be for encrypted records.",
              "createdAt": "2018-06-22T17:13:37Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 274,
              "body": "\"I would write this somewhat differently. In order to allow a receiver to determine whether a record has CID or not, connections which have negotiated this extension use new record types for all protected records. The following table shows the record types to use.\"\r\n\r\nNote you also need handshake. I wonder if anyone cares about heartbeat, though.\r\n\r\n\r\n",
              "createdAt": "2018-06-22T17:14:29Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 322,
              "body": "I don't see this example.",
              "createdAt": "2018-06-22T17:15:14Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwMjYx",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:18:25Z",
          "updatedAt": "2018-06-22T21:18:26Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I pondered on this as well, then noted that 1.0 is \"obsoleted\" by 1.2 and decided that we probably should not care about 1.0?  Happy to revert as you suggest if you think it's the sensible thing to do.",
              "createdAt": "2018-06-22T21:18:26Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwMjcy",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:18:28Z",
          "updatedAt": "2018-06-22T21:18:28Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "See reply above.",
              "createdAt": "2018-06-22T21:18:28Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwMzA0",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:18:38Z",
          "updatedAt": "2018-06-22T21:18:39Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Yep, this must be me inadvertently doing a `gq` in vim.  I'll revert it.",
              "createdAt": "2018-06-22T21:18:39Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwMzI2",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:18:43Z",
          "updatedAt": "2018-06-22T21:18:43Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "ACK",
              "createdAt": "2018-06-22T21:18:43Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwMzQ3",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:18:47Z",
          "updatedAt": "2018-06-22T21:18:47Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "ACK",
              "createdAt": "2018-06-22T21:18:47Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwMzgw",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:18:55Z",
          "updatedAt": "2018-06-22T21:18:55Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "I might be horribly wrong, but on a re-handshake are we not dealing with DTLSPlaintext's?",
              "createdAt": "2018-06-22T21:18:55Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwNDQ2",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:19:14Z",
          "updatedAt": "2018-06-22T21:19:14Z",
          "comments": [
            {
              "originalPosition": 274,
              "body": "ACK, and you're right: I forgot handshake.\r\n\r\n(I'd add heartbeat for consistency.)",
              "createdAt": "2018-06-22T21:19:14Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMzUwNDY0",
          "commit": {
            "abbreviatedOid": "b7bf37d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-22T21:19:17Z",
          "updatedAt": "2018-06-22T21:19:18Z",
          "comments": [
            {
              "originalPosition": 322,
              "body": "It's the text just below the para.  In the rendered TXT it's \"Figure 2\".",
              "createdAt": "2018-06-22T21:19:17Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNDM0NTg1",
          "commit": {
            "abbreviatedOid": "a074388"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-24T19:58:06Z",
          "updatedAt": "2018-06-24T19:59:29Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I think I would just remove the \"1.2\" here.",
              "createdAt": "2018-06-24T19:58:06Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 39,
              "body": "I don't think we need to explicitly scope it to 1.2.",
              "createdAt": "2018-06-24T19:58:24Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 177,
              "body": "I don't follow. We will only send CIDs on encrypted data, and therefore it doesn't need to be in this structure.",
              "createdAt": "2018-06-24T19:59:05Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            },
            {
              "originalPosition": 322,
              "body": "OK.",
              "createdAt": "2018-06-24T19:59:24Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNDM3MzU0",
          "commit": {
            "abbreviatedOid": "a074388"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-24T21:38:06Z",
          "updatedAt": "2018-06-24T21:38:06Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Yes, I get that.  The thing that confuses me then is how to interpret this bit of [RFC5246](https://tools.ietf.org/html/rfc5246#section-7.4) regarding (re-)handshake records:\r\n```\r\n   [...] Handshake messages are supplied to\r\n   the TLS record layer, where they are encapsulated within one or more\r\n   TLSPlaintext structures, which are processed and transmitted as\r\n   specified by the current active session state.\r\n```\r\nAnd this other bit of [RFC5246](https://tools.ietf.org/html/rfc5246#section-6.2.3):\r\n```\r\n    The encryption and MAC functions translate a TLSCompressed\r\n    structure into a TLSCiphertext.\r\n```\r\nWhich is the reason why I originally added CID to both `DTLSPlaintext` and `DTLSCompressed`.\r\n\r\n\r\n\r\n",
              "createdAt": "2018-06-24T21:38:06Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNDM3NDMy",
          "commit": {
            "abbreviatedOid": "a074388"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-24T21:41:15Z",
          "updatedAt": "2018-06-24T21:41:15Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "OK, that makes sense.  DTLS 1.3 will then supersede this mechanism with its own CID machinery.",
              "createdAt": "2018-06-24T21:41:15Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNDM3NDM1",
          "commit": {
            "abbreviatedOid": "a074388"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-24T21:41:27Z",
          "updatedAt": "2018-06-24T21:41:27Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "ACK",
              "createdAt": "2018-06-24T21:41:27Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNDM3ODEz",
          "commit": {
            "abbreviatedOid": "5cd64c7"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-24T21:56:17Z",
          "updatedAt": "2018-06-24T21:56:18Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Sure, and the way to think about this is that you are adding the CID as part of that transformation.",
              "createdAt": "2018-06-24T21:56:18Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNDM4MTc2",
          "commit": {
            "abbreviatedOid": "5cd64c7"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-24T22:10:03Z",
          "updatedAt": "2018-06-24T22:10:03Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Got it, thanks.\r\n\r\n(We still need to say that CID is fed into the MAC algorithm.)",
              "createdAt": "2018-06-24T22:10:03Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNTI2NDYz",
          "commit": {
            "abbreviatedOid": "0b40194"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-25T09:15:17Z",
          "updatedAt": "2018-06-25T09:15:17Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "> (We still need to say that CID is fed into the MAC algorithm.)\r\n\r\nDone in 0b40194",
              "createdAt": "2018-06-25T09:15:17Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNjQ5MDUx",
          "commit": {
            "abbreviatedOid": "0b40194"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-25T15:01:15Z",
          "updatedAt": "2018-06-25T15:01:15Z",
          "comments": [
            {
              "originalPosition": 290,
              "body": "Do we need to modify the key derivation function to include the CID? Why do you think we need it?",
              "createdAt": "2018-06-25T15:01:15Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNjUwNDAx",
          "commit": {
            "abbreviatedOid": "0b40194"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-25T15:04:13Z",
          "updatedAt": "2018-06-25T15:04:13Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "Did we conclude that the CID only needs to be added to the DTLSCiphertext (and not to the DTLSPlaintext and the DTLSCompressed)? ",
              "createdAt": "2018-06-25T15:04:13Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNjYxMzM1",
          "commit": {
            "abbreviatedOid": "0b40194"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-25T15:28:55Z",
          "updatedAt": "2018-06-25T15:28:55Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "I got confused by this comment from the 101 minutes:\r\n```\r\nSubodh: Re-read draft and the TLS conn-ID isn't under the authentication?\r\n\r\nekr: Need to write it down in 1.2.\r\n```\r\nwhich I thought it meant we forgot to put CID in under authentication.\r\n\r\nIf this is not the case, I can remove the modified MAC computation together with the DTLSCompressed stuff, which was just needed to reference DTLSCompressed.cid in the algorithm.",
              "createdAt": "2018-06-25T15:28:55Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNjY4OTUz",
          "commit": {
            "abbreviatedOid": "0b40194"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-25T15:46:01Z",
          "updatedAt": "2018-06-25T15:46:02Z",
          "comments": [
            {
              "originalPosition": 290,
              "body": "(This the MAC computation, not the key derivation. Though, this is probably not needed -- see my reply above.)",
              "createdAt": "2018-06-25T15:46:01Z",
              "updatedAt": "2018-06-27T11:22:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 4,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk3NzA2NTkz",
      "title": "Sequence number",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/4",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-27T11:52:03Z",
      "updatedAt": "2018-06-27T11:53:18Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "7465544d011f735a3fc4416ea062eb63c0f45914",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "sequence-number",
      "headRefOid": "bfa3af75c882320b0c88c79deb726aaf3093ab03",
      "closedAt": "2018-06-27T11:53:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 5,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk3NzI3MDYx",
      "title": "Add CID's length to the MAC computation",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/5",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-27T13:08:39Z",
      "updatedAt": "2018-06-27T14:47:59Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "89a16e247a2f9542a5b89e08e7f4d9771439d1a0",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "0ed8d3c7447ab6a487a1cff84deb1328031379f1",
      "closedAt": "2018-06-27T14:47:59Z",
      "mergedAt": "2018-06-27T14:47:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ac51000471a33e8cffc74b3560e8e43245c78eb2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk3NzYzOTI4",
      "title": "Pre-01 fixes",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/6",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Fix typo in MAC's inputs;\r\n- Remove the open issue about PN leaking CIDs which doesn't\r\n  apply to the fixed CID scheme.",
      "createdAt": "2018-06-27T15:04:39Z",
      "updatedAt": "2018-10-21T22:09:04Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "ac51000471a33e8cffc74b3560e8e43245c78eb2",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "c8ecffe6aa8d4b39c1f478b6af62526d10e19a2f",
      "closedAt": "2018-10-21T22:09:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI0NTcxOTM2",
      "title": "Use a wrapped content type as proposed by Martin Thomson and",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/13",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "discussed in YUL.\r\n\r\n@martinthomson",
      "createdAt": "2018-10-21T21:59:26Z",
      "updatedAt": "2018-10-22T20:42:17Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2abb32114b5da2ad6d0c1fa04aca701cf32cdade",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "new_ct_structure",
      "headRefOid": "2332266fe96d9a02978e05da97e54c3e3ce2a390",
      "closedAt": "2018-10-22T20:42:17Z",
      "mergedAt": "2018-10-22T20:42:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e68f27d2d2afcb0fd925503fed0a3091b5c4a430"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY3MDU3NjQy",
          "commit": {
            "abbreviatedOid": "93240d9"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-10-22T18:57:48Z",
          "updatedAt": "2018-10-22T19:07:31Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Do we need a description of `content` in the list below?",
              "createdAt": "2018-10-22T18:57:49Z",
              "updatedAt": "2018-10-22T20:42:00Z"
            },
            {
              "originalPosition": 54,
              "body": "Is this just a clarifying sentence? The expression below suggests it was already included in the MAC computation.",
              "createdAt": "2018-10-22T18:59:01Z",
              "updatedAt": "2018-10-22T20:42:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 14,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI0NTcyNDE3",
      "title": "Cant change cids",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/14",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-10-21T22:07:16Z",
      "updatedAt": "2018-10-21T22:07:22Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "fdecc3ab5793414fb10763a0615bb3280280d18b",
      "headRepository": "ekr/dtls-conn-id-1",
      "headRefName": "cant_change_cids",
      "headRefOid": "a672262107d7f152f079244821b7c65731561d0b",
      "closedAt": "2018-10-21T22:07:21Z",
      "mergedAt": "2018-10-21T22:07:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "31fe910dc91e75852c9dff9581c817a67c80521b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMyMTc2MDQ0",
      "title": "Remove exposition",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/19",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> This is effectively the simplest possible design that will work.\r\n\r\nNot that important to say.\r\n\r\n> Previous design ideas for using cryptographically generated session ids, either using hash chains or public key encryption, were dismissed due to their inefficient designs. \r\n\r\nSame.\r\n\r\n> Note that a client always has the chance to fall back to a full handshake or more precisely to a handshake that uses session resumption.\r\n\r\nWhy this is a relevant statement is baffling.  The point that is being made is that more complex designs might allow a connection to continue in the face of path changes (and NAT rebindings), but these are far too complex and in cases where a connection ID is insufficient, a new connection is probably easier to manage.\r\n\r\nBut you don't need to say all of that.",
      "createdAt": "2018-11-20T02:51:24Z",
      "updatedAt": "2019-02-03T21:11:08Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "martinthomson/dtls-conn-id",
      "headRefName": "patch-1",
      "headRefOid": "da56122591e32fdffddb52ed1415f7cff71b51fa",
      "closedAt": "2019-02-03T21:11:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd be willing to revise this a bit, but I think it's important to recognize that we are aware of the shortcomings of this design but that it was chosen for a reason. If you want to expand on the last sentence, I'd be fine with that, otherwise I prefer to leave as-is.",
          "createdAt": "2019-01-27T21:11:34Z",
          "updatedAt": "2019-01-27T21:11:34Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I also think it is valuable for the reader to explain that there are shortcomings of this design and, since we have a slightly different design in DTLS 1.3, that there is a possibility to get better privacy protection when moving to DTLS 1.3. For this reason I would not remove the sentence or the paragraph.",
          "createdAt": "2019-01-29T09:46:39Z",
          "updatedAt": "2019-01-29T09:46:39Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I created an alternative proposal in PR #41. \r\nWhat do you think, Martin?",
          "createdAt": "2019-01-29T15:51:49Z",
          "updatedAt": "2019-01-29T15:51:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#41 is better. ",
          "createdAt": "2019-02-03T21:11:08Z",
          "updatedAt": "2019-02-03T21:11:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 20,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMyMTc2Mjc1",
      "title": "Colons FTW",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/20",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-11-20T02:53:03Z",
      "updatedAt": "2019-01-27T21:10:24Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "martinthomson/dtls-conn-id",
      "headRefName": "patch-2",
      "headRefOid": "1e13af237c4f98dc8c4c84768a5ab45a4e2816a9",
      "closedAt": "2019-01-27T21:10:24Z",
      "mergedAt": "2019-01-27T21:10:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c7619eb2dcf96b2f99c08591d010d34d8a2640dd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 21,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMyMTc2NTUw",
      "title": "Say how long cid_length is",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/21",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-11-20T02:54:56Z",
      "updatedAt": "2019-01-27T21:12:17Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "martinthomson/dtls-conn-id",
      "headRefName": "patch-3",
      "headRefOid": "e9a7314b8273ee8a7cbe112220160bb0e2569450",
      "closedAt": "2019-01-27T21:12:17Z",
      "mergedAt": "2019-01-27T21:12:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1d3a87cc9296e1d81857a1dc1b0f0fcbaa9fb190"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 24,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMyMTc3MTQz",
      "title": "missing word",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/24",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-11-20T02:58:59Z",
      "updatedAt": "2019-01-27T21:12:37Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "martinthomson/dtls-conn-id",
      "headRefName": "patch-4",
      "headRefOid": "1ab35959ace1e9ec955a18266044be1bf17abc4b",
      "closedAt": "2019-01-27T21:12:37Z",
      "mergedAt": "2019-01-27T21:12:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "763a2b5966bb6640abd61c1b14b877fc7ba45c29"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQxMjAzMzQ4",
      "title": " Updated Record Layer section",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/29",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-12-27T18:32:00Z",
      "updatedAt": "2019-01-31T09:41:44Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "4dd56c9a17136511489e3ef374a2afa6b65f8074",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "record-layer",
      "headRefOid": "7e84fa4c0cdeff15bda9e9d74c2595205a952728",
      "closedAt": "2019-01-31T09:32:22Z",
      "mergedAt": "2019-01-31T09:32:22Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "8f7765fa9a0c4aec0a68d91ede9b507b9ee6331e"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> These changes look appropriate.\r\n\r\nAccording https://github.com/tlswg/dtls-conn-id/issues/28#issuecomment-458032109\r\n\r\n> As I said, empty CID should mean \"use the 6347 framing\"\r\n\r\nthis is obvious far away from \"appropriate\".\r\n\r\nI would appreciate, if the scope of this draft could be clarified, before adding additional features.",
          "createdAt": "2019-01-31T07:57:13Z",
          "updatedAt": "2019-01-31T07:57:13Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "The issue you raised in https://github.com/tlswg/dtls-conn-id/issues/28#issuecomment-458032109 is important and will be addressed in a separate PR. I would like to merge some of the PRs to that we do not have too many conflicts. This PR only provides the text for the additional_data and, since we have changed our mind about it so many times already, I would like to get it into the working draft. Then, Thomas can make a contribution for the MAC calculation for non-AEAD ciphers. ",
          "createdAt": "2019-01-31T09:32:15Z",
          "updatedAt": "2019-01-31T09:32:15Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@hannestschofenig \r\n\r\nThank you very much for great patience! \r\nIt's sure still easy to implement, even with a new MAC for the old RFC 6347 record. \r\nAs I tried to point out, if there are new use-cases, they should not be obfuscated by introducing only \"maverick fields\" somewhere, in my opinion, they should be addressed clearly. \r\n\r\nI still see no argument to include the cid_length into the MAC.\r\n ",
          "createdAt": "2019-01-31T09:41:44Z",
          "updatedAt": "2019-01-31T09:41:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg4NDk2MjYy",
          "commit": {
            "abbreviatedOid": "9f8d975"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-12-31T13:27:15Z",
          "updatedAt": "2018-12-31T13:27:15Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Why should `DTLSWrappedCompressed.type` be included, it's contained in the encrypted part?\r\nWhy both, `DTLSCompressed.length` and `DTLSWrappedCompressed.length`, should be included?\r\n(By the way, I don't know, what  `DTLSWrappedCompressed.length` is. It's not defined in the `DTLSWrappedCompressed` struct.)",
              "createdAt": "2018-12-31T13:27:15Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkwMjgzODkx",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-08T15:05:37Z",
          "updatedAt": "2019-01-08T15:05:37Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I modified the list of fields in the additional data calculation. ",
              "createdAt": "2019-01-08T15:05:37Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkwNDM3NzI2",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-08T20:54:52Z",
          "updatedAt": "2019-01-08T20:54:52Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "The tls `seq_num` of https://tools.ietf.org/html/rfc5246#section-6.2.3.3 is in my opinion not the dtls `seq_num` of https://tools.ietf.org/html/rfc6347#section-4.1 ! Please don't remove the `epoch` field.\r\n",
              "createdAt": "2019-01-08T20:54:52Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkwNDQzNjUx",
          "commit": {
            "abbreviatedOid": "9f8d975"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-08T21:10:09Z",
          "updatedAt": "2019-01-08T21:10:09Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Uups, sorry forget the upper comment about the epoch! I read the last commit in isolation ;-(. ",
              "createdAt": "2019-01-08T21:10:09Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkwNzUzNzM4",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-09T14:33:19Z",
          "updatedAt": "2019-01-09T14:33:19Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Thanks Hannes, looks good to me.\r\n\r\nPS: not that it makes any difference, but adding the fields in the order in which they appear in the header\r\n```\r\n   seq_num + type + version + cid_length + cid + length\r\n```\r\nlooks slightly more consistent with the previously established convention?\r\n",
              "createdAt": "2019-01-09T14:33:19Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkwNzU1MTc2",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-09T14:36:20Z",
          "updatedAt": "2019-01-09T14:36:21Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Another small note: I think we should not remove the MAC computation.  I understand we want to move to an AEAD-only world, but this needs to work with every mode supported in 1.2...",
              "createdAt": "2019-01-09T14:36:21Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxMDcyNTM2",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-10T07:18:18Z",
          "updatedAt": "2019-01-10T07:18:18Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "> PS: not that it makes any difference, but adding the fields in the order in which they appear in the header\r\n\r\nThere is no field `cid_length` in the header :-).\r\n",
              "createdAt": "2019-01-10T07:18:18Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjE5NDQ2",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T15:49:53Z",
          "updatedAt": "2019-01-14T15:49:53Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "While there is no such field in the header that doesn't mean we cannot include it in the additional data calculation.",
              "createdAt": "2019-01-14T15:49:53Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjIwMTQz",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T15:51:11Z",
          "updatedAt": "2019-01-14T15:51:12Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Thomas, if you can add the text for the other MAC calculations then that's fine with me. I only care about the AEAD ciphers since we recommend them in the DTLS / TLS IoT profiles draft. \r\n",
              "createdAt": "2019-01-14T15:51:11Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjIzNDg0",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T15:57:08Z",
          "updatedAt": "2019-01-14T15:57:08Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "> While there is no such field in the header that doesn't mean we cannot include it in the additional data calculation.\r\n\r\nSure, but why should it then be added?\r\n",
              "createdAt": "2019-01-14T15:57:08Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjMyNzk1",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T16:14:06Z",
          "updatedAt": "2019-01-14T16:14:07Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Which size is considered for the `cid_length`? The same as in the extension (`opaque cid<0..2^8-1>`, so 1 byte as `uint8`)?  ",
              "createdAt": "2019-01-14T16:14:07Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjM2NDk1",
          "commit": {
            "abbreviatedOid": "012a755"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T16:20:51Z",
          "updatedAt": "2019-01-14T16:20:51Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "It would be 1 byte length but your remark is fair. IMHO one would have to do a formal analysis to say whether it really has to be added or not. Currently, we are just adding fields to the additional data / MAC calculation without much justification \r\n",
              "createdAt": "2019-01-14T16:20:51Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjM4NjYz",
          "commit": {
            "abbreviatedOid": "d946c62"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T16:24:47Z",
          "updatedAt": "2019-01-14T16:24:47Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "OK, thanks! That helps me to understand the current definition.",
              "createdAt": "2019-01-14T16:24:47Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjM4Njkz",
          "commit": {
            "abbreviatedOid": "d946c62"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T16:24:50Z",
          "updatedAt": "2019-01-14T16:24:50Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I updated the additional_data calculation again. I removed the cid_length since it is only implicit and I have re-ordered the fields as they appear on the wire. ",
              "createdAt": "2019-01-14T16:24:50Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjQxNTgw",
          "commit": {
            "abbreviatedOid": "1cbc54c"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T16:30:07Z",
          "updatedAt": "2019-01-14T16:30:08Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Corrected the order again since the seq_nr was used as the initial value in RFC 7366, even though this is not how it is represented on the wire. ",
              "createdAt": "2019-01-14T16:30:07Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4MjExNzkw",
          "commit": {
            "abbreviatedOid": "df60744"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-30T17:37:20Z",
          "updatedAt": "2019-01-30T17:37:20Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I'd rather say \"Value of the *negotiated* connection id\" to distinguish it from what is sent on the wire.  And it's maybe worth adding something like \"Note that this is empty in case a 0-length CID has been negotiated\".\r\n\r\nI'd also add an entry for cid_length here, specifying that even if a 0-length CID has been negotiated, and therefore no CID appears on the wire, a cid_length of 0 MUST be added to the AD.",
              "createdAt": "2019-01-30T17:37:20Z",
              "updatedAt": "2019-01-30T20:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4MzAzNzI3",
          "commit": {
            "abbreviatedOid": "7e84fa4"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-30T20:59:44Z",
          "updatedAt": "2019-01-30T20:59:44Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I added that text",
              "createdAt": "2019-01-30T20:59:44Z",
              "updatedAt": "2019-01-30T20:59:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NDM4NjA4",
          "commit": {
            "abbreviatedOid": "7e84fa4"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "These changes look appropriate. ",
          "createdAt": "2019-01-31T06:21:33Z",
          "updatedAt": "2019-01-31T06:21:33Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NDU5NTEx",
          "commit": {
            "abbreviatedOid": "7e84fa4"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-31T07:53:58Z",
          "updatedAt": "2019-01-31T07:53:58Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Sorry, if the usage of \"empty CID\" with the new record type is intended to obfuscate the payload length, this is clearly a new use-case and obvious no NAT solution!\r\n\r\nSo, please add this new use-case explicit to the introduction!\r\n\r\nAnd please provide an example, which shows that adding the cid_length make sense!\r\nIn other discussion \"empty CID in the new record types\" are denied.\r\n",
              "createdAt": "2019-01-31T07:53:58Z",
              "updatedAt": "2019-01-31T07:59:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NDY2MTc0",
          "commit": {
            "abbreviatedOid": "7e84fa4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-31T08:17:53Z",
          "updatedAt": "2019-01-31T08:17:53Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "There is no new \"payload length obfuscation\" use case that is enabled by this change.\r\n\r\nI think you are confusing on-the-wire framing with how authentication data is computed.\r\n\r\nHannes's change here is only about MAC computation.  The gist is that 0-length CIDs have 6347 framing but their MAC is computed slightly differently from a \"normal\" 6347 record.",
              "createdAt": "2019-01-31T08:17:53Z",
              "updatedAt": "2019-01-31T08:17:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NDc5MDA4",
          "commit": {
            "abbreviatedOid": "7e84fa4"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-31T08:55:21Z",
          "updatedAt": "2019-01-31T08:55:22Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Hm, so want you to ensure, that if a empty CID is used in the Hello Extension, and therefore a RFC 6347 record is used later, the MAC is different compared to a RFC 6347 record, which is used without using a empty cid in the Hello Extension?\r\n\r\nWhy? What would be the advantage? What are the examples, which show this advantage?\r\n\r\nFMPOV: the MAC includes already much keying material, the cid_length willl hardly improve that. From the discussion in #25 two arguments for including the MAC have been named: \r\n\r\nhttps://github.com/tlswg/dtls-conn-id/issues/25#issuecomment-444890710\r\n\r\n\"Yes, but it might be true with some extension in the future. Moreover, authenticating the whole header is just good practice.\"\r\n\r\nI simply just don't see the justification, to complicate RFC6347 MAC calculations.\r\n",
              "createdAt": "2019-01-31T08:55:21Z",
              "updatedAt": "2019-01-31T08:55:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NDgyMDc5",
          "commit": {
            "abbreviatedOid": "7e84fa4"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-31T09:03:07Z",
          "updatedAt": "2019-01-31T09:03:08Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "> There is no new \"payload length obfuscation\" use case that is enabled by this change.\r\n\r\nIn my opinion, this https://github.com/tlswg/dtls-conn-id/issues/22#issuecomment-458758785 indicates, that it is a use-case :-).\r\n\r\nTherefore I started #40 .",
              "createdAt": "2019-01-31T09:03:08Z",
              "updatedAt": "2019-01-31T09:03:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 30,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQxMjAzMzk5",
      "title": "Updated example",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/30",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-12-27T18:32:23Z",
      "updatedAt": "2019-01-29T09:14:23Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "example",
      "headRefOid": "bb200aa10c3099e299fa35ce7d789b374e341794",
      "closedAt": "2019-01-29T09:14:22Z",
      "mergedAt": "2019-01-29T09:14:22Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "2bbeebc9cf7d3d101d73bb5e8db5c3c1f11ab674"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg4NDk4MTY3",
          "commit": {
            "abbreviatedOid": "b613cb8"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-12-31T13:48:59Z",
          "updatedAt": "2018-12-31T13:48:59Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Please add a comment to clarify issue #22.\r\nShould the new record layer be used (https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-layer-extensions), even if the cid is empty? Or should the RFC6347 record layer be used?",
              "createdAt": "2018-12-31T13:48:59Z",
              "updatedAt": "2019-01-29T09:13:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMjQ4NTYz",
          "commit": {
            "abbreviatedOid": "b613cb8"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-14T16:43:17Z",
          "updatedAt": "2019-01-14T16:43:18Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "The empty cid is done in PR #35. Thanks!",
              "createdAt": "2019-01-14T16:43:17Z",
              "updatedAt": "2019-01-29T09:13:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODQ1ODg0",
          "commit": {
            "abbreviatedOid": "b613cb8"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-27T21:16:48Z",
          "updatedAt": "2019-01-27T21:16:48Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "This footnoting seems confusing. Why not just mark messages which have a CID with the CID.",
              "createdAt": "2019-01-27T21:16:48Z",
              "updatedAt": "2019-01-29T09:13:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 31,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQxMjAzNDI0",
      "title": "Updated contributor section",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/31",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-12-27T18:32:37Z",
      "updatedAt": "2019-01-29T09:04:04Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "contributors",
      "headRefOid": "6a216bb3c17b8a426f3208dddeab90d6d539e341",
      "closedAt": "2019-01-29T09:04:04Z",
      "mergedAt": "2019-01-29T09:04:04Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "554dd558203cff04e49b7312f72adff262eb5101"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The author change requires chair approval. @chris-wood, @seanturner @jsalowey .\r\n\r\nI would suggest you split out the editor-discretion contributor changes.",
          "createdAt": "2019-01-27T21:13:56Z",
          "updatedAt": "2019-01-27T21:13:56Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODQ1OTg4",
          "commit": {
            "abbreviatedOid": "a584556"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-01-27T21:19:48Z",
          "updatedAt": "2019-01-27T21:19:48Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODQ2MTU0",
          "commit": {
            "abbreviatedOid": "a584556"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "My apologies -- I pulled the trigger too soon. We do not feel it's appropriate to add a new author. Removing one is fine.",
          "createdAt": "2019-01-27T21:23:46Z",
          "updatedAt": "2019-01-27T21:23:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQyNjY0MzAz",
      "title": "Minor editorial changes",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/32",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-01-07T13:52:36Z",
      "updatedAt": "2019-01-29T09:19:01Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2bbeebc9cf7d3d101d73bb5e8db5c3c1f11ab674",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "editorial",
      "headRefOid": "05b4fe685a73f65c5e5aeb82fed45556e35d0f2a",
      "closedAt": "2019-01-29T09:19:01Z",
      "mergedAt": "2019-01-29T09:19:01Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "fa90aa18cfaf76fc2e0d1378e45cc2bbc70096f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODQ1NTY2",
          "commit": {
            "abbreviatedOid": "577db85"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-01-27T21:08:48Z",
          "updatedAt": "2019-01-27T21:08:57Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "These commas are actually wrong. Commas indicate a nonrestrictive clause, but this is restrictive.",
              "createdAt": "2019-01-27T21:08:48Z",
              "updatedAt": "2019-01-29T09:18:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 33,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQyNjY0ODM3",
      "title": "IANA TLS ContentType Registry allocation fix",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/33",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-01-07T13:54:44Z",
      "updatedAt": "2019-01-27T21:09:19Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "iana",
      "headRefOid": "0b4111ae37039426552d68c526589888747bf736",
      "closedAt": "2019-01-27T21:09:19Z",
      "mergedAt": "2019-01-27T21:09:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5d42be50201b94dd05cf57cfa905ff035969d068"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQyNjc4Njgw",
      "title": "Rewrite of the Record  Layer Description",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/34",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-01-07T14:44:19Z",
      "updatedAt": "2019-01-29T09:29:23Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "fa90aa18cfaf76fc2e0d1378e45cc2bbc70096f4",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "record-format",
      "headRefOid": "2835b2662c3a8a1a52667ae7266ac1e572347965",
      "closedAt": "2019-01-29T09:29:23Z",
      "mergedAt": "2019-01-29T09:29:23Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "4dd56c9a17136511489e3ef374a2afa6b65f8074"
      },
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Trying to address https://github.com/tlswg/dtls-conn-id/issues/17 but also trying to expand the description  a bit for clarity.",
          "createdAt": "2019-01-07T14:45:34Z",
          "updatedAt": "2019-01-07T14:45:34Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODQ2MDA5",
          "commit": {
            "abbreviatedOid": "99cd865"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-01-27T21:20:28Z",
          "updatedAt": "2019-01-27T21:21:24Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "Please fix these tabs. We use spaces.",
              "createdAt": "2019-01-27T21:20:28Z",
              "updatedAt": "2019-01-29T09:29:06Z"
            },
            {
              "originalPosition": 81,
              "body": "Rogue tab.",
              "createdAt": "2019-01-27T21:20:45Z",
              "updatedAt": "2019-01-29T09:29:06Z"
            },
            {
              "originalPosition": 136,
              "body": "Also, you can't use it with DTLS anyway at this point",
              "createdAt": "2019-01-27T21:21:20Z",
              "updatedAt": "2019-01-29T09:29:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 35,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQyNjgxMjk5",
      "title": "Record Layer Clarification",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/35",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Concerning the use the connection_id=empty",
      "createdAt": "2019-01-07T14:53:25Z",
      "updatedAt": "2019-02-07T12:22:48Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2c904329eb7afebc17251ad62ba1457ef0002d7d",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "record-layer-clarification",
      "headRefOid": "bf671c3b0991b0e1129859036568f25381eaae64",
      "closedAt": "2019-02-07T12:22:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Mon, Jan 28, 2019 at 12:45 AM Achim Kraus <notifications@github.com>\nwrote:\n\n> *@boaks* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-dtls-connection-id.md\n> <https://github.com/tlswg/dtls-conn-id/pull/35#discussion_r251320406>:\n>\n> > @@ -140,6 +140,14 @@ indicates that the server will send with the client's CID but does not\n>  wish the client to use a CID (or again, alternately, to use a\n>  zero-length CID).\n>\n> +Whenever a zero-length CID has been negotiated then the RFC 6347-defined\n>\n> If the CID presence/absence doesn't match what was negotiated, that's a\n> MAC error\n>\n> I'm not sure about that. If in \"Absence\" a RFC6347 record is used, and it\n> matches the right connection with the address:port, this will not cause a\n> MAC error (it's a valid RFC6347 MAC). instead, if the \"cid requires cid\"\n> (see #28 <https://github.com/tlswg/dtls-conn-id/issues/28>) should be\n> implemented and a packet with a record without CID MUST be dropped, that\n> will be an (easy) additional check.\n>\n\nMAC error is the generic failure for \"malformed packet\"\n\n\u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/pull/35#discussion_r251320406>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oaL_5rZDyzbmtkTVfFu3E_D403qIks5vHri8gaJpZM4Zzo7N>\n> .\n>\n",
          "createdAt": "2019-01-28T11:34:46Z",
          "updatedAt": "2019-01-28T11:34:46Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, so it's **assumed** to be an MAC error and processed as that.",
          "createdAt": "2019-01-28T12:14:44Z",
          "updatedAt": "2019-01-28T12:17:21Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "In a discussion with Achim we came to a conclusion on the use of CIDs for handshake messages, see https://github.com/tlswg/dtls-conn-id/issues/23\r\n\r\nRegarding the MAC calculation there are two design approaches: \r\n\r\nApproach I: \r\n  - If datagram contains new content type then use new MAC calculation.\r\n  - if datagram uses regular content type then use previous MAC calculation. \r\n\r\nApproach II: \r\n  - If a CID was negotiated (regardless whether it is actually used by both parties) then the new MAC calculation is used (irrespectively of what content type is used in the datagram).\r\n\r\nWhat do you prefer? ",
          "createdAt": "2019-02-01T10:29:16Z",
          "updatedAt": "2019-02-01T10:29:16Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer approach I.\r\n\r\nFor approach II I would appreciate, If the arguments would be explicitly expressed and examples are provided, which shows the positive effect.\r\n",
          "createdAt": "2019-02-01T11:39:23Z",
          "updatedAt": "2019-02-01T11:39:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Fri, Feb 1, 2019 at 2:29 AM Hannes Tschofenig <notifications@github.com>\nwrote:\n\n> In a discussion with Achim we came to a conclusion on the use of CIDs for\n> handshake messages, see #23\n> <https://github.com/tlswg/dtls-conn-id/issues/23>\n>\n> Regarding the MAC calculation there are two design approaches:\n>\n> Approach I:\n>\n>    - If datagram contains new content type then use new MAC calculation.\n>    - if datagram uses regular content type then use previous MAC\n>    calculation.\n>\n>\nI agree with this, except that it should be an error to use a content type\nincompatible with the CID negotiated.\n\n\n>\n> Approach II:\n>\n>    - If a CID was negotiated (regardless whether it is actually used by\n>    both parties) then the new MAC calculation is used (irrespectively of what\n>    content type is used in the datagram).\n>\n> What do you prefer?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/pull/35#issuecomment-459677735>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1ofMDIZFBFEimx4fo3JyJ_2_I5uxjks5vJBb8gaJpZM4Zzo7N>\n> .\n>\n",
          "createdAt": "2019-02-01T15:40:07Z",
          "updatedAt": "2019-02-01T15:40:07Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I agree with this, except that it should be an error to use a content type incompatible with the CID negotiated.\r\n\r\nThough the discussion details are here\r\n\r\nhttps://github.com/tlswg/dtls-conn-id/pull/29#discussion_r252569064\r\n\r\nthe part \r\n\r\n> if datagram uses regular content type then use previous MAC calculation.\r\n\r\nis used for empty CIDs.\r\n",
          "createdAt": "2019-02-01T16:03:17Z",
          "updatedAt": "2019-02-01T16:03:17Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#43 (case 2 there) may indicate \"alternative III\":\r\n\r\nIf the peers negotiate to use CID, all datagram contains new content type and use the new MAC calculation, even if a empty CID is negotiated. If a empty CID is used, naturally the address:port is used to lookup the connection.",
          "createdAt": "2019-02-03T07:49:26Z",
          "updatedAt": "2019-02-03T07:49:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg5OTg5ODc4",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-07T20:58:08Z",
          "updatedAt": "2019-01-07T20:59:29Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think that you need to explicitly mention the MAC calculation in this paragraph.  A zero-length CID will naturally look the same on the wire, it's how the MAC is calculated is the real trap here.\r\n\r\n",
              "createdAt": "2019-01-07T20:58:08Z",
              "updatedAt": "2019-01-07T20:59:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxMDk1NTE2",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-10T08:44:35Z",
          "updatedAt": "2019-01-10T08:44:36Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> A zero-length CID will naturally look the same on the wire\r\n\r\nI didn't get it. A zero-length CID uses the RFC6347 record layer and so the types used are defined in https://tools.ietf.org/html/rfc5246#section-6.2.1 \r\n\r\n```\r\nenum {\r\nchange_cipher_spec(20), alert(21), handshake(22),\r\napplication_data(23), (255)\r\n} ContentType;\r\n```\r\n\r\nif the cid is none-empty, the `type` is the new one `tls12_cid(25)`.\r\n\r\nSo I'm not sure, do you have a use-case, which makes a difference using a empty cid or no cid? I can't see the benefit in distinguish that. ",
              "createdAt": "2019-01-10T08:44:36Z",
              "updatedAt": "2019-01-10T08:44:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODQ2Mzg2",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-27T21:29:54Z",
          "updatedAt": "2019-01-27T21:29:55Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "ISTM that the right way to interpret this is:\r\n\r\n- The type field indicates whether CID is present\r\n- You then use the CID and/or address information to look up the connection\r\n- If the CID presence/absence doesn't match what was negotiated, that's a MAC error\r\n- You then use the MAC algorithm associated with expected presence or absence.\r\n\r\nThis resolves two contentions points:\r\n\r\n1. Ambiguity about the MAC\r\n2. Mixed CID and non-CID packets.",
              "createdAt": "2019-01-27T21:29:55Z",
              "updatedAt": "2019-01-27T21:29:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODcxMTU1",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-28T04:04:46Z",
          "updatedAt": "2019-01-28T04:04:46Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This looks like a good way forward,  can we clarify this in the PR? ",
              "createdAt": "2019-01-28T04:04:46Z",
              "updatedAt": "2019-01-28T04:04:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2ODk1NzQ2",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-28T07:07:16Z",
          "updatedAt": "2019-01-28T07:07:16Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Would it be possible, that the use of \"empty CIDs\" could be addressed explicit?\r\n\r\nMy impression is, before introducing the `uint8 zeros[length_of_padding] ` an empty CID in the extension was used by a client to indicate, that the client will be able to accept a CID from the server. It was not to force the server to use the new record layer when sending data to the client even with a empty CID.\r\n\r\nWith the introduction of the new record layer with the `uint8 zeros[length_of_padding] `, this draft has a additional functionality, it could be used to obfuscate the payload length. So, if this extension is not only intended to solve the address (NAT) issue, and it is intended to offer such a \"payload length  obfuscation\", then that should be made more explicit.\r\n \r\n\r\n",
              "createdAt": "2019-01-28T07:07:16Z",
              "updatedAt": "2019-01-28T07:07:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2OTIxNTA4",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-28T08:45:47Z",
          "updatedAt": "2019-01-28T08:45:48Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> If the CID presence/absence doesn't match what was negotiated, that's a MAC error\r\n\r\nI'm not sure about that. If in \"Absence\" a RFC6347 record is used, and it matches the right connection with the address:port, this will not cause a MAC error (it's a valid RFC6347 MAC). instead, if the \"cid requires cid\" (see #28) should be implemented and a packet with a record without CID MUST be dropped, that will be an (easy) additional check. \r\n",
              "createdAt": "2019-01-28T08:45:47Z",
              "updatedAt": "2019-01-28T08:45:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2OTMzNzc3",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-28T09:18:06Z",
          "updatedAt": "2019-01-28T09:18:06Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> If the CID presence/absence doesn't match what was negotiated, that's a MAC error\r\n\r\nFMPOV, that would only be true, if https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-payload-protection applies for **all** records, not only tls_cid.\r\n \r\n> Moreover, authenticating the whole header is just good practice.\r\n\r\nIf the new MAC is applied independent from the record type, the cid-values are not from the header.\r\n\r\nBut I would prefer a interpretation, where the new MAC is bound to the new record type.\r\n",
              "createdAt": "2019-01-28T09:18:06Z",
              "updatedAt": "2019-01-28T09:18:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk2OTYwMDYz",
          "commit": {
            "abbreviatedOid": "bf671c3"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-28T10:18:10Z",
          "updatedAt": "2019-01-28T10:18:11Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> If the CID presence/absence doesn't match what was negotiated, that's a MAC error\r\n\r\nOr is the intention to **assume**, that's a MAC error (and be processed as such a MAC error). But it's not an error caused by the calculation of the MAC, because the MAC of a RFC6347 record would be valid for itself.\r\n",
              "createdAt": "2019-01-28T10:18:10Z",
              "updatedAt": "2019-01-28T10:18:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ4MTAxNDIz",
      "title": "adding cw as chair in ack section",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/37",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-01-28T11:15:55Z",
      "updatedAt": "2019-01-29T07:48:51Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "763a2b5966bb6640abd61c1b14b877fc7ba45c29",
      "headRepository": "seanturner/dtls-conn-id",
      "headRefName": "chairs",
      "headRefOid": "4e36d084bbba0480b1e99b893f16c47115bab6ed",
      "closedAt": "2019-01-29T07:48:51Z",
      "mergedAt": "2019-01-29T07:48:51Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "b089d7299df483392fe144a8a9acf9779f9464fe"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 38,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ4MTAzNzY3",
      "title": "Adding Xinxing as contributor",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/38",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Minor tweak to contributors section and adding Xinxing there.",
      "createdAt": "2019-01-28T11:23:47Z",
      "updatedAt": "2019-01-29T09:05:49Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "554dd558203cff04e49b7312f72adff262eb5101",
      "headRepository": "seanturner/dtls-conn-id",
      "headRefName": "contributors",
      "headRefOid": "7f336d55137a7495434fe7aa67377a867838da51",
      "closedAt": "2019-01-29T09:05:48Z",
      "mergedAt": "2019-01-29T09:05:48Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "5db1ad8033b4b7a48998247250297ae7f5cdd44e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 39,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ4NDc1OTQy",
      "title": "Tobias",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/39",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-01-29T11:48:01Z",
      "updatedAt": "2019-01-29T11:49:20Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "4dd56c9a17136511489e3ef374a2afa6b65f8074",
      "headRepository": "seanturner/dtls-conn-id",
      "headRefName": "tobias",
      "headRefOid": "7f6fa5e9de906e8559b3955ed6100386a9229ada",
      "closedAt": "2019-01-29T11:49:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Moved to contributors section.",
          "createdAt": "2019-01-29T11:49:20Z",
          "updatedAt": "2019-01-29T11:49:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ4NTU4MTEx",
      "title": "Move exposition",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/41",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Alternative approach to PR #19",
      "createdAt": "2019-01-29T15:51:16Z",
      "updatedAt": "2019-02-12T10:38:00Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "4dd56c9a17136511489e3ef374a2afa6b65f8074",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-exposition",
      "headRefOid": "1173d0939f584fa57e023048f0834f585e4f09f1",
      "closedAt": "2019-02-04T03:23:14Z",
      "mergedAt": "2019-02-04T03:23:14Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "07fd457991813990d449dec8a2b1f87f55b5f7d1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3ODQ5NTg1",
          "commit": {
            "abbreviatedOid": "1173d09"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-01-30T00:10:05Z",
          "updatedAt": "2019-01-30T00:10:05Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5NDEwNjA4",
          "commit": {
            "abbreviatedOid": "1173d09"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-02-03T23:04:00Z",
          "updatedAt": "2019-02-03T23:04:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ5MjgzNzgw",
      "title": "Harmonized terminology for CID",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/42",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-01-31T15:14:37Z",
      "updatedAt": "2019-02-07T10:49:23Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "07fd457991813990d449dec8a2b1f87f55b5f7d1",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-terminology",
      "headRefOid": "55ab6cf17bbfbc127e6979ba0dc0ee43aa00d001",
      "closedAt": "2019-02-07T10:49:17Z",
      "mergedAt": "2019-02-07T10:49:17Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "2b13775ea041746cf748e4875c283fc9815fc82b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NzA1MTYw",
          "commit": {
            "abbreviatedOid": "1282a23"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-01-31T17:01:58Z",
          "updatedAt": "2019-01-31T17:01:58Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NzA1MzUw",
          "commit": {
            "abbreviatedOid": "1282a23"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-31T17:02:19Z",
          "updatedAt": "2019-01-31T17:02:35Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "s/CID/CIDs?",
              "createdAt": "2019-01-31T17:02:19Z",
              "updatedAt": "2019-02-04T03:24:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NzkyODg3",
          "commit": {
            "abbreviatedOid": "1282a23"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-01-31T20:16:08Z",
          "updatedAt": "2019-01-31T20:16:09Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Why is \"Connection ID (CID)\" used instead of the above already introduced \"CID\" ?",
              "createdAt": "2019-01-31T20:16:09Z",
              "updatedAt": "2019-02-04T03:24:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5MzE3NjU1",
          "commit": {
            "abbreviatedOid": "f598eaa"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I don't think that you need to change the grammar. ",
          "createdAt": "2019-02-02T00:18:02Z",
          "updatedAt": "2019-02-02T00:19:02Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "I think that the old form is better.",
              "createdAt": "2019-02-02T00:18:02Z",
              "updatedAt": "2019-02-04T03:24:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5Mzc4Mjc1",
          "commit": {
            "abbreviatedOid": "c61981c"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-03T08:50:14Z",
          "updatedAt": "2019-02-03T08:50:15Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Changed the name back to ConnectionId",
              "createdAt": "2019-02-03T08:50:14Z",
              "updatedAt": "2019-02-04T03:24:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 44,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUxMDkyNDcy",
      "title": "Rewrite of the record layer and MAC text",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/44",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Text to address the discussion in https://github.com/tlswg/dtls-conn-id/pull/35",
      "createdAt": "2019-02-07T12:14:50Z",
      "updatedAt": "2019-02-27T19:10:56Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2b13775ea041746cf748e4875c283fc9815fc82b",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "record-layer-new",
      "headRefOid": "4d72dc77d667371fcbe49cf4da8fd2f79937fc10",
      "closedAt": "2019-02-27T19:10:56Z",
      "mergedAt": "2019-02-27T19:10:56Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "88ab57d40cdeaf2afaba13b7d1d04dcc2c637204"
      },
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Completely re-wrote PR #35 ",
          "createdAt": "2019-02-07T12:23:21Z",
          "updatedAt": "2019-02-07T12:23:21Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Great work! So alternative I made it, right?",
          "createdAt": "2019-02-07T15:02:27Z",
          "updatedAt": "2019-02-07T15:02:27Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "We now have to wait for Martin, Thomas, and Ekr to agree that the proposed changes are inline with their thinking and then I would submit a new version of the draft for the working group to look at.\r\n",
          "createdAt": "2019-02-08T17:17:11Z",
          "updatedAt": "2019-02-08T17:17:11Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Martin wrote: \r\n\r\n> I would slightly prefer to have zero- length CID mean use of the new content type, with the associated privacy enhancement\r\n\r\nSo proposal has not been made so far. We should discuss this idea. This is a new privacy-enhancing feature that does not necessarily have anything to do with the CID idea. In some sense this would allow the client and the server to negotiate the use of a traffic obfuscation technique.\r\n\r\nAchim, Ekr, Martin, etc. -- what do you think? ",
          "createdAt": "2019-02-12T10:05:22Z",
          "updatedAt": "2019-02-12T10:05:22Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So proposal has not been made so far.\r\n\r\nThat's the discussions in issues #22 and #43  \r\nI linked to that issue #43 in the previous PR #35 as \"Alternative III\"\r\nhttps://github.com/tlswg/dtls-conn-id/pull/35#issuecomment-460030833\r\n\r\nTo follow up the discussion is really difficult and time intensive. There is also one change left here\r\nhttps://github.com/tlswg/dtls-conn-id/issues/26#issuecomment-459706334\r\n\r\nThat request to use the first CID not in FINISH and instead in the record after that.\r\n\r\n",
          "createdAt": "2019-02-12T10:14:28Z",
          "updatedAt": "2019-02-12T10:14:28Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This is a new privacy-enhancing feature that does not necessarily have anything to do with the CID idea. \r\n\r\nI agree, this adds a new use-case to this draft and is not related to the CID idea.\r\nIt's related to the usage of the new introduced record type.\r\n\r\nI created a issue about the scope of this draft #40 , which mentions that additional use-case. \r\nIn the meantime I closed that scope issue. My current impression is, that the discussions are split and really hard to follow. Therefore I closed my additional issues in hope, that focus on the CID idea makes it possible to \"release\" this draft sooner.\r\n",
          "createdAt": "2019-02-12T11:36:51Z",
          "updatedAt": "2019-02-12T11:36:51Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "You are correct. The proposal has been made before. I was confused....\r\n\r\n",
          "createdAt": "2019-02-12T16:34:42Z",
          "updatedAt": "2019-02-12T16:34:42Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Achim, do you prefer to use \"alternative III\" instead of what I wrote-up today?",
          "createdAt": "2019-02-12T16:36:08Z",
          "updatedAt": "2019-02-12T16:36:08Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Btw, I added notes to the draft about the additional privacy features. So, I believe I captured the scope issue you raised. ",
          "createdAt": "2019-02-12T16:37:20Z",
          "updatedAt": "2019-02-12T16:37:20Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Achim, do you prefer to use \"alternative III\" instead of what I wrote-up today?\r\n\r\nI prefer any of the solutions! The difference between the flavours is for me much smaller, than the difference in shifting the timelines would be.\r\n\r\n> Ekr, Martin, etc. -- \r\n\r\nFor me, Hannes did a really great job. \r\nIt would be also great, if you can give your \"final\" votes to give him a chance to finalize his work :-).\r\n",
          "createdAt": "2019-02-12T16:45:07Z",
          "updatedAt": "2019-02-12T16:45:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can live with that proposal as well, as long as we agree that it's a\nviolation to send an empty CID when one is expected.\n\nOn Tue, Feb 12, 2019 at 2:05 AM Hannes Tschofenig <notifications@github.com>\nwrote:\n\n> Martin wrote:\n>\n> I would slightly prefer to have zero- length CID mean use of the new\n> content type, with the associated privacy enhancement\n>\n> So proposal has not been made so far. We should discuss this idea. This is\n> a new privacy-enhancing feature that does not necessarily have anything to\n> do with the CID idea. In some sense this would allow the client and the\n> server to negotiate the use of a traffic obfuscation technique.\n>\n> Achim, Ekr, Martin, etc. -- what do you think?\n>\n> \u2014\n> You are receiving this because your review was requested.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/pull/44#issuecomment-462696873>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oaoevyUpe-an0k0KgVYgn2TeJlEAks5vMpHkgaJpZM4anKwA>\n> .\n>\n",
          "createdAt": "2019-02-13T00:45:22Z",
          "updatedAt": "2019-02-13T00:45:22Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I can live with that proposal as well, as long as we agree that it's a violation to send an empty CID when one is expected.\r\n\r\nThe idea was to use the new record type even if an empty CID is negotiated. \r\nIf a none empty CID is negotiated, then this none empty CID has to be used. \r\nThe mentioned \"violation\" was, at least from my understand, not intended. ",
          "createdAt": "2019-02-13T06:57:56Z",
          "updatedAt": "2019-02-13T06:57:56Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fine! \r\nAFAIK all discussion about features/scope are concluded with that!\r\nFMPOV #43, #23. #22 are fixed, when this PR is merged.\r\n\r\n#18 will then be the only open issue, asking for implementations :-). ",
          "createdAt": "2019-02-14T14:34:52Z",
          "updatedAt": "2019-02-14T14:34:52Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Uups, I think, I got a very late catch:\r\n\r\nhttps://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#record-layer-extensions-and-record-payload-protection\r\n\r\n> cid_length : 1 byte field indicating the length of the negotiated CID. If a zero-length CID has been negotiated, and therefore no CID appears on the wire, a cid_length of zero (0) MUST be added.\r\n\r\n**If a zero-length CID has been negotiated, and therefore no CID appears on the wire, a cid_length of zero (0) MUST be added.** \r\n\r\nIs not longer valid!\r\n\r\nFor a empty CID, the RFC6347 record is used with the RFC6347 MAC and not the new MAC.",
          "createdAt": "2019-02-14T16:47:39Z",
          "updatedAt": "2019-02-14T16:52:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAxMTMxNjM1",
          "commit": {
            "abbreviatedOid": "1dc8e9f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-07T14:59:37Z",
          "updatedAt": "2019-02-07T14:59:38Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "I'm not sure, why \"Is not possible to parse the records without knowing how long the CID is.\" is kept. I tried to address my concerns in #27 . But this may be considered as independent from this PR.\r\n",
              "createdAt": "2019-02-07T14:59:37Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAxNDgwNTQ4",
          "commit": {
            "abbreviatedOid": "1dc8e9f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-08T09:02:39Z",
          "updatedAt": "2019-02-08T09:02:39Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Maybe it would be better to say that there is no CID length information included in the record itself. I think this would clarify the issue. Do you agree?",
              "createdAt": "2019-02-08T09:02:39Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAxNTczODMz",
          "commit": {
            "abbreviatedOid": "1dc8e9f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-08T13:19:57Z",
          "updatedAt": "2019-02-08T13:19:57Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Yes, that sounds good.",
              "createdAt": "2019-02-08T13:19:57Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyMzE1MTE5",
          "commit": {
            "abbreviatedOid": "4178204"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "So I would slightly prefer to have zero- length CID mean use of the new content type, with the associated privacy enhancement, but this is fine. ",
          "createdAt": "2019-02-11T20:13:08Z",
          "updatedAt": "2019-02-11T20:17:56Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "What about renegotiation? ",
              "createdAt": "2019-02-11T20:13:08Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 77,
              "body": "6347 record format AND content type",
              "createdAt": "2019-02-11T20:14:20Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 85,
              "body": "And content type",
              "createdAt": "2019-02-11T20:15:10Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 103,
              "body": "+ - The MAC calculation follows the process described in {{}}.",
              "createdAt": "2019-02-11T20:16:21Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyNTc4NzM1",
          "commit": {
            "abbreviatedOid": "4178204"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T10:06:47Z",
          "updatedAt": "2019-02-12T10:06:47Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Good question. We don't use renegotiation in IoT deployments. It would be interesting to hear from someone who uses renegotation in the IoT context about what the expected behavior should be.",
              "createdAt": "2019-02-12T10:06:47Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyNzc4MzU3",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T16:42:08Z",
          "updatedAt": "2019-02-12T16:42:09Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "Updated text",
              "createdAt": "2019-02-12T16:42:09Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyNzc4NDIy",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T16:42:15Z",
          "updatedAt": "2019-02-12T16:42:15Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "updated text",
              "createdAt": "2019-02-12T16:42:15Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyNzc4NTA3",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T16:42:23Z",
          "updatedAt": "2019-02-12T16:42:24Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "updated text",
              "createdAt": "2019-02-12T16:42:23Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyODEyODk2",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T17:45:48Z",
          "updatedAt": "2019-02-12T17:45:48Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Just to mention:\r\nFor that feature it would make sense, to use the new record type even if the CID is empty.\r\nThat's what the issues #43 and the discussion in #22 is about.\r\n\r\nAs already commented, I have no preference. ",
              "createdAt": "2019-02-12T17:45:48Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzMTM4Nzgx",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-13T10:43:03Z",
          "updatedAt": "2019-02-13T12:06:49Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "s/ongoing/outgoing/",
              "createdAt": "2019-02-13T10:43:03Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 74,
              "body": "To be sure I'd make this a MUST (and the following a MUST NOT) as this is necessary to interop.\r\n\r\nI'd also add some more precision about the exact message where we expect the first CID to appear.",
              "createdAt": "2019-02-13T11:17:38Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzNjg1OTc0",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-14T11:08:49Z",
          "updatedAt": "2019-02-14T11:08:49Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "What about saying for now \"When a DTLS session is resumed or renegotiated, the \"connection_id\" extension is negotiated afresh.\"?",
              "createdAt": "2019-02-14T11:08:49Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzNjg2NTU5",
          "commit": {
            "abbreviatedOid": "2f2d5ae"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-14T11:10:21Z",
          "updatedAt": "2019-02-14T11:10:21Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "OK. Fixed.",
              "createdAt": "2019-02-14T11:10:21Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA0MDMxODcx",
          "commit": {
            "abbreviatedOid": "224d0db"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-15T00:04:39Z",
          "updatedAt": "2019-02-15T00:07:21Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Add the zero-length CID thing here.",
              "createdAt": "2019-02-15T00:04:39Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 67,
              "body": "Add non-zero-length here.",
              "createdAt": "2019-02-15T00:05:00Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 73,
              "body": "With the above adjustments, this is simply: DTLS peers use the new content type, record format, and MAC calculation for all protected records.",
              "createdAt": "2019-02-15T00:05:58Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 79,
              "body": "Why limit this with \"for sending\"?",
              "createdAt": "2019-02-15T00:06:21Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 110,
              "body": "```suggestion\r\n- The CID field is present and contains one or more bytes.\r\n```",
              "createdAt": "2019-02-15T00:07:01Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA0MDkxMTk1",
          "commit": {
            "abbreviatedOid": "224d0db"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-15T06:05:51Z",
          "updatedAt": "2019-02-15T06:05:51Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Please explain \"all protected records\". \r\nA RFC6347 record may be considered to be protected as well.",
              "createdAt": "2019-02-15T06:05:51Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA0MTA5MDQx",
          "commit": {
            "abbreviatedOid": "224d0db"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-15T07:32:02Z",
          "updatedAt": "2019-02-15T07:32:02Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Pay special attention to the context.  Which is when a non-zero-length CID is negotiated.",
              "createdAt": "2019-02-15T07:32:02Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3Mjk2MjYw",
          "commit": {
            "abbreviatedOid": "224d0db"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-25T09:46:07Z",
          "updatedAt": "2019-02-25T09:46:08Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "I wrote the text in a way that it talks about sending and receiving. This is just a writing style. ",
              "createdAt": "2019-02-25T09:46:08Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3MzA5MDQw",
          "commit": {
            "abbreviatedOid": "be69792"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-25T10:12:50Z",
          "updatedAt": "2019-02-25T10:12:50Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I don't think I need to add extra text at this point in the description since I talk about the non-zero length case a few sentences later. ",
              "createdAt": "2019-02-25T10:12:50Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3MzA5NTQ2",
          "commit": {
            "abbreviatedOid": "be69792"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-25T10:13:57Z",
          "updatedAt": "2019-02-25T10:13:57Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "We could try to shorten the text but currently the style is similar to how Ekr described our conclusion in his email. I liked the way of separating the sending and the receiving processing description. ",
              "createdAt": "2019-02-25T10:13:57Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA3MzEwNTg0",
          "commit": {
            "abbreviatedOid": "9406c3e"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-25T10:16:05Z",
          "updatedAt": "2019-02-25T10:16:05Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "But we are not going to add extra functionality in DTLS 1.2 when we already have the same features in 1.3",
              "createdAt": "2019-02-25T10:16:05Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4NTg0Mjk1",
          "commit": {
            "abbreviatedOid": "9406c3e"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-02-27T15:22:03Z",
          "updatedAt": "2019-02-27T15:49:36Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "nit: perhaps rewrite to \"This document assumes familiarity with DTLS 1.2 {{RFC6347}}.\"?",
              "createdAt": "2019-02-27T15:22:03Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 92,
              "body": "nit: s/and the new content type/and tls12_cid content type",
              "createdAt": "2019-02-27T15:28:19Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 90,
              "body": "Rather than check for a zero length CID, should we say that the recipient datagram MUST adhere to the format in RFC6347, else be dropped?",
              "createdAt": "2019-02-27T15:30:33Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 92,
              "body": "When reading this condition one might assume that it's possible to receive a datagram with the new record format but without the new content type. Should we instead fold this together and say that (a) if the new content type is used then the new record format MUST also be in effect, and (b) if the new content type is not used then the old record format MUST be used?",
              "createdAt": "2019-02-27T15:32:06Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            },
            {
              "originalPosition": 165,
              "body": "Should we reference RFC8446 for more details about this padding and its traffic analysis implications?",
              "createdAt": "2019-02-27T15:33:18Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4NjEyMDg2",
          "commit": {
            "abbreviatedOid": "9406c3e"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T16:05:58Z",
          "updatedAt": "2019-02-27T16:05:58Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "The check is done against the associated \"connection and security association\" (the negotiated CID), not the received record.",
              "createdAt": "2019-02-27T16:05:58Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4NjIxMzEz",
          "commit": {
            "abbreviatedOid": "9406c3e"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T16:21:13Z",
          "updatedAt": "2019-02-27T16:21:14Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "Ah! Thanks for the clarification.",
              "createdAt": "2019-02-27T16:21:13Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4Njc2NDQ4",
          "commit": {
            "abbreviatedOid": "9406c3e"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T18:00:44Z",
          "updatedAt": "2019-02-27T18:00:44Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Yes. A reference to RFC8446 makes sense here. ",
              "createdAt": "2019-02-27T18:00:44Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4Njc4NDM3",
          "commit": {
            "abbreviatedOid": "ec321c0"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T18:04:56Z",
          "updatedAt": "2019-02-27T18:04:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Sounds good. ",
              "createdAt": "2019-02-27T18:04:56Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4Njc5MDgx",
          "commit": {
            "abbreviatedOid": "ec321c0"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T18:06:10Z",
          "updatedAt": "2019-02-27T18:06:10Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Fixed. ",
              "createdAt": "2019-02-27T18:06:10Z",
              "updatedAt": "2019-02-27T18:10:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4NjgxMzk4",
          "commit": {
            "abbreviatedOid": "4d72dc7"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T18:11:02Z",
          "updatedAt": "2019-02-27T18:11:02Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "I tried to change the wording to make it more clear that the new record format and the new content type is actually the same. There is no new record format that does not contain the new content type. \r\n\r\nHave a look at the new text",
              "createdAt": "2019-02-27T18:11:02Z",
              "updatedAt": "2019-02-27T18:11:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4Njk4ODg4",
          "commit": {
            "abbreviatedOid": "4d72dc7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-02-27T18:46:48Z",
          "updatedAt": "2019-02-27T18:46:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUxMDk3MzE0",
      "title": "Updated change history",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/45",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-02-07T12:32:19Z",
      "updatedAt": "2019-02-12T16:42:54Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2b13775ea041746cf748e4875c283fc9815fc82b",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "change-history",
      "headRefOid": "657f0b53b220c36a3cc0482365b304710e9a2e46",
      "closedAt": "2019-02-12T16:42:50Z",
      "mergedAt": "2019-02-12T16:42:50Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "9584546512163e3b95a3d0ce6f20b0330ecbbf12"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 47,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5MDEyNTUw",
      "title": "Added MAC calculation for non-AEAD ciphers",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/47",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... based on https://github.com/tlswg/dtls-conn-id/issues/46",
      "createdAt": "2019-03-07T08:15:01Z",
      "updatedAt": "2019-03-11T10:57:03Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "88ab57d40cdeaf2afaba13b7d1d04dcc2c637204",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "non-aead-mac",
      "headRefOid": "2ba8c35842e15fe0e26b41341a5082364f70f9d0",
      "closedAt": "2019-03-11T10:57:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this PR since Thomas prepared a more comprehensive version in #49 ",
          "createdAt": "2019-03-11T10:57:00Z",
          "updatedAt": "2019-03-11T10:57:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExNjYyNTYy",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-07T08:59:58Z",
          "updatedAt": "2019-03-07T08:59:59Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "My feeling: for the terms used in this draft, `TLSCompressed` should be replaced by `DTLSCiphertext`, and the `cid` is a field of that.\r\n\r\n(So, sorry for my irritating comment https://github.com/tlswg/dtls-conn-id/issues/46#issuecomment-468750119. My intention was just to show, that the definitions for the modes are very similar.)",
              "createdAt": "2019-03-07T08:59:58Z",
              "updatedAt": "2019-03-07T08:59:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExNjg4NzE2",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-07T09:55:15Z",
          "updatedAt": "2019-03-07T09:55:15Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Hi Hannes\r\n\r\ngiven the TLS presentation language typically doesn't add clarity, can I suggest a different approach?  Could we just say that 'cid' and 'cid_length' are inserted between DTLSCiphertext.version and DTLSCiphertext.length in the MAC computations defined by RFC 6347 and RFC 7366 (EtM), and similarly to the authentication data defined in  RFC 6347?",
              "createdAt": "2019-03-07T09:55:15Z",
              "updatedAt": "2019-03-07T14:01:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExODY0MTM2",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-07T15:54:47Z",
          "updatedAt": "2019-03-07T15:54:47Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "When you agree on an approach please post to WGLC thread on the list.  ",
              "createdAt": "2019-03-07T15:54:47Z",
              "updatedAt": "2019-03-07T15:54:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExOTkwMzkw",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-07T19:59:38Z",
          "updatedAt": "2019-03-07T19:59:39Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I believe I actually did it wrong. I should have only extended the MAC calculation in RFC 7366.",
              "createdAt": "2019-03-07T19:59:38Z",
              "updatedAt": "2019-03-07T19:59:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExOTk1MTc3",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-07T20:09:52Z",
          "updatedAt": "2019-03-07T20:09:53Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Since we only define this for DTLS 1.2 the calculation should be: \r\n\r\n   MAC(MAC_write_key, seq_num +\r\n       TLSCipherText.type +\r\n       TLSCipherText.version +\r\n       cid + \r\n       cid_len + \r\n       TLSCipherText.length +\r\n       IV +\r\n       ENC(content + padding + padding_length));\r\n\r\nCorrect?\r\n\r\nThis also means that you have to use the Encrypt-then-MAC extension when using CBC ciphers. ",
              "createdAt": "2019-03-07T20:09:52Z",
              "updatedAt": "2019-03-07T20:33:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNTU0ODc1",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-09T09:42:59Z",
          "updatedAt": "2019-03-09T09:42:59Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "My concern is still:\r\nThis draft uses terms/definitions (`DTLSPlaintext`, `DTLSInnerPlaintext`, and `DTLSCiphertext`) and I would prefer to stay with these terms instead of cite new terms (and details) of other RFC's.\r\n\r\n> Could we just say that 'cid' and 'cid_length' are inserted between DTLSCiphertext.version and DTLSCiphertext.length in the MAC computations \r\n\r\nThat would be a generic solution, but I'm a little skeptical, which case this would cover, what the approach of this PR, adding the cid to the previous definitions, doesn't.\r\n",
              "createdAt": "2019-03-09T09:42:59Z",
              "updatedAt": "2019-03-09T09:42:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNTU0OTY2",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-09T09:47:15Z",
          "updatedAt": "2019-03-09T09:47:15Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "@ekr (sorry, I can not resist:)\r\n \r\nand you're still sure, that this discussions about including the cid into the MAC for \r\n\r\nhttps://github.com/tlswg/dtls-conn-id/issues/25#issuecomment-444890710\r\n\r\n> Yes, but it might be true with some extension in the future. Moreover, authenticating the whole header is just good practice. \r\n\r\npays off? \r\n",
              "createdAt": "2019-03-09T09:47:15Z",
              "updatedAt": "2019-03-09T09:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNTYzMjcw",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-09T14:42:36Z",
          "updatedAt": "2019-03-09T14:42:36Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I'm not sure why you think this is a useful question. The burden on spec authors is not really significant compared to the cost of having the spec wrong.",
              "createdAt": "2019-03-09T14:42:36Z",
              "updatedAt": "2019-03-09T14:43:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNTcxMDI3",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-09T18:09:42Z",
          "updatedAt": "2019-03-09T18:09:43Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "> I'm not sure why you think this is a useful question.\r\n\r\nIn #25 I tried to point out, that in my opinion, changing the MAC is not required. The final answer was, it's good practice. So the effort of all the discussions about that is paid for good practice. In my opinion, when good practice gets that expensive, the question, if the good practice really pays off, is a valid question. I was interested in your opinion about that, therefore I asked.\r\n",
              "createdAt": "2019-03-09T18:09:42Z",
              "updatedAt": "2019-03-09T18:09:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNTc4MTE0",
          "commit": {
            "abbreviatedOid": "2ba8c35"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-09T21:28:00Z",
          "updatedAt": "2019-03-09T21:28:01Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Opening with \"I can not resist\" hardly gives the impression that this is a legitimate question rather than trolling. In any case, I don't think this is particularly expensive and my opinion is unchanged.\r\n\r\n",
              "createdAt": "2019-03-09T21:28:00Z",
              "updatedAt": "2019-03-09T21:28:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5Mzg2Njc5",
      "title": "Fixed bug in Figure 1: TLSCiphertext.length -> DTLSCiphertext.length",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/48",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-03-08T07:29:57Z",
      "updatedAt": "2019-03-11T10:56:33Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "88ab57d40cdeaf2afaba13b7d1d04dcc2c637204",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-1",
      "headRefOid": "606bd00437cb0a943d28a33c7822f3d7da740f77",
      "closedAt": "2019-03-11T10:56:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5OTE4ODMw",
      "title": "MAC, EtM and AEAD record protection",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/49",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed with Hannes, this PR replaces #47 \r\n\r\nFixes #46 ",
      "createdAt": "2019-03-11T10:54:43Z",
      "updatedAt": "2019-03-11T10:57:17Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "88ab57d40cdeaf2afaba13b7d1d04dcc2c637204",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "dales-tibetan-method",
      "headRefOid": "1821e7bdd72e623401b950f283c9d81af4b95221",
      "closedAt": "2019-03-11T10:57:17Z",
      "mergedAt": "2019-03-11T10:57:16Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "972c28decd7103495210598e81e9e11859f078da"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 55,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4MTMwNDk5",
      "title": "Added history info for -04",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/55",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-04-07T19:19:21Z",
      "updatedAt": "2019-04-11T12:06:26Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "972c28decd7103495210598e81e9e11859f078da",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-2",
      "headRefOid": "2dafcbc4ea2a6711d376b71fceb72537233bff42",
      "closedAt": "2019-04-11T12:06:21Z",
      "mergedAt": "2019-04-11T12:06:21Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "5a9249a27014fa143ea10f6f35fa5485594ee9e0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUxNjA2",
          "commit": {
            "abbreviatedOid": "2dafcbc"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:08:14Z",
          "updatedAt": "2019-04-10T04:08:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4MTMxMDI0",
      "title": "Privacy Text Update",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/56",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on https://github.com/tlswg/dtls-conn-id/issues/54",
      "createdAt": "2019-04-07T19:27:40Z",
      "updatedAt": "2019-04-11T12:06:45Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "972c28decd7103495210598e81e9e11859f078da",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-3",
      "headRefOid": "d042a48a61ca02cf68ffa08ed6f66c19545202e9",
      "closedAt": "2019-04-11T12:06:42Z",
      "mergedAt": "2019-04-11T12:06:41Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "ecdf8a45dcb27ee841cd9ae6fef007d2c586778f"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! ",
          "createdAt": "2019-04-09T08:31:00Z",
          "updatedAt": "2019-04-09T08:31:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0MTk5NjA2",
          "commit": {
            "abbreviatedOid": "1463a90"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-04-09T05:36:44Z",
          "updatedAt": "2019-04-09T05:36:44Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I would prefer, to make the \"unsuitable\" conditional. Therefore I would propose to add something as \"when this possible correlation must be considered\" . \r\n\r\nMy concern here is, that with cid you can communicate perfectly in mobility scenarios, but you may get tracked. Without the condition someone easily misunderstands the \"unsuitable\", even if the scenario doesn't require \"track protection\".   ",
              "createdAt": "2019-04-09T05:36:44Z",
              "updatedAt": "2019-04-09T08:29:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUxNjkx",
          "commit": {
            "abbreviatedOid": "d042a48"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:08:59Z",
          "updatedAt": "2019-04-10T04:08:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4MTMxNjIx",
      "title": "Removed duplicate version from Block Ciphers with ETM MAC calculation",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/57",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/tlswg/dtls-conn-id/issues/50",
      "createdAt": "2019-04-07T19:37:29Z",
      "updatedAt": "2019-04-11T12:07:36Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "972c28decd7103495210598e81e9e11859f078da",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-4",
      "headRefOid": "d31704bae46d3006de4ad09a38f38f6db9d7a0f3",
      "closedAt": "2019-04-11T12:07:27Z",
      "mergedAt": "2019-04-11T12:07:27Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "f59543b3e5df8c807418850cc682d9d0c5f88ded"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! The PR fixes the typo.",
          "createdAt": "2019-04-08T19:47:00Z",
          "updatedAt": "2019-04-08T19:47:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUxODI4",
          "commit": {
            "abbreviatedOid": "d31704b"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:09:45Z",
          "updatedAt": "2019-04-10T04:09:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4MTMxODQx",
      "title": "Indicated length of length_of_DTLSInnerPlaintext field",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/58",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To address https://github.com/tlswg/dtls-conn-id/issues/51",
      "createdAt": "2019-04-07T19:41:03Z",
      "updatedAt": "2019-04-11T12:09:20Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "f59543b3e5df8c807418850cc682d9d0c5f88ded",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-5",
      "headRefOid": "032752011d27f30f6ad3d9a5fcd3dad626dab3e6",
      "closedAt": "2019-04-11T12:09:17Z",
      "mergedAt": "2019-04-11T12:09:17Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "c7bdbfcc828cf74fa40173a2ff3058599cf0ced9"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! This PR fixes the missing size of the introduced length.",
          "createdAt": "2019-04-08T19:48:23Z",
          "updatedAt": "2019-04-08T19:48:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUxOTE1",
          "commit": {
            "abbreviatedOid": "731b7ed"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:10:23Z",
          "updatedAt": "2019-04-10T04:10:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4MTMyMTYy",
      "title": "Clarifications of the CID value in the MAC calculation",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/59",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/tlswg/dtls-conn-id/issues/52",
      "createdAt": "2019-04-07T19:45:48Z",
      "updatedAt": "2019-04-11T12:10:27Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "972c28decd7103495210598e81e9e11859f078da",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-6",
      "headRefOid": "1aae3f313e3f4e17fbcd38e525b71bb4c58dccf4",
      "closedAt": "2019-04-11T12:10:13Z",
      "mergedAt": "2019-04-11T12:10:13Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "78854ba480187df91a6b2736653f97b3400644c0"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! This PR clarifies the used cid value. ",
          "createdAt": "2019-04-08T19:50:07Z",
          "updatedAt": "2019-04-08T19:50:07Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUyMDI2",
          "commit": {
            "abbreviatedOid": "1aae3f3"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:11:04Z",
          "updatedAt": "2019-04-10T04:11:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4MTMyMzc5",
      "title": "Harmonize terms for content types and version in MAC calculation",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/60",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addressing https://github.com/tlswg/dtls-conn-id/issues/53",
      "createdAt": "2019-04-07T19:48:50Z",
      "updatedAt": "2019-04-11T12:13:10Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "78854ba480187df91a6b2736653f97b3400644c0",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-7",
      "headRefOid": "fc360a65871eab6e5ded072075e01375441c9439",
      "closedAt": "2019-04-11T12:13:05Z",
      "mergedAt": "2019-04-11T12:13:05Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "db6a8e29b16152dcc247f54595317cbc7be60ace"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! This PR harmonizes the the content types.",
          "createdAt": "2019-04-08T19:51:55Z",
          "updatedAt": "2019-04-08T19:51:55Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUyMTEw",
          "commit": {
            "abbreviatedOid": "1971bbb"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:11:39Z",
          "updatedAt": "2019-04-10T04:11:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4NjI1MzE5",
      "title": "Left connection_id and tls12_cid for IANA to assign",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/61",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-04-09T08:02:16Z",
      "updatedAt": "2019-04-11T12:14:49Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "972c28decd7103495210598e81e9e11859f078da",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-8",
      "headRefOid": "0265d7ce0e82b37bc78719f864a933da63629528",
      "closedAt": "2019-04-11T12:14:44Z",
      "mergedAt": "2019-04-11T12:14:44Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "906d01a769192ce91c459677bcf0184d5852e13b"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://mailarchive.ietf.org/arch/msg/tls/TTXYlad2SExikFKwV2EuaEKvf1Q\r\n\r\nIf this PR is postponed to that date (12. April), may be the final values could be used.",
          "createdAt": "2019-04-09T08:34:02Z",
          "updatedAt": "2019-04-10T07:21:55Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUyMzQz",
          "commit": {
            "abbreviatedOid": "0265d7c"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:13:04Z",
          "updatedAt": "2019-04-10T04:13:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4NjI3MzA0",
      "title": "Clarified the purpose of the DTLSInnerPlaintext structure",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/62",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-04-09T08:08:49Z",
      "updatedAt": "2019-04-11T12:16:46Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "972c28decd7103495210598e81e9e11859f078da",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-9",
      "headRefOid": "9a1c2105a5162f6094bcc0eb4436b1f365e79696",
      "closedAt": "2019-04-11T12:16:41Z",
      "mergedAt": "2019-04-11T12:16:41Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "31b6f7d2475f825d322a40ffa00b0082eb18fdd0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0MjcwMzc2",
          "commit": {
            "abbreviatedOid": "a7f2ad5"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2019-04-09T08:50:59Z",
          "updatedAt": "2019-04-09T08:51:09Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "maybe remove \"Payload\"",
              "createdAt": "2019-04-09T08:51:00Z",
              "updatedAt": "2019-04-11T12:15:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUyOTk0",
          "commit": {
            "abbreviatedOid": "a7f2ad5"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:17:15Z",
          "updatedAt": "2019-04-10T04:17:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY4NjMwODIw",
      "title": "Clarification to the MAC calculation",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/63",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-04-09T08:19:28Z",
      "updatedAt": "2019-04-16T08:08:19Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "31b6f7d2475f825d322a40ffa00b0082eb18fdd0",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-10",
      "headRefOid": "9c72645d13f5cb38922e1f9c5c9342703fd3d7df",
      "closedAt": "2019-04-16T08:08:19Z",
      "mergedAt": "2019-04-16T08:08:19Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "50efe087752c6a77495ee5f868f0f16160ed23f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0MjYzOTIw",
          "commit": {
            "abbreviatedOid": "f59a0f4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2019-04-09T08:38:17Z",
          "updatedAt": "2019-04-09T08:38:31Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "not sure \"modern\" applies to something 10 years old at least :)",
              "createdAt": "2019-04-09T08:38:17Z",
              "updatedAt": "2019-04-16T08:07:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI0NzUyODE1",
          "commit": {
            "abbreviatedOid": "f59a0f4"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-04-10T04:16:00Z",
          "updatedAt": "2019-04-10T04:16:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg0MzAyNzYz",
      "title": "peer address update checks",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/65",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A first attempt to address #64 , as per discussion with Achim.",
      "createdAt": "2019-06-01T22:48:14Z",
      "updatedAt": "2019-07-08T17:34:19Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "50efe087752c6a77495ee5f868f0f16160ed23f8",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "address-validation",
      "headRefOid": "d3ae9a67515ad51ed3bc1776bf5d157cc4aaa037",
      "closedAt": "2019-07-08T17:34:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the first paragraph of this PR is fine, but the rest is out of scope.\r\n\r\nThe agreed upon intent of this draft is simply to allow flow identification, not to provide a generic address migration facility. That is a complicated topic that should be out of scope here.\r\n\r\n\r\n\r\n",
          "createdAt": "2019-06-01T22:53:05Z",
          "updatedAt": "2019-06-01T22:53:05Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer / appreciate, if the parts after the first paragraph would start with explaining the vulnerability and the attack, which may use it. That would setup the right scope for understanding, when a mitigation is required to protect other systems.\r\n\r\nIn the discussion #64 I tried to point out, that I would prefer to leave the mitigation to the using system and just mention the \"heartbeat\" as one solution.\r\nAs I wrote in a comment above, I'm not sure, if introducing \"tls12_cid for empty cid\" will pay off. May be you can provide us the scenario, where the request requires tls12_cid as well.  \r\n",
          "createdAt": "2019-06-02T06:52:26Z",
          "updatedAt": "2019-06-02T06:52:56Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "We don't have consensus for all of this text.  I think the proposal is to address tis in a separate document.  Can we close this PR? ",
          "createdAt": "2019-06-25T21:45:31Z",
          "updatedAt": "2019-06-25T21:45:31Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> We don't have consensus for all of this text. I think the proposal is to address tis in a separate document. Can we close this PR?\r\n\r\nThe current version of this PR has expunged the text that outlined an address validation sub-protocol.  This can and will be sketched separately.  What is left here is just a description of what the problem is and what a receiver must do to counter at least two possible attacks using simple unilateral measures.  I'm not sure what is controversial?",
          "createdAt": "2019-06-25T22:48:25Z",
          "updatedAt": "2019-06-25T22:49:11Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer, if the risk of the \"man-in-the-middle\" explicitly states, that\r\n\r\n- it's a risk to be misused to attack other systems\r\n  (the own system may attacked by such a  \"man-in-the-middle\" much harder with DoS by just dropping the messages)\r\n- therefore only applies to large response messages\r\n\r\nIn my opinion, too general descriptions of risks tend to be misunderstood.\r\n",
          "createdAt": "2019-06-26T07:16:37Z",
          "updatedAt": "2019-06-26T07:16:37Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR has been replaced by text offered in https://github.com/tlswg/dtls-conn-id/pull/68 ",
          "createdAt": "2019-07-08T17:34:18Z",
          "updatedAt": "2019-07-08T17:34:18Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ0NjExMzU3",
          "commit": {
            "abbreviatedOid": "3f9235f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-02T06:23:19Z",
          "updatedAt": "2019-06-02T06:23:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "FMPOV, **MUST** for `request` is (currently) not possible, because the use of tls12_cid is bound to a none empty cid. Only the response can considered to be MUST tls12_cid, because the cause of this address-issues is bound to use such a none empty-cid for incoming messages.\r\n",
              "createdAt": "2019-06-02T06:23:19Z",
              "updatedAt": "2019-06-02T17:33:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ0NjExNDQ3",
          "commit": {
            "abbreviatedOid": "3f9235f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-02T06:27:16Z",
          "updatedAt": "2019-06-02T06:27:16Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "My feeling is, tls12_cid with empty cid was discussed some months ago. To change this, would cause changes in other parts (MAC), and I'm not sure, if this pays off. Assuming, that the response will be a tls12_cid, which risk do you see, which cause the MUST for the request?  ",
              "createdAt": "2019-06-02T06:27:16Z",
              "updatedAt": "2019-06-02T17:33:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg4NjYxODM2",
      "title": "adding IANA values",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/67",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We need to tell IANA what to assign to all of the columns.\r\n\r\nCloses #66",
      "createdAt": "2019-06-17T00:07:18Z",
      "updatedAt": "2019-07-08T17:34:28Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "50efe087752c6a77495ee5f868f0f16160ed23f8",
      "headRepository": "seanturner/dtls-conn-id",
      "headRefName": "iana",
      "headRefOid": "4bc5731a93473803219211b1f97490e737d336b4",
      "closedAt": "2019-07-08T17:34:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "Looks good",
          "createdAt": "2019-06-20T04:56:28Z",
          "updatedAt": "2019-06-20T04:56:28Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "NONE",
          "body": "ship it",
          "createdAt": "2019-06-21T02:06:10Z",
          "updatedAt": "2019-06-21T02:06:10Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I wanted to add this to the issue #66 , not the PR.\r\n\r\n++++++++++++++++++++\r\n\r\nThat results in \r\n\r\n\"DTLS only\" for TLS extensions and\r\n\"DTLS-OK\" for TLS parameters.\r\n\r\nI'm not sure, if that just represents more the \"current\" usage than the \"logic\" behind it. \r\nI would be afraid, that this will hold up other ideas, which doesn't match that \"only for extensions / ok for parameters\" pattern.\r\n \r\n",
          "createdAt": "2019-06-21T06:30:58Z",
          "updatedAt": "2019-06-21T06:35:22Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See:\r\nhttps://mailarchive.ietf.org/arch/msg/tls/JdKKK2kKumrt4Z-51Fqx-JI9QsU",
          "createdAt": "2019-06-26T17:59:28Z",
          "updatedAt": "2019-06-26T17:59:28Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR has been replaced by text offered in https://github.com/tlswg/dtls-conn-id/pull/68 ",
          "createdAt": "2019-07-08T17:34:28Z",
          "updatedAt": "2019-07-08T17:34:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MDg4MzA5",
      "title": "IANA and Security Consideration Sections Updated",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/68",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... IANA consideration section based on issue raised by Sean (see https://github.com/tlswg/dtls-conn-id/issues/66) \n\n... Security consideration section based on issue raised by Thomas (see https://github.com/tlswg/dtls-conn-id/issues/64)",
      "createdAt": "2019-07-07T08:41:29Z",
      "updatedAt": "2019-07-08T17:41:50Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "50efe087752c6a77495ee5f868f0f16160ed23f8",
      "headRepository": "hannestschofenig/dtls-conn-id-1",
      "headRefName": "master",
      "headRefOid": "3d0509d4d642ed5c4c82af17945ce9a2402024c3",
      "closedAt": "2019-07-08T17:41:50Z",
      "mergedAt": "2019-07-08T17:41:50Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "719f220759bcb8fd3456b8ea15efcf876dc64752"
      },
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR aims to replace PR#65 & PR#67",
          "createdAt": "2019-07-07T08:44:59Z",
          "updatedAt": "2019-07-07T08:44:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 70,
      "id": "MDExOlB1bGxSZXF1ZXN0MzAwMzYwMjk3",
      "title": "Address validation take 2",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/70",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-07-23T15:46:11Z",
      "updatedAt": "2019-10-21T06:32:20Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "719f220759bcb8fd3456b8ea15efcf876dc64752",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "address-validation-take-2",
      "headRefOid": "7068a75561ef84dd7b9ff77787def107e7c4d274",
      "closedAt": "2019-10-21T06:32:20Z",
      "mergedAt": "2019-10-21T06:32:20Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "77db2f1002ce2ff329abb5f42a780f9317f49247"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg5NjAy",
          "commit": {
            "abbreviatedOid": "d1d0345"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T17:59:52Z",
          "updatedAt": "2019-07-24T17:59:53Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "How about \r\n\r\n\"When a datagram with a CID is received that has a source address different than the one currently associated with the DTLS connection, the receiver MUST NOT replace the source address currently stored in the association with the source address specified in the received datagram unless the following conditions are met:\r\n * The received datagram has been cryptographically verified using the DTLS record layer processing procedures. \r\n- The received datagram are \"newer\" (in terms of their epoch and sequence\r\n  number) than the last datagram that successfully updated the source address.",
              "createdAt": "2019-07-24T17:59:52Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjM5Njcx",
          "commit": {
            "abbreviatedOid": "d1d0345"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T19:33:54Z",
          "updatedAt": "2019-07-24T19:33:54Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I like it, but I think using the term datagram instead of record when talking about crypto operations mixes layers.",
              "createdAt": "2019-07-24T19:33:54Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2Nzk2NTc2",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-25T18:09:28Z",
          "updatedAt": "2019-07-25T18:09:29Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "turned this way sounds a bit funny.  I'd rather say that \"[...] if the implementation offers *peer address update detection*, it MUST report any peer address update on CID-enabled sessions to applications\"",
              "createdAt": "2019-07-25T18:09:28Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2NzkzOTM2",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Lots of suggestions.  I hope they are helpful.",
          "createdAt": "2019-07-25T18:04:35Z",
          "updatedAt": "2019-07-25T18:21:39Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Rewrapping this only.\r\n```suggestion\r\nWhen a datagram with a CID is received that has a source address different than\r\nthe one currently associated with the DTLS connection, the receiver MUST NOT\r\nreplace the source address currently stored in the association with the source\r\naddress specified in the received datagram unless the following conditions are\r\nmet:\r\n```\r\n\r\nHowever, I would also suggest that when you talk about \"source address\" (other than the first instance), you instead use \"peer address\", perhaps as follows:\r\n\r\n```suggestion\r\nWhen a datagram with a CID is received that has a source address different than\r\nthe one currently associated with the DTLS connection, the receiver MUST NOT\r\nreplace the address it uses for sending datagrams to its peer with the source\r\naddress specified in the received datagram unless the following conditions are\r\nmet:\r\n```",
              "createdAt": "2019-07-25T18:04:36Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 8,
              "body": "...and any duplicate detection (?)",
              "createdAt": "2019-07-25T18:05:57Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n- The received datagram is \"newer\" (in terms of both epoch and sequence\r\n```",
              "createdAt": "2019-07-25T18:06:15Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nnumber) than the newest datagram received.\r\n```\r\n\r\nfor the parenthetical, I would instead use \"The received datagram is \"newer\" than the any other datagram that has been received (meaning that the newer datagram has a higher epoch or a matching epoch and a higher sequence number)\"",
              "createdAt": "2019-07-25T18:09:09Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 13,
              "body": "I think that the main thing here is to observe that reordered datagrams don't cause excessive thrashing if datagrams are reordered by the network.  That makes this less than a firm requirement and maybe not something that you want to include in the list, but more as supplementary information.",
              "createdAt": "2019-07-25T18:12:12Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n- There is a strategy for ensuring that the new peer address is able to receive and process\r\nDTLS datagrams for the connection.\r\n```",
              "createdAt": "2019-07-25T18:13:39Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 20,
              "body": "There is no \"ensures\" here.  And, as mentioned, I think that the reordering thing is an optimization only, the reordering point can be separated.\r\n\r\n\"The above is necessary to protect against attacks that use datagrams with spoofed addresses or replayed datagrams to trigger attacks.\"",
              "createdAt": "2019-07-25T18:15:47Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nApplication protocols that implement protection against these attacks depend on\r\nbeing aware of changes in peer addresses so that they can engage the necessary\r\nmechanisms.\r\n```\r\n\r\nThen remove the remaining lines of the paragraph.",
              "createdAt": "2019-07-25T18:20:07Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nexposes the same information as the 5-tuple.\r\n```",
              "createdAt": "2019-07-25T18:21:06Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nsubsequent payloads carrying the same CID pair (for bi-directional\r\n```",
              "createdAt": "2019-07-25T18:21:16Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTUzNDA3",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:12:19Z",
          "updatedAt": "2019-08-12T08:12:19Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "The proposed change looks good to me ",
              "createdAt": "2019-08-12T08:12:19Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTUzNjQw",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:12:52Z",
          "updatedAt": "2019-08-12T08:12:52Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Good catch on the CID/connection id terminology",
              "createdAt": "2019-08-12T08:12:52Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTUzODg2",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:13:33Z",
          "updatedAt": "2019-08-12T08:13:33Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "The proposed changes are good for me ",
              "createdAt": "2019-08-12T08:13:33Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTU1MTkx",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:16:41Z",
          "updatedAt": "2019-08-12T08:16:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Ok for me. ",
              "createdAt": "2019-08-12T08:16:41Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTYwMTkz",
          "commit": {
            "abbreviatedOid": "f525ea8"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:28:09Z",
          "updatedAt": "2019-08-12T08:28:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I am failing to see the changes in the proposed text. I understand why you want to use the term 'peer address' in context and I proposed some text ",
              "createdAt": "2019-08-12T08:28:10Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTYxMTgw",
          "commit": {
            "abbreviatedOid": "32a038f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:30:39Z",
          "updatedAt": "2019-08-12T08:30:39Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We list the different requirements separately.",
              "createdAt": "2019-08-12T08:30:39Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTYxNDEw",
          "commit": {
            "abbreviatedOid": "32a038f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:31:12Z",
          "updatedAt": "2019-08-12T08:31:12Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Sounds good to me!",
              "createdAt": "2019-08-12T08:31:12Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTYyMjgw",
          "commit": {
            "abbreviatedOid": "32a038f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:33:13Z",
          "updatedAt": "2019-08-12T08:33:13Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Fine for me. I think both text segments are pretty clear about their meaning but I am happy to take this text proposal on board. ",
              "createdAt": "2019-08-12T08:33:13Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTYyODAz",
          "commit": {
            "abbreviatedOid": "32a038f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:34:25Z",
          "updatedAt": "2019-08-12T08:34:26Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I am not sure what text changes would be useful here because I don't understand the \"thrashing aspect\" you talk about here. ",
              "createdAt": "2019-08-12T08:34:26Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTYzMjU5",
          "commit": {
            "abbreviatedOid": "32a038f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:35:40Z",
          "updatedAt": "2019-08-12T08:35:40Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Good text for me. I included it. ",
              "createdAt": "2019-08-12T08:35:40Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNTY0NTc3",
          "commit": {
            "abbreviatedOid": "32a038f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-12T08:39:04Z",
          "updatedAt": "2019-08-12T08:39:05Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "I merged your text with the text from Martin and replaced the current paragraph",
              "createdAt": "2019-08-12T08:39:04Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MDQ1OTE5",
          "commit": {
            "abbreviatedOid": "a4a7a8c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The changes look good to me.",
          "createdAt": "2019-08-13T03:26:59Z",
          "updatedAt": "2019-08-13T03:27:09Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "\"Reordered datagrams that are sent prior to a change in a peer address might otherwise cause a valid address change to be reverted. This also limits the ability of an attacker to use replayed datagrams to force a spurious address change, which could result in denial of service, however an attacker might be able to force an address change if they are able to rewrite source addresses or if replayed packets are able to arrive before any original.\"\r\n\r\n?",
              "createdAt": "2019-08-13T03:27:00Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MDgyNjM5",
          "commit": {
            "abbreviatedOid": "a4a7a8c"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T06:32:02Z",
          "updatedAt": "2019-08-13T06:32:02Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "The main trigger for my comment in issue #69 was the previous definition based on \"record sequence number window\", which then would turn into \"MUST use such a window\" in order to prevent such simple kind of attacks.\r\n\r\nI therefore wrote that comment, to show, that both solutions may have their justification. \r\n\r\nThough you never know, if your under \"fire\" or if it*s a delay before or after a NAT. Therfore you will never know, what will be the perfect action, to update or not update the address. Neither with the window nor with the newer definition.\r\nMy personal preference is therefore the simpler implementation.\r\nAn my intention of issue #69 is to prevent this extension from adding a \"MUST\" to the window approach.    ",
              "createdAt": "2019-08-13T06:32:02Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MDgzOTg5",
          "commit": {
            "abbreviatedOid": "a4a7a8c"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T06:36:33Z",
          "updatedAt": "2019-08-13T06:36:33Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> This also limits the ability of an attacker to use replayed datagrams\r\n\r\nFMPOV, both solutions, the \"window\" or \"newer\" will prevent address updates from replay attacks. In difference to a replay attack, where the record sequence number is used twice (and assume, that the modified datagram is received later), such attack are mitigated by both approaches.  ",
              "createdAt": "2019-08-13T06:36:33Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MTEyNDcy",
          "commit": {
            "abbreviatedOid": "a4a7a8c"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T07:51:06Z",
          "updatedAt": "2019-08-13T07:51:07Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "> however an attacker might be able to force an address change if they are able to rewrite source addresses\r\n\r\nFMPOV, that's mainly the \"on-path-adversary\", which requires other means, which are out of the scope of this document.\r\n\r\n> or if replayed packets are able to arrive before any original. \r\n\r\nFMPOV, the means against such \"lucky attackers\" are the same as for the \"on-path-adversary\".\r\n\r\nIn my comment in the tls-mailing list \r\n\r\nhttps://mailarchive.ietf.org/arch/msg/tls/8EAYDGU5RqVcH6POHFZg30wcUYE\r\n  \r\nI expressed, \r\n\r\n> I would prefer to have the basic advice, to apply some kind of filter against modified replay attacks (either the \r\n> DTLS 1.2 Anti-Replay protection, https://tools.ietf.org/html/rfc6347#section-4.1.2.6, or other means, see\r\n> proposal https://github.com/tlswg/dtls-conn-id/issues/69 ) in the \"draft-ietf-tls-dtls-connection-id\", \r\n> instead of including that to an additional RFC together with the more complex \"on-path adversary\" scenario.\r\n\r\n\r\nSo again, my preference is to have the simple \"filter\" definitions \"window or newer\" both mentioned in this document. Also the comment, that \"on-path-adversary\" will able to bypass that protection (as \"lucky\" attacker will also do). \r\nAnd the discussion and solution for the \"advanced on-path-adversary\" in a separate document.\r\n  ",
              "createdAt": "2019-08-13T07:51:06Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MTIxMjEy",
          "commit": {
            "abbreviatedOid": "a4a7a8c"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T08:09:51Z",
          "updatedAt": "2019-08-13T08:09:51Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "At the risk of repeating it too often:\r\n\r\nI would prefer, not to relate the \"black-hole\" attack of an \"on-path-adversary\" with the CID!\r\nUntil now, nobody presented any reason, why such a general \"black-hole\" is related to this CID.\r\n\r\nSo:\r\n- either generalize the threat\r\n\r\n\"An on-path adversary can not only black-hole traffic, which is generally also possible without the CID, additionally a reflection attack could be created ...\"\r\n \r\n- or remove the \"black-hole\".\r\n\r\nIn my experience, such threats, which are for experts obviously not related to a specific technique, will be cited by others, and then it will turn into time consuming discussion instead of spending the time in protection against real threats.\r\n\r\nTHEREFORE:\r\nPlease, don't overstate the threat! The left real threat one is hard enough.\r\n ",
              "createdAt": "2019-08-13T08:09:51Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MjI0ODQw",
          "commit": {
            "abbreviatedOid": "a4a7a8c"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T11:42:57Z",
          "updatedAt": "2019-08-13T11:42:58Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Fair enough. That threat is not new to this document and hasn't been a concern to anyone as far as I know. I will remove it. \r\n",
              "createdAt": "2019-08-13T11:42:57Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MjMyNTA5",
          "commit": {
            "abbreviatedOid": "f990e07"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T11:59:54Z",
          "updatedAt": "2019-08-13T12:00:00Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I completely agree with you. We don't want to make this artificially complicated. ",
              "createdAt": "2019-08-13T11:59:54Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc0MjY4NzI1",
          "commit": {
            "abbreviatedOid": "100cf14"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-08-13T13:08:41Z",
          "updatedAt": "2019-08-13T13:08:41Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Changed the text and removed the term black-hole.",
              "createdAt": "2019-08-13T13:08:41Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAwMzc4MTA5",
          "commit": {
            "abbreviatedOid": "100cf14"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This split makes sense to me. Thanks for making the change!",
          "createdAt": "2019-10-10T22:06:13Z",
          "updatedAt": "2019-10-10T22:06:41Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nsequence number encryption is available. \r\n```",
              "createdAt": "2019-10-10T22:06:14Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAwNTE1MDAy",
          "commit": {
            "abbreviatedOid": "100cf14"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-11T07:40:19Z",
          "updatedAt": "2019-10-11T07:40:20Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "My feeling is, that should be draft-ietf-tls-dtls-connection-id-**07**, or?",
              "createdAt": "2019-10-11T07:40:20Z",
              "updatedAt": "2019-10-21T06:31:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 71,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcxMjk0ODg2",
      "title": "Corrected reference to the RRC draft",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/71",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We incorrectly put a normative reference on the RRC draft in the DTLS 1.2 CID draft.",
      "createdAt": "2020-02-05T10:28:43Z",
      "updatedAt": "2020-11-02T15:36:09Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "03bfa3bd3800ae02d30180fcfb17b31026bb4f53",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-2",
      "headRefOid": "7227c0bf6d4b7ea5d4dfb9ee6e0ef3574eaf6478",
      "closedAt": "2020-11-02T15:36:09Z",
      "mergedAt": "2020-11-02T15:36:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "baf2641edeeab736609ba8c11dbc191cab2a0383"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I lost somehow the track on that RRC and the discussion around it.\r\n\r\nThe referred document mentions:\r\n\r\n> An on-path adversary could intercept and modify the source IP address (and the source port).\r\n\r\nand\r\n\r\n> Without such a return routability check, an adversary can redirect  traffic towards a third party or a black hole.\r\n\r\nI would assume, that a on-path adversary could black hole traffic in both directions, even without CID. Not only message sent to a peer could be dropped, it would also be easy to drop a message sent back from that peer (at least, if the route back is on the same path). \r\n\r\nI would also assume, that a on-path adversary, which is able to change the source address, would also be able to change the destination address. So a simple traffic redirect will also be possible even without CID.\r\n\r\nIn my opinion, the only threat left, which is caused by the usage of a CID, would be a DDoS attack using amplified traffic towards third party. For that it seems to be most important to throttle the traffic by limiting the number and size of messages until the address is verified. Though such a DDoS will be naturally less efficient, because the adversary has to wait for messages to change the sources-address, throttling would make it even more unattractive.   ",
          "createdAt": "2020-02-12T20:37:39Z",
          "updatedAt": "2020-02-12T20:37:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 73,
      "id": "MDExOlB1bGxSZXF1ZXN0NDE3MzU5NzU3",
      "title": "Disallow sending MAC failure fatal alerts to non-validated peers",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/73",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #72 ",
      "createdAt": "2020-05-13T13:23:24Z",
      "updatedAt": "2020-11-02T19:56:05Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "03bfa3bd3800ae02d30180fcfb17b31026bb4f53",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "master",
      "headRefOid": "6747a5ab30380ce6920623f1b97d1bcb0fab3f2e",
      "closedAt": "2020-11-02T19:56:04Z",
      "mergedAt": "2020-11-02T19:56:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a4d0550651726eb430fa7fe2fb65c90bb31bafab"
      },
      "comments": [
        {
          "author": "hanno-arm",
          "authorAssociation": "NONE",
          "body": "Here's an alternative suggestion - WDYT, @boaks @thomas-fossati. Instead of\r\n\r\n```\r\nWhen a record with a CID is received that has a source address \r\ndifferent than the one currently associated with the DTLS connection, \t\r\nthe receiver MUST NOT replace the address it uses for sending records \t\r\nto its peer with the source address specified in the received to its peer\r\nwith the source address specified in the received datagram unless the \r\nfollowing conditions are met:\r\n```\r\n\r\nwrite:\r\n\r\n```\r\nWhen a record with a CID is received that has a source address \r\ndifferent than the one currently associated with the DTLS connection,\r\nthe receiver MUST NOT \r\n* replace the address it uses for sending records to its peer with the \r\n  source address specified in the received datagram, or\r\n* send a response of any kind to the record, including sending FatalAlerts\r\n  in response to an invalid record,\r\nunless the following conditions are met:\r\n```\r\n\r\nIt's a bit long, though.",
          "createdAt": "2020-05-19T08:15:06Z",
          "updatedAt": "2020-05-19T08:15:06Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Here's an alternative suggestion - WDYT, @boaks @thomas-fossati.\r\n\r\nI don't want to speak for @boaks :-), but I think he's arguing for a wider scope than just _\"When a record with a CID is received\"_\r\n",
          "createdAt": "2020-05-19T08:29:43Z",
          "updatedAt": "2020-05-19T08:29:43Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The received datagram has been cryptographically verified using the DTLS record layer processing procedures. The option of RFC6347, 4.1.2.1, to choose to generate an alert when a message with an invalid MAC is received, MUST NOT be used. The probability of accidentally terminating a valid connection state is increased using this CID. Additionally the destination address to send such an alert is ambiguous, though the address MUST NOT be updated. \r\n \r\nFMPOV that describes the increment introducing CID in the scope of MAC validation and alert generation.",
          "createdAt": "2020-05-19T08:45:28Z",
          "updatedAt": "2020-05-20T05:45:22Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let me try to point to the difference of the current text and my proposal above:\r\n\r\nIf the address hasn't changed since the last \"validation\", should a peer chose the option of [RFC 6347 - MAC](https://tools.ietf.org/html/rfc6347#section-4.1.2.1) to \r\n\r\n> generate a bad_record_mac alert with level fatal and terminate its connection state.\r\n\r\n?\r\n\r\nIf the address has changed, then a peer may choose that option but must not send bad_record_mac alert?\r\n\r\nIn my opinion, this option to \"alert\" should not be chosen for CID. Therefore, I would point to that option in RFC 6347 and recommend not to use it with CID.\r\n",
          "createdAt": "2020-11-02T16:13:24Z",
          "updatedAt": "2020-11-02T16:15:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTM1NDQy",
          "commit": {
            "abbreviatedOid": "8b81628"
          },
          "author": "hanno-arm",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2020-05-17T07:37:06Z",
          "updatedAt": "2020-05-17T07:37:06Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTgwOTI0",
          "commit": {
            "abbreviatedOid": "8b81628"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-19T07:42:37Z",
          "updatedAt": "2020-05-19T07:42:37Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "This doesn't mention the main fear, that a message is sent to the previous not updated address.\r\n\r\nThe \"any of the above checks\" may cause irritation, though the check for the newer address does not inhibit the proper processing of a \"out of order\" record on application layer.",
              "createdAt": "2020-05-19T07:42:37Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzQxMTkw",
          "commit": {
            "abbreviatedOid": "fe99f77"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-02T15:36:45Z",
          "updatedAt": "2020-11-02T15:38:16Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n* send a response of any kind to the record, including sending alerts\r\n  in response to an invalid record,\r\nunless the following conditions are met:\r\n```",
              "createdAt": "2020-11-02T15:36:45Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            },
            {
              "originalPosition": 7,
              "body": "I am also not sure what this sentence means. Whcih checks?",
              "createdAt": "2020-11-02T15:38:12Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODAzOTU5",
          "commit": {
            "abbreviatedOid": "ec800d1"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T16:41:58Z",
          "updatedAt": "2020-11-02T16:41:58Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> I am also not sure what this sentence means. Whcih checks?\r\n\r\nthe three conditions in L357-372",
              "createdAt": "2020-11-02T16:41:58Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODMwMDI2",
          "commit": {
            "abbreviatedOid": "889dcb3"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T17:09:33Z",
          "updatedAt": "2020-11-02T17:09:34Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I have updated the text to clarify that we are talking about the conditions above. ",
              "createdAt": "2020-11-02T17:09:34Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODQ3OTU2",
          "commit": {
            "abbreviatedOid": "889dcb3"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T17:28:27Z",
          "updatedAt": "2020-11-02T17:28:27Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "OK, so there are two different statements here:\r\n\r\n1. Don't update the IP and send\r\n2. Don't even accept the packet.\r\n\r\nIf we want (2) then we can simplify, right?",
              "createdAt": "2020-11-02T17:28:27Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODUxMjUy",
          "commit": {
            "abbreviatedOid": "889dcb3"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T17:32:45Z",
          "updatedAt": "2020-11-02T17:32:46Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Therefore make general case of RFC6347\r\n\r\n> In general, DTLS implementations SHOULD silently discard records with bad MACs or that are otherwise invalid.\r\n\r\nmandatory for CID and remove the option to alert.",
              "createdAt": "2020-11-02T17:32:46Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODY1MzA5",
          "commit": {
            "abbreviatedOid": "e8ac5ce"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T17:51:26Z",
          "updatedAt": "2020-11-02T17:51:27Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I removed the sentence being discussed here. ",
              "createdAt": "2020-11-02T17:51:27Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTIwMTgy",
          "commit": {
            "abbreviatedOid": "e8ac5ce"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T19:11:00Z",
          "updatedAt": "2020-11-02T19:11:01Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I'm still confused about this. There are two values here:\r\n\r\n- Don't change the path\r\n- Don't process the packet\r\n\r\nThis text, however, seems to allow you to process it but not to respond, even to the original IP. What's the reason for that?\r\n",
              "createdAt": "2020-11-02T19:11:00Z",
              "updatedAt": "2020-11-02T19:29:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTMyMDgy",
          "commit": {
            "abbreviatedOid": "e8ac5ce"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T19:29:31Z",
          "updatedAt": "2020-11-02T19:29:32Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I now see what creates the confusion. I have reworded the text and hope it is better now...",
              "createdAt": "2020-11-02T19:29:31Z",
              "updatedAt": "2020-11-02T19:29:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTQ5MDUw",
          "commit": {
            "abbreviatedOid": "6747a5a"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T19:55:49Z",
          "updatedAt": "2020-11-02T19:55:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "LGTM",
              "createdAt": "2020-11-02T19:55:49Z",
              "updatedAt": "2020-11-02T19:55:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTQ5MDkz",
          "commit": {
            "abbreviatedOid": "6747a5a"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T19:55:53Z",
          "updatedAt": "2020-11-02T19:55:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5MDc2NDA4",
      "title": "Editorial bits from AD review",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/75",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is supposed to all be editorial stuff, and I split a couple changes out into separate commits in case they're not actually desired.",
      "createdAt": "2020-09-03T23:01:12Z",
      "updatedAt": "2020-11-02T17:23:30Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "03bfa3bd3800ae02d30180fcfb17b31026bb4f53",
      "headRepository": "kaduk/dtls-conn-id-1",
      "headRefName": "master",
      "headRefOid": "4e0789ce39e94aece8264bdd219edc62d0fc1d7d",
      "closedAt": "2020-11-02T17:23:30Z",
      "mergedAt": "2020-11-02T17:23:30Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "b7133ff4ea0ef7df888c1c897b5d6bdda4010813"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjc5ODI0",
          "commit": {
            "abbreviatedOid": "d066704"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-04T14:04:29Z",
          "updatedAt": "2020-09-04T14:04:29Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "That's an interesting point. some weeks ago I considered to raise an issue for that. Generally constraint peers don't limit the CID length just for fun. They are not able to use larger ones. The upper limit of 255 bytes (hope I'm right) is more academical value. I guess, in constraint deployments 32 bytes will be mostly enough. My conclusion was therefore, that a server just documents his max. CID length. If more flexibility is really required, but constraint devices should be supported, I guess that max cid-length must be negotiated.  ",
              "createdAt": "2020-09-04T14:04:29Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjgzMjY3",
          "commit": {
            "abbreviatedOid": "d066704"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-04T14:08:53Z",
          "updatedAt": "2020-09-04T14:08:54Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Great clarification note!",
              "createdAt": "2020-09-04T14:08:54Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTA4MjQ3",
          "commit": {
            "abbreviatedOid": "d066704"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-06T03:25:15Z",
          "updatedAt": "2020-09-06T03:25:15Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "The intent here was just to improve the readability of the transition from \"when/how you can use fixed CID length\" to \"considerations about variable-length CIDs\"; the actual technical requirements are specified elsewhere in the document.\r\n(I think I also asked a question about whether there would be reason to lower the 255-byte limit, in the emailed review comments, which might be a better place to discuss this topic.)\r\n\r\nIt seems that the scenario where a node can only handle max (say) 32 byte CID is asymmetric if that node is client or server.  If it's the server, it has the option of rejecting CID entirely if the client uses a longer CID than it supports, but the client would have to do a fallback dance (retry without the CID extension) if the server said to use a \"too-long\" CID.  I was reluctant to suggest a very small cap on CID length since (IIRC) some people wanted to use the CID value as a self-encrypted blob to store routing information/etc.",
              "createdAt": "2020-09-06T03:25:15Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTc3MjEw",
          "commit": {
            "abbreviatedOid": "d066704"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-09-06T22:28:06Z",
          "updatedAt": "2020-09-06T22:33:32Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "FWIW, QUIC caps it at 20 octets, but does not allow the peer to indicate a restriction. ",
              "createdAt": "2020-09-06T22:28:07Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n   the assigned CID values must be self-delineating since there is no other\r\n```",
              "createdAt": "2020-09-06T22:29:59Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            },
            {
              "originalPosition": 173,
              "body": "I think it would be better to just note that you can replace those packets. the replay point seems like a distraction.",
              "createdAt": "2020-09-06T22:32:14Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            },
            {
              "originalPosition": 194,
              "body": "This text actually seems like it's OBE, as DTLS 1.3 uses the same extension.",
              "createdAt": "2020-09-06T22:33:26Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTc5NzYx",
          "commit": {
            "abbreviatedOid": "d066704"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-15T19:00:03Z",
          "updatedAt": "2020-09-15T19:00:03Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "The replays will be accepted as valid, though, whereas arbitrary replacement would not.\r\nOr are you saying that those *fields* can be replaced, not the packets themselves...",
              "createdAt": "2020-09-15T19:00:03Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTgyODMx",
          "commit": {
            "abbreviatedOid": "3157f84"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-15T23:53:23Z",
          "updatedAt": "2020-09-15T23:53:23Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "what I'm saying is that you could have suppressed the packets and played them with your own IP and that attack would be just as good and isn't prevented by the DTLS anti-replay mechanism.",
              "createdAt": "2020-09-15T23:53:23Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzY3MTE5",
          "commit": {
            "abbreviatedOid": "3157f84"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-16T07:56:03Z",
          "updatedAt": "2020-09-16T07:56:04Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "> played them with your own IP\r\n\r\nThat \"own IP\" isn't used for too much, potentially to send a message back.\r\nWith \"IP changes only on newer messages (according the record sequence number)\", that narrows the attack to even that \"newest package once\", until an other message gets the newest (including the spoofed message itself). \r\nI tried to express my assumption about that attack in my comment to PR #71 .\r\nFor me it seems to be not too likely, that someone tries to DDoS using something, waiting passive for passing messages instead of active generating messages. That's mainly a question of the assumed message volume.",
              "createdAt": "2020-09-16T07:56:03Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MjQwMTgz",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-08T23:17:40Z",
          "updatedAt": "2020-10-08T23:17:40Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "I think the goal here is to describe what can be done; there may not need to be a great motivation for or benefit from doing so.\r\n\r\nI took a harder think about about this and pushed some new text.  I think that it is still worth talking about the replay case, since the replays can be modified as well, but the straight-up modification case is more promiinent.",
              "createdAt": "2020-10-08T23:17:40Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MjQwNTEy",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-08T23:18:38Z",
          "updatedAt": "2020-10-08T23:18:39Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Some further updates pushed here.  It seems simplest to put the 'CH,SH' in the TLS 1.3 column in this document rather than have dtls13 modify the registration, but there's also a decent argument for keeping all the 1.3 stuff out of this document.  (So I made it as a separate commit that is easy to remove if needed.)",
              "createdAt": "2020-10-08T23:18:39Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NDAyNTMy",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-09T06:48:08Z",
          "updatedAt": "2020-10-09T06:48:09Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "Let me first mention, that both, the new text and ekr's comment are pretty right.\r\n\r\nBut since more than a year it seems to be still unclear, if, beside an \"amplification attack\", that causes any more trouble? So, yes, that is a possible scenario, that someone is changing the ip-address. But with that, what will be the negative effect of that? The record will be processed and only the usage of that spoofed address to send something back seems to be the critical part.\r\n\r\nFMPOV, it' s very easy:\r\nif the ip-address is moved out of cryptographic validation with the CID,\r\n-  then this is either very general a \"no go\", because it's not possible to limit the damage of it\r\n- or it is possible to define the limits of that attacks.\r\n\r\nSo, is this going to define the limits? Or should we consider, that, if the ip-address is outside of the cryptographic validation, it's not possible to define that?\r\n\r\n \r\n \r\n        \r\n",
              "createdAt": "2020-10-09T06:48:09Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTE4NDcx",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-10T18:44:59Z",
          "updatedAt": "2020-10-10T18:44:59Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "I'm not sure. \r\nFor me \"replay protection\" requires more than the \"newer filter\". But the \"newer filter\" would already provide a level of protection, which is comparable with the \"replay protection\". ",
              "createdAt": "2020-10-10T18:44:59Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTE4OTI1",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-10T18:52:25Z",
          "updatedAt": "2020-10-10T18:52:26Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "> what I'm saying is that you could have suppressed the packets and played them with your own IP and that attack would be just as good and isn't prevented by the DTLS anti-replay mechanism.\r\n\r\nIs the intention of this clarification, that the simple-cases, where either a \"replay-protection\" or a \"newer\" may help, should be removed and the \"address validation\" should be accented?",
              "createdAt": "2020-10-10T18:52:25Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTUxODM4",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-24T02:28:40Z",
          "updatedAt": "2020-10-24T02:28:40Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "My main goal here is to accentuate aspects that are different and possibly \"surprising\" than regular DTLS due to the addition of the CID (and no longer relying on 5-tuple).  In regular DTLS the attacker can't modify the IP addresses because they're a lookup key, so the ability to do that at all is noteworthy.  Likewise, for regular DTLS (without replay protection) an attacker can replay many copies, but the addresses in them (and thus the entire packet itself) have to be the same every time.  With CIDs, the replayed copies don't have to be bit-for-bit identical, which also seems noteworthy -- it's a \"malleable\" replay.  The specific consequences of this will vary from case to case, and the one \"amplification\" attack that we've identified so far is particularly frightening (and we have some partial mitigations for), but we should still state the new properties since we are not considering all potential use cases.  In other words, the goal here is not to specify exactly all sorts of \"trouble\" this can cause, but rather to note the difference from the previous state of affairs, so that the reader can think about how (if at all) it affects their use case.  With that mindset, I do not find the question of whether it is possible to define the \"limits of that attacks\" to be worth pursuing very much.",
              "createdAt": "2020-10-24T02:28:40Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTUxOTA2",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-24T02:29:52Z",
          "updatedAt": "2020-10-24T02:29:52Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "The replay protection has to handle out-of-order delivery, usually with a sliding window that tracks whether the most recent N packets have been seen or not.  I'm not sure I understand your question here, though.",
              "createdAt": "2020-10-24T02:29:52Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDUxNzUy",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-27T08:32:51Z",
          "updatedAt": "2020-10-27T08:32:51Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "Try to precise my saying:\r\n\r\nThe general issue of \"replay\" is **not** introduced by CID. The general protection against such \"replay\" is already in RFC6347. I would prefer, if this draft focus on the changes and **new** threats caused by CID and not repeat the ones, which apply also without CID.\r\n",
              "createdAt": "2020-10-27T08:32:51Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDUzNTc3",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-27T08:35:15Z",
          "updatedAt": "2020-10-27T08:35:16Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "> With CIDs, the replayed copies don't have to be bit-for-bit identical, which also seems noteworthy\r\n\r\nExample?",
              "createdAt": "2020-10-27T08:35:15Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDYxODY2",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-27T08:45:42Z",
          "updatedAt": "2020-10-27T08:45:42Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "> In other words, the goal here is not to specify exactly all sorts of \"trouble\" this can cause, but rather to note the difference from the previous state of affairs, so that the reader can think about how (if at all) it affects their use case. \r\n\r\n> With that mindset, I do not find the question of whether it is possible to define the \"limits of that attacks\" to be worth pursuing very much.\r\n\r\nI would prefer, if the first is discussed in the community, so that everybody can benefit from the accumulated result. That requires on my view, to address or discuss the considered \"limits of that attacks\".",
              "createdAt": "2020-10-27T08:45:42Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3ODg0NTM3",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-27T16:10:04Z",
          "updatedAt": "2020-10-27T16:10:04Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "Let me add:\r\n\r\n> is able to modify IP address/port numbers without causing the packet to be rejected by the recipient.\r\n\r\nThat seems to be generally true, even without CID. Otherwise (s)NATs  will not work.\r\nWhat is introduced with CID, is that a **different** modification (different from such a potential modification during the handshake), may be applied. CID is especially made for that scenario. And there are no direct means to precise distinguish such assumed changes from those, which are applied by an attacker. At least not without an additional data exchange. There may be some scenarios considered to be more likely as an attack than others, but that are more assumptions.     ",
              "createdAt": "2020-10-27T16:10:04Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTE5NDcz",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-31T07:18:38Z",
          "updatedAt": "2020-10-31T07:18:39Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "> Additionally, an attacker able to observe the data traffic exchanged between two DTLS peers is able to replay datagrams with modified IP address/port numbers.\r\n\r\nI understand two issues here:\r\n- message replay (reprocess the received data). CID doesn't change that, so [RFC6347 Anti-Replay](https://tools.ietf.org/html/rfc6347#section-4.1.2.6) is still valid.\r\n- address/port change. The effect depends on the [peer-address-update](https://github.com/tlswg/dtls-conn-id/blob/master/draft-ietf-tls-dtls-connection-id.md#peer-address-update-peer-address-update).\r\n\r\nThe only change I see, that it may be considered to be easier for an observer to replay the message with the **own address** compared to replay it spoofing the original address as source address.",
              "createdAt": "2020-10-31T07:18:38Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzQwMzAy",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T15:35:49Z",
          "updatedAt": "2020-11-02T15:35:49Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I am fine with the editorial change. As there is no desire to change implementation of the mechanism or to add new requirements I believe there is not much more to do with this item. ",
              "createdAt": "2020-11-02T15:35:49Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzQyNDM4",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T15:38:00Z",
          "updatedAt": "2020-11-02T15:38:00Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "I don't care about the direction we take here. If you think it is easier for IANA to register the value with this document then that's fine for me. ",
              "createdAt": "2020-11-02T15:38:00Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzQzMTk5",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T15:38:47Z",
          "updatedAt": "2020-11-02T15:42:27Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nSuch implementations MUST still be able to send\r\n```",
              "createdAt": "2020-11-02T15:38:47Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            },
            {
              "originalPosition": 29,
              "body": "I think there is a normative MUST here.",
              "createdAt": "2020-11-02T15:42:23Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzUzMzA5",
          "commit": {
            "abbreviatedOid": "6bdd246"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T15:49:10Z",
          "updatedAt": "2020-11-02T15:49:10Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "From the discussions I wonder whether we should make this text change. It looks like it confuses more than it clarifies.",
              "createdAt": "2020-11-02T15:49:10Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODM0Mjcw",
          "commit": {
            "abbreviatedOid": "4192bbc"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T17:12:33Z",
          "updatedAt": "2020-11-02T17:12:33Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "MUST language added.",
              "createdAt": "2020-11-02T17:12:33Z",
              "updatedAt": "2020-11-02T17:23:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 77,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI2OTAyMjY4",
      "title": "Update to new (hopefully) injective MAC structure as discussed in the meeting and on-list",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/77",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I added a placeholder seq_num in order to put the tls12_cid in the right place. Note that I also did not add an iv_length. This is implicit in the ciphersuite selection and so you'd have to be making some quite strong assumptions to have the iv_length be necessary, it seems, and that's already the way things were *without* the CID, so presumably if those obtained you could still mount an attack.",
      "createdAt": "2020-11-25T00:42:39Z",
      "updatedAt": "2021-01-04T11:54:54Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "d2c0e9c5eb530b4024c098746cde412c14bfd19f",
      "headRepository": "ekr/dtls-conn-id-1",
      "headRefName": "new_mac",
      "headRefOid": "2a868ca31593344dc579ac1ce9cdae0783151580",
      "closedAt": "2020-12-18T01:59:30Z",
      "mergedAt": "2020-12-18T01:59:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1e29dca2c9039ca49a3c5e98ceb326f14b7173ba"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk WDYT?",
          "createdAt": "2020-11-25T00:43:13Z",
          "updatedAt": "2020-11-25T00:43:13Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my opinion, there is no reason to use a fixed head with \"0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x19\".\r\n ",
          "createdAt": "2020-11-25T09:05:23Z",
          "updatedAt": "2020-11-25T09:05:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, I think I've explained the rationale for it in the text. Do you believe that the claimed properties are incorrect or merely that they're not necessary?",
          "createdAt": "2020-11-25T14:26:28Z",
          "updatedAt": "2020-11-25T14:26:28Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I understand your explanation to put 0xff 8 times in the front of the marker copy of tls_cid.  \r\nThough that results in a fixed header of 9 bytes, I'm curious, why that should improve the MAC.\r\nSo back to my question before, why should there be the marker copy of the tls_cid in front at all?\r\nIt was said, that all versions use such marker (maybe that's also a misunderstanding). But at least, for 1.2, such markers wasn't the case.\r\n\r\nSo, the discussion starts with: \r\nWhy should the `marker`, a copy of something, which is already in the MAC, be additionally at the begin?\r\n\r\nAnyway, if the explanation gets too complex, and others don't feel curious as well, there is also no reason not to agree on that MAC definition of this PR; it could be obviously calculated.",
          "createdAt": "2020-11-25T14:41:31Z",
          "updatedAt": "2020-11-25T14:41:31Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let me add: I'm not too happy with this proposal. But I will be even more unhappy, if this turns into a endless discussion. I would prefer some signs from others (@thomas-fossati, @hannestschofenig), if they are OK with it. \r\nNot to start in some weeks again with discussing the MAC over and over ... \r\n",
          "createdAt": "2020-11-25T14:50:16Z",
          "updatedAt": "2020-11-25T14:50:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The idea here is to provide domain separation between the MAC inputs when CID is in use and when it is not, for the reason Ben indicated, namely ensuring that an active attacker cannot create confusion about the inputs to the MAC.\r\n\r\nWhen CID is not in use, the first bytes are the 8-byte epoch/seq and the content type. Thus, if we want to ensure that the input is different when in use, then we must have 8 placeholder bytes and a different content type (or some other fixed-position distinguisher). \r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2020-11-25T14:52:04Z",
          "updatedAt": "2020-11-25T14:52:04Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Isn't there is already a separator?\r\nIn my opinion, the record-type does already provide that!\r\nAll MAC starts with 8 bytes (epoch +seqn) followed by the record-type. Though that record-type of cid-records already differ from the other, non-cid, record-types, I simply don't see the benefit.\r\nAn non-cid application-record use 0x17 at the 9th byte, with cid an application-record use 0x19.",
          "createdAt": "2020-11-25T15:02:30Z",
          "updatedAt": "2020-11-25T15:02:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that would be true if we weren't also moving the sequence number to make the DTLS header input into the MAC as-is rather than broken apart as it currently is. Once you've done that, then the type byte would be somewhere later in the packet -- in the version number if I am counting correctly.",
          "createdAt": "2020-11-25T15:09:50Z",
          "updatedAt": "2020-11-25T15:09:50Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I start to understand:\r\nIn difference to RFC6347, now the header goes as on the wire into the MAC. \r\nFor that, a artificial dummy header (fixed 9 byte) is put again in front of that, in order to ensure, that this differs from other records. Also as consequence, the cid-length is now between the dummy-header and the on-wire header. ",
          "createdAt": "2020-11-25T15:19:11Z",
          "updatedAt": "2020-11-25T15:19:11Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I would prefer some signs from others (@thomas-fossati, @hannestschofenig), if they are OK with it.\r\n\r\nLGTM\r\n",
          "createdAt": "2020-11-25T15:49:07Z",
          "updatedAt": "2020-11-25T15:49:07Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good catch on the `+s not ,s`.  Still looks good.",
          "createdAt": "2020-11-25T19:57:00Z",
          "updatedAt": "2020-11-25T19:57:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duh. One more piece of evidence that it's hard to edit yourself. Updated.\n",
          "createdAt": "2020-11-25T22:52:50Z",
          "updatedAt": "2020-11-25T22:52:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner this LGTM. Let's run this past the list!",
          "createdAt": "2020-12-03T05:41:35Z",
          "updatedAt": "2020-12-03T05:41:35Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I am OK with the changes. It is time to wrap this work up. ",
          "createdAt": "2020-12-17T17:22:37Z",
          "updatedAt": "2020-12-17T17:22:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDkyNzMz",
          "commit": {
            "abbreviatedOid": "a902e38"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This looks good; thank you.\r\n(I had a 'todo' note to check with you on who had the action-item here ... now I know!)",
          "createdAt": "2020-11-25T01:33:23Z",
          "updatedAt": "2020-11-25T01:33:23Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4ODU3OTIy",
          "commit": {
            "abbreviatedOid": "76c5582"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-25T21:31:44Z",
          "updatedAt": "2020-11-25T21:31:44Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "> will never be a valid CID when the connection ID is not in use.\r\n\r\nI think, this should be:\r\n\r\n> tls12_cid will never be one of the other content types when the connection ID is not in use.\r\n\r\nThe other MAC (when connection ID is not in use) uses the MAC of RFC5246 \r\n\r\n```\r\nMAC(MAC_write_key, seq_num +\r\n                            TLSCompressed.type +\r\n                            TLSCompressed.version +\r\n                            TLSCompressed.length +\r\n                            TLSCompressed.fragment);\r\n```\r\n\r\nnot the one previously defined for this extension.",
              "createdAt": "2020-11-25T21:31:44Z",
              "updatedAt": "2020-12-17T23:05:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4ODYzNjUz",
          "commit": {
            "abbreviatedOid": "76c5582"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-25T21:44:28Z",
          "updatedAt": "2020-11-25T21:44:29Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I'm not sure I follow the distinction you are trying to draw.",
              "createdAt": "2020-11-25T21:44:28Z",
              "updatedAt": "2020-12-17T23:05:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4ODkxNTM5",
          "commit": {
            "abbreviatedOid": "76c5582"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-25T22:50:44Z",
          "updatedAt": "2020-11-25T22:50:44Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I think we're looking for s/never be a valid CID/never be a valid content type/",
              "createdAt": "2020-11-25T22:50:44Z",
              "updatedAt": "2020-12-17T23:05:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDI0MzQ0",
          "commit": {
            "abbreviatedOid": "1b19f01"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-26T06:31:28Z",
          "updatedAt": "2020-11-26T06:31:28Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "> I think we're looking for s/never be a valid CID/never be a valid content type/\r\n\r\nYes.",
              "createdAt": "2020-11-26T06:31:28Z",
              "updatedAt": "2020-12-17T23:05:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzQ1MTc3",
          "commit": {
            "abbreviatedOid": "1b19f01"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-26T14:08:39Z",
          "updatedAt": "2020-11-26T14:08:40Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Thanks. Fixed.",
              "createdAt": "2020-11-26T14:08:40Z",
              "updatedAt": "2020-12-17T23:05:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNTMxNjUz",
          "commit": {
            "abbreviatedOid": "1b19f01"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-03T05:41:11Z",
          "updatedAt": "2020-12-03T05:41:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODE4MTU0",
          "commit": {
            "abbreviatedOid": "1b19f01"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-17T17:19:28Z",
          "updatedAt": "2020-12-17T17:19:29Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\n                      tls12_cid +\r\n```",
              "createdAt": "2020-12-17T17:19:29Z",
              "updatedAt": "2020-12-17T23:05:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 78,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMzNzIwMDUy",
      "title": "It is no longer true that an empty CID and no CID are the same",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/78",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-07T14:36:11Z",
      "updatedAt": "2020-12-19T15:08:01Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "d2c0e9c5eb530b4024c098746cde412c14bfd19f",
      "headRepository": "ekr/dtls-conn-id-1",
      "headRefName": "empty_cid",
      "headRefOid": "922e7a7a3795e5ba28036bac37d85bedff573e0b",
      "closedAt": "2020-12-19T15:08:01Z",
      "mergedAt": "2020-12-19T15:08:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a770c706e5437fc303057cc06b1a05200b087b5f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Mjk0NTAw",
          "commit": {
            "abbreviatedOid": "922e7a7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Pending @hannestschofenig's approval, too.",
          "createdAt": "2020-12-10T15:10:42Z",
          "updatedAt": "2020-12-10T15:10:42Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzkyNDUz",
          "commit": {
            "abbreviatedOid": "922e7a7"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-18T11:00:46Z",
          "updatedAt": "2020-12-18T11:00:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1NzgxMTE0",
      "title": "Corrected statement about multi-homing and CID changes",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/81",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-02T08:57:17Z",
      "updatedAt": "2021-02-27T23:37:11Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "a770c706e5437fc303057cc06b1a05200b087b5f",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-3",
      "headRefOid": "094584b0d1882e4f8e570627f0aff5a9507f85e9",
      "closedAt": "2021-02-27T23:37:11Z",
      "mergedAt": "2021-02-27T23:37:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "51264db10ee517b3f1cf3f5c066d2cd14990108d"
      },
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "Looks good to merge. ",
          "createdAt": "2021-02-15T20:37:21Z",
          "updatedAt": "2021-02-15T20:37:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMzQyMzcz",
          "commit": {
            "abbreviatedOid": "094584b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2021-02-02T13:31:27Z",
          "updatedAt": "2021-02-02T13:31:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1Nzg5NjI0",
      "title": "Changed DTLSCiphertext to DTLSCIDCiphertext for easier readability",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/82",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Doing so I introduce ciphertext_length, as the length of the AEAD-encrypted form of the serialized DTLSInnerPlaintext structure.",
      "createdAt": "2021-02-02T09:11:18Z",
      "updatedAt": "2021-02-28T17:14:36Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "a770c706e5437fc303057cc06b1a05200b087b5f",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-4",
      "headRefOid": "6c6558fc14a83a9f62c7aeac49710622b2f2ee18",
      "closedAt": "2021-02-28T17:14:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It seems to me that there are two changes here:\r\n\r\n1. The change to DTLSCIDCiphertext -- innocuous but maybe unnecessary\r\n2. The change to encrypted_record, which is, I believe, wrong. You'll note that RFC8446 uses the style pre-PR.\r\n\r\nI suggest we either close this PR or just do 1.",
          "createdAt": "2021-02-27T23:54:32Z",
          "updatedAt": "2021-02-27T23:54:32Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just for information:\r\n\r\nI assume, that the irritation about `DTLSCiphertext.length` is mainly caused by very common implicit definitions of `???.length` in in programing  languages, e.g. Java, where\r\n\r\n```java\r\nbyte[] data = new byte[0124];\r\n...\r\nif (data.length > 0) ...\r\n...\r\n``` \r\n\r\nTo escape such accidentally misinterpretations using a name different from \"length\" (and please not \"size\" nor \"sizeof\") may help. But I have my doubts, if the effect is worth the work. And potentially, all others, which are common to the notation within the RFC may then get mixed up by such new names.",
          "createdAt": "2021-02-28T13:07:37Z",
          "updatedAt": "2021-02-28T13:07:37Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "body": "I have been trying to address the review from Ben and, reading through your comments, my attempt to improve the readability failed. This means that I will withdraw this PR. ",
          "createdAt": "2021-02-28T17:14:32Z",
          "updatedAt": "2021-02-28T17:14:32Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMTMxNDA1",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-02T09:16:44Z",
          "updatedAt": "2021-02-02T09:16:44Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I may be wrong.\r\nFor me, the old defines a `DTLSCiphertext`, which contains a `length` field, which is referenced by `DTLSCiphertext.length`. the new one now has still that field, but introduces a \"ciphertext_length\",  which may be considered as \"maverick\".",
              "createdAt": "2021-02-02T09:16:44Z",
              "updatedAt": "2021-02-02T09:16:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMTQwNjQz",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-02T09:26:23Z",
          "updatedAt": "2021-02-02T09:26:23Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Would `DTLSCIDCiphertext.length` be a replacement for \"ciphertext_length\"?",
              "createdAt": "2021-02-02T09:26:23Z",
              "updatedAt": "2021-02-02T09:26:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0NTEyMTc3",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T16:40:47Z",
          "updatedAt": "2021-02-05T16:40:47Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Using DTLSCIDCiphertext.length is IMHO incorrect because the length of the encrypted content is different from the length of the entire DTLSCIDCiphertext structure. Do I see that wrong?\r\n",
              "createdAt": "2021-02-05T16:40:47Z",
              "updatedAt": "2021-02-05T16:40:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0NTE2MzU1",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T16:45:39Z",
          "updatedAt": "2021-02-05T16:45:39Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "My understanding:\r\n`DTLSCIDCiphertext.length` is not the length of `DTLSCIDCiphertext`, it's the value of the field `uint16 length` of that structure. \r\n\r\ne.g. \r\n\r\n```\r\n   uint16 encLength;\r\n   opaque enc_content[DTLSCIDCiphertext.encLength];\r\n} DTLSCIDCiphertext;\r\n```\r\n\r\n[RFC5246](https://tools.ietf.org/html/rfc5246#page-21) contains\r\n\r\n```\r\n struct {\r\n          ContentType type;       /* same as TLSPlaintext.type */\r\n          ProtocolVersion version;/* same as TLSPlaintext.version */\r\n          uint16 length;\r\n          opaque fragment[TLSCompressed.length];\r\n      } TLSCompressed;\r\n```\r\n\r\nthe `TLSCompressed.length` can't be the length of the whole `TLSCompressed` structure, but instead the value of the field `uint16 length`. ",
              "createdAt": "2021-02-05T16:45:39Z",
              "updatedAt": "2021-02-05T17:03:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNzgwNzA3",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-15T22:19:26Z",
          "updatedAt": "2021-02-15T22:19:27Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Why is this just for AEAD cipher types? ",
              "createdAt": "2021-02-15T22:19:27Z",
              "updatedAt": "2021-02-15T22:19:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwOTk5MDYx",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-16T08:51:37Z",
          "updatedAt": "2021-02-16T08:51:37Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "@jsalowey \r\n\r\nFMPOV, there are currently two interpretations of that definition. \r\n\r\nHannes:\r\n> Using DTLSCIDCiphertext.length is IMHO incorrect because the length of the encrypted content is different from the length of the entire DTLSCIDCiphertext structure. Do I see that wrong?\r\n\r\nSo xxx.length is the length of xxx.\r\n\r\nMy understanding:\r\n> DTLSCIDCiphertext.length is not the length of DTLSCIDCiphertext, it's the value of the field uint16 length of that structure.\r\n\r\nSo xxx.length is the value of the field xxx.length.\r\n\r\nI think, my interpretation is right.\r\n\r\nIf I'm right, then the changes for \"easier readability\" will change the term (field name) `length` in more places, not only there.\r\n\r\n```sh\r\n   ...\r\n    uint16 ciphertext_length;\r\n   opaque enc_content[DTLSCIDCiphertext.ciphertext_length];\r\n} DTLSCIDCiphertext;\r\n\r\n```\r\n\r\nwith that, also the term `length`in the text, not only in the structure, must be exchanged with `ciphertext_length`. And, of course, for the other cipher types as well.\r\n\r\nWith that, I'm not sure, if exchange that term really pays off, this style/expression is used in many other RFCs, and so should be common to the most readers.\r\n\r\n(I guess, if @hannestschofenig finds the time to revisit this, he will agree on my interpretation and with that, it may either \"change much more\", or this PR may get withdrawn.) \r\n",
              "createdAt": "2021-02-16T08:51:37Z",
              "updatedAt": "2021-02-16T08:51:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjA0MzM4",
          "commit": {
            "abbreviatedOid": "6c6558f"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-27T23:53:14Z",
          "updatedAt": "2021-02-27T23:53:14Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Yes, this interpretation is correct.",
              "createdAt": "2021-02-27T23:53:14Z",
              "updatedAt": "2021-02-27T23:53:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 83,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1NzkyNTcz",
      "title": "Added reference to draft-gont-numeric-ids-sec-considerations",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/83",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-02T09:15:58Z",
      "updatedAt": "2021-02-27T23:37:44Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "a770c706e5437fc303057cc06b1a05200b087b5f",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-5",
      "headRefOid": "59e31058607f03d73e65de6d078a27ff4364fc6f",
      "closedAt": "2021-02-27T23:37:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMTU3NzIz",
          "commit": {
            "abbreviatedOid": "59e3105"
          },
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-02T09:45:01Z",
          "updatedAt": "2021-02-02T09:45:02Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I'm not sure, why `port numbers` are mentioned. Any example related to CID?\r\n",
              "createdAt": "2021-02-02T09:45:02Z",
              "updatedAt": "2021-02-02T09:45:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMzQxOTYy",
          "commit": {
            "abbreviatedOid": "59e3105"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-02T13:31:00Z",
          "updatedAt": "2021-02-02T13:31:00Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This seems both unnecessary and unhelpful, for the reasons listed in my review of draft-gont. I do not believe we should make this change.\r\n",
              "createdAt": "2021-02-02T13:31:00Z",
              "updatedAt": "2021-02-02T13:31:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNzgzNzYy",
          "commit": {
            "abbreviatedOid": "59e3105"
          },
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-15T22:29:06Z",
          "updatedAt": "2021-02-15T22:29:07Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "If the authors are not in consensus to add this then we should not add it.  ",
              "createdAt": "2021-02-15T22:29:06Z",
              "updatedAt": "2021-02-15T22:29:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 84,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1Nzk1ODc1",
      "title": "Updated text in Security Consideration Section",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/84",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-02T09:20:48Z",
      "updatedAt": "2021-02-27T23:45:34Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "a770c706e5437fc303057cc06b1a05200b087b5f",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-6",
      "headRefOid": "c1b476d1276b0911929e137eedaf28f4abf59854",
      "closedAt": "2021-02-27T23:45:34Z",
      "mergedAt": "2021-02-27T23:45:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ed174c815323bba29c9b38abfd2d9106617434a2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1ODAyNzc0",
      "title": "Change history",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/85",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-02T09:31:11Z",
      "updatedAt": "2021-02-27T23:56:11Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "a770c706e5437fc303057cc06b1a05200b087b5f",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-7",
      "headRefOid": "90f8486377c0079554037b7938ea0c27cb9f539c",
      "closedAt": "2021-02-27T23:56:11Z",
      "mergedAt": "2021-02-27T23:56:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c55870941c65cab49a7785acd61ea8b6057df980"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 86,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcyNzU0Njgz",
      "title": "Add Achim Kraus to authors.",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/86",
      "state": "MERGED",
      "author": "boaks",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "And remove from Acknowledgements.\r\n(According e-mail from Joe Salowey.)",
      "createdAt": "2021-02-12T20:13:54Z",
      "updatedAt": "2021-02-27T23:34:09Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "a770c706e5437fc303057cc06b1a05200b087b5f",
      "headRepository": "boaks/dtls-conn-id",
      "headRefName": "achimkraus-patch-1",
      "headRefOid": "696d32db42843b190f18d06904fee4e6559cb675",
      "closedAt": "2021-02-27T23:34:09Z",
      "mergedAt": "2021-02-27T23:34:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a93c03be27f654c51852f9fc464294d92ada9ee3"
      },
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "Looks good to merge",
          "createdAt": "2021-02-15T20:39:47Z",
          "updatedAt": "2021-02-15T20:39:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 87,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgxNDIyODYy",
      "title": "Clarification after landing PR#84",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/87",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-27T23:50:33Z",
      "updatedAt": "2021-02-28T00:49:00Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "ed174c815323bba29c9b38abfd2d9106617434a2",
      "headRepository": "ekr/dtls-conn-id-1",
      "headRefName": "editorial_work_on_updates",
      "headRefOid": "70e8729ca8440722b78a4405b2497a5636366d10",
      "closedAt": "2021-02-28T00:47:26Z",
      "mergedAt": "2021-02-28T00:47:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done.\n\nOn Sat, Feb 27, 2021 at 4:31 PM Christopher Wood <notifications@github.com>\nwrote:\n\n> *@chris-wood* approved this pull request.\n>\n> Thanks! Can you please resolve conflicts?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/dtls-conn-id/pull/87#pullrequestreview-600205935>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIMJTWZNPBVOOWZQIWDTBGFF3ANCNFSM4YKN6XXQ>\n> .\n>\n",
          "createdAt": "2021-02-28T00:49:00Z",
          "updatedAt": "2021-02-28T00:49:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjA1NTk0",
          "commit": {
            "abbreviatedOid": "70e8729"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This seems fine.",
          "createdAt": "2021-02-28T00:22:59Z",
          "updatedAt": "2021-02-28T00:22:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMjA1OTM1",
          "commit": {
            "abbreviatedOid": "70e8729"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks! Can you please resolve conflicts?",
          "createdAt": "2021-02-28T00:31:14Z",
          "updatedAt": "2021-02-28T00:31:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkxNjA0MTQz",
      "title": "Adding reference to RFC 8174",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/92",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-12T11:35:01Z",
      "updatedAt": "2021-04-14T00:16:45Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-8",
      "headRefOid": "5982da44dfb3c2c2c02ebb72377343482b2cd988",
      "closedAt": "2021-04-14T00:16:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNzIyNzMw",
          "commit": {
            "abbreviatedOid": "5982da4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-12T12:11:33Z",
          "updatedAt": "2021-03-12T12:11:42Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "This whole para could be replaced by a `{::boilerplate bcp14}`",
              "createdAt": "2021-03-12T12:11:33Z",
              "updatedAt": "2021-03-12T12:11:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MDU1MTgz",
          "commit": {
            "abbreviatedOid": "5982da4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-13T21:50:01Z",
          "updatedAt": "2021-04-13T21:50:05Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Probably better to do it that way, yes, though what's in the PR ought to work as well.",
              "createdAt": "2021-04-13T21:50:01Z",
              "updatedAt": "2021-04-13T21:50:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkxNjA1MzIy",
      "title": "Nits",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/93",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-12T11:36:46Z",
      "updatedAt": "2021-04-13T23:54:16Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-9",
      "headRefOid": "d97423eb6eb6650d2a3a805391054af781bed4b5",
      "closedAt": "2021-04-13T23:54:16Z",
      "mergedAt": "2021-04-13T23:54:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7b1082a35f5daedf1ce6fbb79321fa3dff8202af"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNzIxNDc3",
          "commit": {
            "abbreviatedOid": "d97423e"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-12T12:09:49Z",
          "updatedAt": "2021-03-12T12:09:49Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MDc0Mzk5",
          "commit": {
            "abbreviatedOid": "d97423e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-13T22:26:42Z",
          "updatedAt": "2021-04-13T22:26:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 94,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkxNjExMzky",
      "title": "Improved readability of the IANA Consideration Section",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/94",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-12T11:46:20Z",
      "updatedAt": "2021-04-14T00:50:01Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-11",
      "headRefOid": "cd997f8a41fd18265501c8aff44110b23c52e0b1",
      "closedAt": "2021-04-14T00:50:01Z",
      "mergedAt": "2021-04-14T00:50:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2524b5f2c285461995a48641e602449e19e3e590"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNzE4NjE5",
          "commit": {
            "abbreviatedOid": "cd997f8"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-12T12:05:48Z",
          "updatedAt": "2021-03-12T12:05:48Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MDc1ODE5",
          "commit": {
            "abbreviatedOid": "cd997f8"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-13T22:29:31Z",
          "updatedAt": "2021-04-13T22:29:38Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "We might give IANA some guidance on what name to use for the column and what value(s) should appear in it.",
              "createdAt": "2021-04-13T22:29:31Z",
              "updatedAt": "2021-04-13T22:29:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 95,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkxNjE3MzUz",
      "title": "Added Acknowledgements",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/95",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-12T11:55:40Z",
      "updatedAt": "2021-04-13T23:53:04Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-12",
      "headRefOid": "a335dfe0a0b622d96ed63743da6dacf8c3cc3f1d",
      "closedAt": "2021-04-13T23:53:04Z",
      "mergedAt": "2021-04-13T23:53:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1fe1716389092bbb25aae0299741c3d45e69e359"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNzE3NDg4",
          "commit": {
            "abbreviatedOid": "a335dfe"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-12T12:04:08Z",
          "updatedAt": "2021-03-12T12:04:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 96,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkyNTYxMzAx",
      "title": "zero-length CID clarification",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/96",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify that successfully negotiating two zero-len CIDs is the same as\r\nfailing the negotiation in terms of what happens on the wire afterwards.\r\n\r\nFixes #89",
      "createdAt": "2021-03-14T15:15:41Z",
      "updatedAt": "2021-04-14T00:18:16Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "zero-len-cid-clarifications",
      "headRefOid": "2b765be2760e1204a0516874fe87805e81a951e4",
      "closedAt": "2021-04-14T00:18:16Z",
      "mergedAt": "2021-04-14T00:18:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "790ea46558f61135cc6e60b2e6422cba3c4b21fc"
      },
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For me, this PR makes it clearer and better understandable.",
          "createdAt": "2021-04-01T12:16:53Z",
          "updatedAt": "2021-04-01T12:16:53Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MDczNTAz",
          "commit": {
            "abbreviatedOid": "0d49e3d"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "What's here is good, but see inline on whether we should do a little more.",
          "createdAt": "2021-04-13T22:24:48Z",
          "updatedAt": "2021-04-13T22:25:41Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "A few lines below, we say \"For sending, if a zero-length CID has been negotiated\" which is perhaps in conflict with our stance on \"negotiated\" after the rest of these changes.  Perhaps \"if a zero-length CID was advertised for this direction\"?",
              "createdAt": "2021-04-13T22:24:48Z",
              "updatedAt": "2021-04-14T00:17:15Z"
            },
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nIf DTLS peers have negotiated the use of a non-zero-length CID in at least one\r\n```",
              "createdAt": "2021-04-13T22:25:11Z",
              "updatedAt": "2021-04-14T00:17:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 98,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE0ODA0MTE4",
      "title": "Clarify what real_type describes",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/98",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes: #97",
      "createdAt": "2021-04-13T22:38:30Z",
      "updatedAt": "2021-04-14T00:00:45Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "046f17a816b7b2dd1322434ec3ba7e5959f35d70",
      "headRepository": "kaduk/dtls-conn-id-1",
      "headRefName": "i97",
      "headRefOid": "c80663f66644be9d40b5821467ac4832b09d8684",
      "closedAt": "2021-04-14T00:00:45Z",
      "mergedAt": "2021-04-14T00:00:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "acf5b63997ee33b3e0b41ea12314f59c1fb21515"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 100,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE0ODQwODA3",
      "title": "Try to clean up the text a bit",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/100",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-14T00:29:58Z",
      "updatedAt": "2021-04-14T12:59:20Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "790ea46558f61135cc6e60b2e6422cba3c4b21fc",
      "headRepository": "ekr/dtls-conn-id-1",
      "headRefName": "clarify_zero_length_cid",
      "headRefOid": "8ff055a2c8e0184aa4291250c79c75ac96af1607",
      "closedAt": "2021-04-14T12:59:20Z",
      "mergedAt": "2021-04-14T12:59:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e90ca52b3545d032e7382123537c38f40bbb78f8"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk ",
          "createdAt": "2021-04-14T00:54:44Z",
          "updatedAt": "2021-04-14T00:54:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk I cleaned this up a bit, PTAL.",
          "createdAt": "2021-04-14T03:47:40Z",
          "updatedAt": "2021-04-14T03:47:40Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MTgyOTY2",
          "commit": {
            "abbreviatedOid": "74990f2"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The overall approach is a good cleanup; just some wordsmithing left.",
          "createdAt": "2021-04-14T03:24:16Z",
          "updatedAt": "2021-04-14T03:28:56Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "(nit) something of a singular/plural mismatch since \"not negotiated the use of CIDs\" doesn't have an associated direction.\r\nOn first look, \"MUST be used to send in the indicated direction(s)\" might cover it.",
              "createdAt": "2021-04-14T03:24:16Z",
              "updatedAt": "2021-04-14T03:47:09Z"
            },
            {
              "originalPosition": 45,
              "body": "\"the check fails\" is maybe ambiguous about how to map from \"a check [...] whether <X> is expected\".  Maybe just \"If a non-zero-length CID is expected for the retrieved association, then the datagram MUST be dropped\"?",
              "createdAt": "2021-04-14T03:26:09Z",
              "updatedAt": "2021-04-14T03:47:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MTk1Mjcx",
          "commit": {
            "abbreviatedOid": "8ff055a"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Updates look good.  Thanks!",
          "createdAt": "2021-04-14T04:04:15Z",
          "updatedAt": "2021-04-14T04:04:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 101,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE0ODQ4ODgx",
      "title": "IANA updates. Fixes #99.",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/101",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Suggest a column name.\r\n- Deprecate the old connection_id codepoint.",
      "createdAt": "2021-04-14T00:52:59Z",
      "updatedAt": "2021-04-14T03:38:39Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2524b5f2c285461995a48641e602449e19e3e590",
      "headRepository": "ekr/dtls-conn-id-1",
      "headRefName": "iana_updates",
      "headRefOid": "17da5b58adb0711c8f84479588e62385864da93d",
      "closedAt": "2021-04-14T03:38:39Z",
      "mergedAt": "2021-04-14T03:38:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4cc7f955a9715cb4d2931fde867105041645bb1b"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk ",
          "createdAt": "2021-04-14T00:53:05Z",
          "updatedAt": "2021-04-14T00:53:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MTc5MDE3",
          "commit": {
            "abbreviatedOid": "44a3c97"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "See suggestion inline, though even as-is this is probably enough to cause the right things to happen at IANA and the RPC.",
          "createdAt": "2021-04-14T03:11:10Z",
          "updatedAt": "2021-04-14T03:13:54Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "IIRC in the thread with IANA we did state the expectations for how this column is populated (Y and N), so I think it's okay to not say more here.",
              "createdAt": "2021-04-14T03:11:10Z",
              "updatedAt": "2021-04-14T03:38:00Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nin the table below. Although the value 53 has been allocated by early allocation for a previous version of this document, it\r\n```",
              "createdAt": "2021-04-14T03:12:07Z",
              "updatedAt": "2021-04-14T03:38:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE1NjA4NDQw",
      "title": "fix nit",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/102",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It is a new record format; the new type is the CID content type mentioned\r\nshortly thereafter.",
      "createdAt": "2021-04-14T23:25:17Z",
      "updatedAt": "2021-04-14T23:34:31Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "e90ca52b3545d032e7382123537c38f40bbb78f8",
      "headRepository": "kaduk/dtls-conn-id-1",
      "headRefName": "nit",
      "headRefOid": "b921c8475d692ce9978818f645da53ed876aead4",
      "closedAt": "2021-04-14T23:34:31Z",
      "mergedAt": "2021-04-14T23:34:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0bdac1ca5922c9e3544913e3de2878a4c99af98f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTU3NjE2",
          "commit": {
            "abbreviatedOid": "9fc25d5"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-14T23:28:34Z",
          "updatedAt": "2021-04-14T23:28:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nPlaintext payloads never use the new record format or the CID content\r\n```",
              "createdAt": "2021-04-14T23:28:34Z",
              "updatedAt": "2021-04-14T23:28:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTU4NjQ0",
          "commit": {
            "abbreviatedOid": "b921c84"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-14T23:30:57Z",
          "updatedAt": "2021-04-14T23:30:58Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "good catch; thanks.",
              "createdAt": "2021-04-14T23:30:57Z",
              "updatedAt": "2021-04-14T23:30:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE3OTAwNTcy",
      "title": "rephrasing the \"cid with encoded length\" para",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/105",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Partly addresses #104",
      "createdAt": "2021-04-19T11:10:46Z",
      "updatedAt": "2021-04-19T15:55:48Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "0bdac1ca5922c9e3544913e3de2878a4c99af98f",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "patch-1",
      "headRefOid": "ae8088afa8c5140920166aef3412a0cf0cb8e443",
      "closedAt": "2021-04-19T15:55:47Z",
      "mergedAt": "2021-04-19T15:55:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1043c5062331899bbca5a776bfa5c349db6586cf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM4NzQzNTY5",
          "commit": {
            "abbreviatedOid": "9cd4ec9"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-19T11:11:12Z",
          "updatedAt": "2021-04-19T11:11:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nimplementations that want to use variable-length CIDs are responsible\r\n```",
              "createdAt": "2021-04-19T11:11:12Z",
              "updatedAt": "2021-04-19T11:11:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 108,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE5NjkxNjAx",
      "title": "apply Francesca's comments",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/108",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #106",
      "createdAt": "2021-04-20T21:15:32Z",
      "updatedAt": "2021-04-23T19:48:33Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "1043c5062331899bbca5a776bfa5c349db6586cf",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "patch-2",
      "headRefOid": "34bd7ed0472a4bddef6391fe6002db7ffbdca3bd",
      "closedAt": "2021-04-23T19:48:33Z",
      "mergedAt": "2021-04-23T19:48:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "859abe9c9a486f90a0fac19adc18cb839626ea51"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwNDQ1MDEx",
          "commit": {
            "abbreviatedOid": "ac16587"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-20T21:35:33Z",
          "updatedAt": "2021-04-20T21:35:33Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nA new column \"DTLS-Only\" is added to the registry.\r\n```",
              "createdAt": "2021-04-20T21:35:33Z",
              "updatedAt": "2021-04-20T21:35:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 110,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE5ODcxMDE2",
      "title": "John Scudder's remark about the presentation language",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/110",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-21T05:39:53Z",
      "updatedAt": "2021-04-23T23:05:41Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "1043c5062331899bbca5a776bfa5c349db6586cf",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-13",
      "headRefOid": "d7309ba9aa8e6ed8883bd179cf4cfc4d62e5cdf6",
      "closedAt": "2021-04-23T23:05:41Z",
      "mergedAt": "2021-04-23T23:05:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "116a791948287d7998d7eca62e43254c5b860843"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwNzQ4OTEz",
          "commit": {
            "abbreviatedOid": "98bf3f5"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2021-04-21T08:10:13Z",
          "updatedAt": "2021-04-21T08:10:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNjE3NjY4",
          "commit": {
            "abbreviatedOid": "98bf3f5"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T19:48:56Z",
          "updatedAt": "2021-04-23T19:48:57Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nused in this document is described in Section 4 of {{RFC8446}}.\r\n```",
              "createdAt": "2021-04-23T19:48:57Z",
              "updatedAt": "2021-04-23T23:04:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 111,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE5ODc0NzYy",
      "title": "John Scudder's Improved Peer Address Update Text",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/111",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-21T05:49:14Z",
      "updatedAt": "2021-05-11T09:44:48Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "1043c5062331899bbca5a776bfa5c349db6586cf",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-14",
      "headRefOid": "307485e76cd9e78d716b6811b852d04fc49ebca0",
      "closedAt": "2021-05-11T09:44:48Z",
      "mergedAt": "2021-05-11T09:44:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2eccffd3a8a291fdf468cee6f969c8c50e0ee4b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwNzQ1MTA1",
          "commit": {
            "abbreviatedOid": "307485e"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-21T08:05:57Z",
          "updatedAt": "2021-04-21T08:05:58Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I would stick an informational ref to {{I-D.ietf-core-echo-request-tag}} here.",
              "createdAt": "2021-04-21T08:05:58Z",
              "updatedAt": "2021-04-21T08:05:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxMjA5OTc5",
          "commit": {
            "abbreviatedOid": "307485e"
          },
          "author": "thomas-fossati",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-04T13:03:45Z",
          "updatedAt": "2021-05-04T13:03:45Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "(For the records: this is just a suggestion, not a blocking comment.  Feel free to ignore it.)",
              "createdAt": "2021-05-04T13:03:45Z",
              "updatedAt": "2021-05-04T13:04:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 113,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwOTM4MDY0",
      "title": "the \"nits\" part of \u00c9ric's review comments",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/113",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-22T09:52:47Z",
      "updatedAt": "2021-04-23T19:49:49Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "1043c5062331899bbca5a776bfa5c349db6586cf",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "patch-3",
      "headRefOid": "22e455dcdd573e4161d8c724109deec461dcf5bd",
      "closedAt": "2021-04-23T19:49:48Z",
      "mergedAt": "2021-04-23T19:49:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "491277ded864d29eb255070a8f0eecb781390f48"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 114,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwOTQ4MDQ3",
      "title": "address Warren's review",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/114",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "attempt at addressing Warren's concern about the use of \"globally\"\r\n\r\nFixes #112",
      "createdAt": "2021-04-22T10:06:37Z",
      "updatedAt": "2021-04-23T19:50:02Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "1043c5062331899bbca5a776bfa5c349db6586cf",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "patch-4",
      "headRefOid": "7eafd109d5113b76daf3417f82dbb181f85bcc25",
      "closedAt": "2021-04-23T19:50:01Z",
      "mergedAt": "2021-04-23T19:50:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "fa1ca364968d5b493693b4d32d95defbeef7614f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 116,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIyMzE2MDk4",
      "title": "Lars' grammar fixes",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/116",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #115",
      "createdAt": "2021-04-23T20:36:30Z",
      "updatedAt": "2021-04-23T23:04:25Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "fa1ca364968d5b493693b4d32d95defbeef7614f",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "patch-5",
      "headRefOid": "ef4745f13ece2f0835d66636fc594d7a7aa91df9",
      "closedAt": "2021-04-23T23:04:25Z",
      "mergedAt": "2021-04-23T23:04:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e2203708888c181ed4cacb3dc4e778285e676faf"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, I think some of these are gratuitous but they're not harmful.",
          "createdAt": "2021-04-23T23:04:20Z",
          "updatedAt": "2021-04-23T23:04:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 117,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwMDI3Mjkz",
      "title": "Updates to Acknowledgements and History",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/117",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-11T10:13:01Z",
      "updatedAt": "2021-05-11T10:13:22Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "2eccffd3a8a291fdf468cee6f969c8c50e0ee4b5",
      "headRepository": "tlswg/dtls-conn-id",
      "headRefName": "hannestschofenig-patch-15",
      "headRefOid": "faa9c1af444577e0464293a5dc5d1c2e144bf12b",
      "closedAt": "2021-05-11T10:13:15Z",
      "mergedAt": "2021-05-11T10:13:15Z",
      "mergedBy": "hannestschofenig",
      "mergeCommit": {
        "oid": "daa8598677956043ebecc3aab3c75d2fefe22a37"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 118,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY1MDczOTU0",
      "title": "fix section reference to RFC 8446 for presentation language",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/118",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-08T16:30:32Z",
      "updatedAt": "2021-06-09T04:12:16Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "daa8598677956043ebecc3aab3c75d2fefe22a37",
      "headRepository": "kaduk/dtls-conn-id-1",
      "headRefName": "approval",
      "headRefOid": "39a9d98b8352a9b921facaa44093f5969e847828",
      "closedAt": "2021-06-09T04:12:16Z",
      "mergedAt": "2021-06-09T04:12:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "aacb419d24b44f312a1256e2c6bda440f4a9135c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 119,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY1MDc2NDcz",
      "title": "clarify \"replace the address\"",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/119",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[just something I was thinking about in looking at John's ballot comment.  I'm not 100% sure whether this is actually needed or helpful.]\r\n\r\nThis refers to the default address to send stuff to, but should not\r\nexclude one-offs that go elsewhere as deliberate probes.",
      "createdAt": "2021-06-08T16:34:15Z",
      "updatedAt": "2021-06-22T21:15:00Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "daa8598677956043ebecc3aab3c75d2fefe22a37",
      "headRepository": "kaduk/dtls-conn-id-1",
      "headRefName": "probes",
      "headRefOid": "324873e2a669b272b16a15cf48993fdc4b278830",
      "closedAt": "2021-06-22T21:15:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "body": "FMPOV, that may be amended \"somehow\" to the third \"unless condition\", though I consider the \"probes\" are part of that strategy.\r\n\r\n> There is a strategy for ensuring that the new peer address is able to receive and process DTLS records. ",
          "createdAt": "2021-06-08T16:40:57Z",
          "updatedAt": "2021-06-08T16:40:57Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure, \"have a strategy for ensuring\" could include sending the probes.  Which gets back to my initial disclaimer, I think :)",
          "createdAt": "2021-06-08T16:45:35Z",
          "updatedAt": "2021-06-08T16:45:35Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the current wording was somehow based on the \"implementation idea\", that there is something as a  \"verified address\". That will only be replaced by a new one, only if that new one gets verified. Therefore my remark, that I would move the disclaimer somehow to that \"strategy\".\r\n\r\ne.g.\r\nunless ...\r\n\r\n> There is a strategy for ensuring that the new peer address is able to receive and process DTLS records. No strategy is mandated by this specification but see note (*) below. (That strategy may use the different source address to send specific probing packets to.)\r\n ",
          "createdAt": "2021-06-08T16:55:39Z",
          "updatedAt": "2021-06-08T16:55:39Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That seems worth trying out (new attempt pushed)",
          "createdAt": "2021-06-08T19:56:15Z",
          "updatedAt": "2021-06-08T19:56:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm kind of negative on this one. I tend to think we've said too much already, given we decided to punt this.",
          "createdAt": "2021-06-09T04:12:57Z",
          "updatedAt": "2021-06-09T04:12:57Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm kind of negative on this one. I tend to think we've said too much already, given we decided to punt this.\r\n\r\nThat's fair.  This started out as an internal thought \"how can you probe a new address if you can't replace the address you send to?\", but as Achim pointed out, we don't require that you have already completed a verification (before you send to the new address), just that you have a strategy for the verification, which is a weaker requirement.\r\nThanks for taking a look.",
          "createdAt": "2021-06-09T04:16:17Z",
          "updatedAt": "2021-06-09T04:16:17Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "COLLABORATOR",
          "body": "We seem to think Section 6 is good as-is.  Since we have established that [dtls-rrc](https://github.com/tlswg/dtls-rrc) is the place where to deal with this matter, we agreed to close this PR",
          "createdAt": "2021-06-22T21:15:00Z",
          "updatedAt": "2021-06-22T21:15:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 120,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY1MTY4NDcw",
      "title": "Mention padding and ContentType encryption",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/120",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As suggested by \u00c9ric Vyncke, mention that the new ciphertext record\r\nformat provides ContentType encryption and per-record padding in both\r\nabstract and introduction.",
      "createdAt": "2021-06-08T18:36:08Z",
      "updatedAt": "2021-06-22T21:09:19Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "daa8598677956043ebecc3aab3c75d2fefe22a37",
      "headRepository": "kaduk/dtls-conn-id-1",
      "headRefName": "padding",
      "headRefOid": "fbe329d5fc2882a3369086ffcd49b47119f0996d",
      "closedAt": "2021-06-22T21:09:19Z",
      "mergedAt": "2021-06-22T21:09:19Z",
      "mergedBy": "thomas-fossati",
      "mergeCommit": {
        "oid": "9ab43353042c15fb8335b96f662ce2fcc73fafc4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4OTIxNDQ4",
          "commit": {
            "abbreviatedOid": "fbe329d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-08T19:27:08Z",
          "updatedAt": "2021-06-08T19:27:08Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc5MTkxMDEz",
          "commit": {
            "abbreviatedOid": "fbe329d"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2021-06-09T04:11:31Z",
          "updatedAt": "2021-06-09T04:11:31Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MzA4NTcy",
          "commit": {
            "abbreviatedOid": "fbe329d"
          },
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-22T10:02:31Z",
          "updatedAt": "2021-06-22T10:02:31Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Being not a native english speaker, I feel, a \"is\" is missing? \r\n\r\n> and a mechanism is provided for adding padding to obfuscate the plaintext length.",
              "createdAt": "2021-06-22T10:02:31Z",
              "updatedAt": "2021-06-22T10:02:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MzQ2MjA0",
          "commit": {
            "abbreviatedOid": "fbe329d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-22T10:43:46Z",
          "updatedAt": "2021-06-22T10:43:47Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Looks like a construction that in Italian grammar is called (literal translation) \"elliptical proposition\".  You can omit subject or predicate in a sentence if they are unambiguously implied by the context.",
              "createdAt": "2021-06-22T10:43:46Z",
              "updatedAt": "2021-06-22T10:43:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MzY0Njcw",
          "commit": {
            "abbreviatedOid": "fbe329d"
          },
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-22T11:05:25Z",
          "updatedAt": "2021-06-22T11:05:25Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Thanks :-)",
              "createdAt": "2021-06-22T11:05:25Z",
              "updatedAt": "2021-06-22T11:05:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 121,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY1OTI2NTk0",
      "title": "update RRC ref",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/121",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update reference to the adopted RRC draft",
      "createdAt": "2021-06-09T13:47:34Z",
      "updatedAt": "2021-06-22T21:16:20Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "aacb419d24b44f312a1256e2c6bda440f4a9135c",
      "headRepository": "thomas-fossati/dtls-conn-id",
      "headRefName": "patch-6",
      "headRefOid": "78dd23fc5d557f2cd47611e806b1fbaf193e53ee",
      "closedAt": "2021-06-22T21:16:15Z",
      "mergedAt": "2021-06-22T21:16:15Z",
      "mergedBy": "thomas-fossati",
      "mergeCommit": {
        "oid": "40f193f97fec9fdee44dde7ea089baab96c4400b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 122,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1NDI5NTgy",
      "title": "Use wording similar to other length field.",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/122",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix question 5 rfced.\r\n\r\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>",
      "createdAt": "2021-08-06T12:02:11Z",
      "updatedAt": "2021-08-28T15:33:13Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "40f193f97fec9fdee44dde7ea089baab96c4400b",
      "headRepository": "boaks/dtls-conn-id",
      "headRefName": "rfced_5",
      "headRefOid": "9c810e40b2ee242bc0624f0f2e2fd65b27dd75ed",
      "closedAt": "2021-08-28T15:33:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "body": "Already integrated.",
          "createdAt": "2021-08-28T15:33:13Z",
          "updatedAt": "2021-08-28T15:33:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 123,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1NDMxNjg4",
      "title": "Use same trailing ) position.",
      "url": "https://github.com/tlswg/dtls-conn-id/pull/123",
      "state": "CLOSED",
      "author": "boaks",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix question 6 rfced.\r\n\r\nSigned-off-by: Achim Kraus <achim.kraus@bosch.io>",
      "createdAt": "2021-08-06T12:05:23Z",
      "updatedAt": "2021-08-28T15:33:04Z",
      "baseRepository": "tlswg/dtls-conn-id",
      "baseRefName": "master",
      "baseRefOid": "40f193f97fec9fdee44dde7ea089baab96c4400b",
      "headRepository": "boaks/dtls-conn-id",
      "headRefName": "rfced_6",
      "headRefOid": "76d158e8f646d0f32cd8dec7b488b5f6a7ce7f63",
      "closedAt": "2021-08-28T15:33:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "boaks",
          "authorAssociation": "COLLABORATOR",
          "body": "Already integrated.",
          "createdAt": "2021-08-28T15:33:03Z",
          "updatedAt": "2021-08-28T15:33:03Z"
        }
      ],
      "reviews": []
    }
  ]
}